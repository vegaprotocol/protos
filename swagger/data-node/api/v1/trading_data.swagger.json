{
  "swagger": "2.0",
  "info": {
    "title": "data-node/api/v1/trading_data.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/assets": {
      "get": {
        "summary": "Get a list of all assets on Vega",
        "operationId": "Assets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AssetsResponse"
            }
          }
        },
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/assets/{asset}/globalRewardPoolAccount": {
      "get": {
        "summary": "Get a list of accounts holding reward pools\nCan be filtered by asset, there will be 1 reward pool account per\nasset in the network.",
        "operationId": "GlobalRewardPoolAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GlobalRewardPoolAccountsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "asset",
            "description": "Asset identifier, required field\n- Set to an empty string to return all accounts\n- Set to an asset ID to return a single global reward pool account for a given asset",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/assets/{asset}/infrastructureFeeAccount": {
      "get": {
        "summary": "Get a list of accounts holding infrastructure fees.\nCan be filtered by asset, there will be 1 infrastructure fee account per\nasset in the network.",
        "operationId": "FeeInfrastructureAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1FeeInfrastructureAccountsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "asset",
            "description": "Asset identifier, required field\n- Set to an empty string to return all accounts\n- Set to an asset ID to return a single infrastructure fee account for a given asset",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/assets/{id}": {
      "get": {
        "summary": "Get an asset by its identifier",
        "operationId": "AssetByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AssetByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Asset identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/delegations": {
      "get": {
        "summary": "Get delegation data",
        "operationId": "Delegations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DelegationsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "party",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "node_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "epoch_seq",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "description": "Skip the number of records specified, default is 0.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "Limit the number of returned records to the value specified, default is 50.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "description": "Descending reverses the order of the records returned,\ndefault is true, if false the results will be returned in ascending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/deposits/{id}": {
      "get": {
        "summary": "Get a deposit by its identifier",
        "operationId": "Deposit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DepositResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the deposit",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/epochs": {
      "get": {
        "summary": "Get data for a specific epoch, if id omitted it gets the current epoch",
        "operationId": "GetEpoch2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetEpochResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Optional - if id omitted it gets the current epoch.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/epochs/{id}": {
      "get": {
        "summary": "Get data for a specific epoch, if id omitted it gets the current epoch",
        "operationId": "GetEpoch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetEpochResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Optional - if id omitted it gets the current epoch",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/governance/asset/proposals": {
      "get": {
        "summary": "Get governance data (proposals and votes) for proposals aiming to create new assets",
        "operationId": "GetNewAssetProposals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetNewAssetProposalsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "select_in_state.value",
            "description": "Proposal state value.\n\n - STATE_UNSPECIFIED: Default value, always invalid\n - STATE_FAILED: Proposal enactment has failed - even though proposal has passed, its execution could not be performed\n - STATE_OPEN: Proposal is open for voting\n - STATE_PASSED: Proposal has gained enough support to be executed\n - STATE_REJECTED: Proposal wasn't accepted (proposal terms failed validation due to wrong configuration or failing to meet network requirements)\n - STATE_DECLINED: Proposal didn't get enough votes (either failing to gain required participation or majority level)\n - STATE_ENACTED: Proposal enacted\n - STATE_WAITING_FOR_NODE_VOTE: Waiting for node validation of the proposal",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "STATE_UNSPECIFIED",
              "STATE_FAILED",
              "STATE_OPEN",
              "STATE_PASSED",
              "STATE_REJECTED",
              "STATE_DECLINED",
              "STATE_ENACTED",
              "STATE_WAITING_FOR_NODE_VOTE"
            ],
            "default": "STATE_UNSPECIFIED"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/governance/market/proposals": {
      "get": {
        "summary": "Get governance data (proposals and votes) for proposals that aim creating new markets",
        "operationId": "GetNewMarketProposals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetNewMarketProposalsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "select_in_state.value",
            "description": "Proposal state value.\n\n - STATE_UNSPECIFIED: Default value, always invalid\n - STATE_FAILED: Proposal enactment has failed - even though proposal has passed, its execution could not be performed\n - STATE_OPEN: Proposal is open for voting\n - STATE_PASSED: Proposal has gained enough support to be executed\n - STATE_REJECTED: Proposal wasn't accepted (proposal terms failed validation due to wrong configuration or failing to meet network requirements)\n - STATE_DECLINED: Proposal didn't get enough votes (either failing to gain required participation or majority level)\n - STATE_ENACTED: Proposal enacted\n - STATE_WAITING_FOR_NODE_VOTE: Waiting for node validation of the proposal",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "STATE_UNSPECIFIED",
              "STATE_FAILED",
              "STATE_OPEN",
              "STATE_PASSED",
              "STATE_REJECTED",
              "STATE_DECLINED",
              "STATE_ENACTED",
              "STATE_WAITING_FOR_NODE_VOTE"
            ],
            "default": "STATE_UNSPECIFIED"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/governance/proposal/reference/{reference}": {
      "get": {
        "summary": "Get governance data (proposals and votes) for a proposal located by reference",
        "operationId": "GetProposalByReference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProposalByReferenceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "reference",
            "description": "Proposal reference. Required field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/governance/proposal/{proposal_id}": {
      "get": {
        "summary": "Get governance data (proposals and votes) for a proposal located by ID",
        "operationId": "GetProposalByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProposalByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "proposal_id",
            "description": "Proposal identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/governance/proposals": {
      "get": {
        "summary": "Get governance data (proposals and votes) for all proposals",
        "operationId": "GetProposals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProposalsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "select_in_state.value",
            "description": "Proposal state value.\n\n - STATE_UNSPECIFIED: Default value, always invalid\n - STATE_FAILED: Proposal enactment has failed - even though proposal has passed, its execution could not be performed\n - STATE_OPEN: Proposal is open for voting\n - STATE_PASSED: Proposal has gained enough support to be executed\n - STATE_REJECTED: Proposal wasn't accepted (proposal terms failed validation due to wrong configuration or failing to meet network requirements)\n - STATE_DECLINED: Proposal didn't get enough votes (either failing to gain required participation or majority level)\n - STATE_ENACTED: Proposal enacted\n - STATE_WAITING_FOR_NODE_VOTE: Waiting for node validation of the proposal",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "STATE_UNSPECIFIED",
              "STATE_FAILED",
              "STATE_OPEN",
              "STATE_PASSED",
              "STATE_REJECTED",
              "STATE_DECLINED",
              "STATE_ENACTED",
              "STATE_WAITING_FOR_NODE_VOTE"
            ],
            "default": "STATE_UNSPECIFIED"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/key-rotations": {
      "get": {
        "summary": "Get all key rotations",
        "operationId": "GetKeyRotations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetKeyRotationsResponse"
            }
          }
        },
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/liquidity-provisions/party/{party}/market/{market}": {
      "get": {
        "summary": "Get the liquidity provision orders",
        "operationId": "LiquidityProvisions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LiquidityProvisionsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "party",
            "description": "The party which submitted the liquidity provision orders",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "market",
            "description": "The target market for the liquidity provision orders",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/markets": {
      "get": {
        "summary": "Get a list of Markets",
        "operationId": "Markets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MarketsResponse"
            }
          }
        },
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/markets-data": {
      "get": {
        "summary": "Get a list of Market Data",
        "operationId": "MarketsData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MarketsDataResponse"
            }
          }
        },
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/markets-data/{market_id}": {
      "get": {
        "summary": "Get Market Data by Market ID",
        "operationId": "MarketDataByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MarketDataByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "market_id",
            "description": "Market identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/markets/{market_id}": {
      "get": {
        "summary": "Get a Market by ID",
        "operationId": "MarketByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MarketByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "market_id",
            "description": "Market identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/markets/{market_id}/accounts": {
      "get": {
        "summary": "Get a list of Accounts by Market",
        "operationId": "MarketAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MarketAccountsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "market_id",
            "description": "Market identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "description": "Asset identifier.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/markets/{market_id}/candles": {
      "get": {
        "summary": "Get a list of Candles by Market",
        "operationId": "Candles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CandlesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "market_id",
            "description": "Market identifier, required field.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "since_timestamp",
            "description": "Timestamp to retrieve candles since, in nanoseconds since the epoch,\nrequired field - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "interval",
            "description": "Time interval for the candles, required field.\n\n - INTERVAL_UNSPECIFIED: Default value, always invalid\n - INTERVAL_I1M: 1 minute.\n - INTERVAL_I5M: 5 minutes.\n - INTERVAL_I15M: 15 minutes.\n - INTERVAL_I1H: 1 hour.\n - INTERVAL_I6H: 6 hours.\n - INTERVAL_I1D: 1 day.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INTERVAL_UNSPECIFIED",
              "INTERVAL_I1M",
              "INTERVAL_I5M",
              "INTERVAL_I15M",
              "INTERVAL_I1H",
              "INTERVAL_I6H",
              "INTERVAL_I1D"
            ],
            "default": "INTERVAL_UNSPECIFIED"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/markets/{market_id}/depth": {
      "get": {
        "summary": "Get Market Depth",
        "operationId": "MarketDepth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MarketDepthResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "market_id",
            "description": "Market identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "max_depth",
            "description": "Max depth limits the number of levels returned. Default is 0, which returns all levels.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/markets/{market_id}/orders": {
      "get": {
        "summary": "Get a list of Orders by Market",
        "operationId": "OrdersByMarket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OrdersByMarketResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "market_id",
            "description": "Market identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "description": "Skip the number of records specified, default is 0.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "Limit the number of returned records to the value specified, default is 50.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "description": "Descending reverses the order of the records returned,\ndefault is true, if false the results will be returned in ascending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/markets/{market_id}/orders/{order_id}": {
      "get": {
        "summary": "Get an Order by Market and Order ID",
        "operationId": "OrderByMarketAndID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OrderByMarketAndIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "market_id",
            "description": "Market identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "order_id",
            "description": "Order identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/markets/{market_id}/trades": {
      "get": {
        "summary": "Get a list of Trades by Market",
        "operationId": "TradesByMarket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TradesByMarketResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "market_id",
            "description": "Market identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "description": "Skip the number of records specified, default is 0.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "Limit the number of returned records to the value specified, default is 50.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "description": "Descending reverses the order of the records returned,\ndefault is true, if false the results will be returned in ascending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/markets/{market_id}/trades/latest": {
      "get": {
        "summary": "Get latest Trade",
        "operationId": "LastTrade",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LastTradeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "market_id",
            "description": "Market identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/network/parameters": {
      "get": {
        "summary": "Get the network parameters",
        "operationId": "NetworkParameters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1NetworkParametersResponse"
            }
          }
        },
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/nodes": {
      "get": {
        "summary": "List all known network nodes",
        "operationId": "GetNodes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetNodesResponse"
            }
          }
        },
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/nodes-data": {
      "get": {
        "summary": "Get data of current node",
        "operationId": "GetNodeData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetNodeDataResponse"
            }
          }
        },
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/nodes/{id}": {
      "get": {
        "summary": "Get a specific node by ID",
        "operationId": "GetNodeByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetNodeByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required id of node",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/oracle-specs": {
      "get": {
        "summary": "Get the oracle specs",
        "operationId": "OracleSpecs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OracleSpecsResponse"
            }
          }
        },
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/oracle-specs/{id}": {
      "get": {
        "summary": "Get an oracle spec by ID",
        "operationId": "OracleSpec",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OracleSpecResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id to get the oracle spec for",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/oracle-specs/{id}/oracle-data": {
      "get": {
        "summary": "Get all oracle data",
        "operationId": "OracleDataBySpec",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OracleDataBySpecResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id to get the oracle spec for",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/orders/fee/estimate": {
      "post": {
        "summary": "Get an estimate for the fee to be paid for a given order",
        "operationId": "EstimateFee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EstimateFeeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EstimateFeeRequest"
            }
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/orders/margins/estimate": {
      "post": {
        "summary": "Get an estimate for the margin required for a new order",
        "operationId": "EstimateMargin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EstimateMarginResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EstimateMarginRequest"
            }
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/orders/{order_id}/trades": {
      "get": {
        "summary": "Get a list of Trades by Order",
        "operationId": "TradesByOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TradesByOrderResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "description": "Order identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/orders/{order_id}/versions": {
      "get": {
        "summary": "Get all versions of the order by its orderID",
        "operationId": "OrderVersionsByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OrderVersionsByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "description": "Order identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "description": "Skip the number of records specified, default is 0.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "Limit the number of returned records to the value specified, default is 50.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "description": "Descending reverses the order of the records returned,\ndefault is true, if false the results will be returned in ascending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/orders/{reference}": {
      "get": {
        "summary": "Get an Order by Pending Order reference (UUID)",
        "operationId": "OrderByReference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OrderByReferenceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "reference",
            "description": "Unique reference, required field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/parties": {
      "get": {
        "summary": "Get a list of Parties",
        "operationId": "Parties",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PartiesResponse"
            }
          }
        },
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/parties/{party_id}": {
      "get": {
        "summary": "Get a Party by ID",
        "operationId": "PartyByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PartyByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "party_id",
            "description": "Party identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/parties/{party_id}/accounts": {
      "get": {
        "summary": "Get a list of Accounts by Party",
        "operationId": "PartyAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PartyAccountsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "party_id",
            "description": "Party identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "market_id",
            "description": "Market identifier.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "description": "Account type, required field.\n\n - ACCOUNT_TYPE_UNSPECIFIED: Default value\n - ACCOUNT_TYPE_INSURANCE: Insurance pool accounts contain insurance pool funds for a market\n - ACCOUNT_TYPE_SETTLEMENT: Settlement accounts exist only during settlement or mark-to-market\n - ACCOUNT_TYPE_MARGIN: Margin accounts contain margin funds for a party and each party will\nhave multiple margin accounts, one for each market they have traded in\n\nMargin account funds will alter as margin requirements on positions change\n - ACCOUNT_TYPE_GENERAL: General accounts contains general funds for a party. A party will\nhave multiple general accounts, one for each asset they want\nto trade with\n\nGeneral accounts are where funds are initially deposited or withdrawn from,\nit is also the account where funds are taken to fulfil fees and initial margin requirements\n - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: Infrastructure accounts contain fees earned by providing infrastructure on Vega\n - ACCOUNT_TYPE_FEES_LIQUIDITY: Liquidity accounts contain fees earned by providing liquidity on Vega markets\n - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned by placing orders that sit on the book\nand are then matched with an incoming order to create a trade - These fees reward parties\nwho provide the best priced liquidity that actually allows trading to take place\n - ACCOUNT_TYPE_LOCK_WITHDRAW: This account is created to lock funds to be withdrawn by parties\n - ACCOUNT_TYPE_BOND: This account is created to maintain liquidity providers funds commitments\n - ACCOUNT_TYPE_EXTERNAL: External account represents an external source (deposit/withdrawal)\n - ACCOUNT_TYPE_GLOBAL_INSURANCE: Global insurance account for the asset\n - ACCOUNT_TYPE_GLOBAL_REWARD: Global reward account for the asset\n - ACCOUNT_TYPE_PENDING_TRANSFERS: Per asset account used to store pending transfers (if any)\n - ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES: Per asset reward account for fees paid by takers\n - ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES: Per asset reward account for fees received by makers\n - ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES: Per asset reward account for fees received by liquidity providers\n - ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS: Per asset reward account for market proposers when the market goes above some trading threshold",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACCOUNT_TYPE_UNSPECIFIED",
              "ACCOUNT_TYPE_INSURANCE",
              "ACCOUNT_TYPE_SETTLEMENT",
              "ACCOUNT_TYPE_MARGIN",
              "ACCOUNT_TYPE_GENERAL",
              "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
              "ACCOUNT_TYPE_FEES_LIQUIDITY",
              "ACCOUNT_TYPE_FEES_MAKER",
              "ACCOUNT_TYPE_LOCK_WITHDRAW",
              "ACCOUNT_TYPE_BOND",
              "ACCOUNT_TYPE_EXTERNAL",
              "ACCOUNT_TYPE_GLOBAL_INSURANCE",
              "ACCOUNT_TYPE_GLOBAL_REWARD",
              "ACCOUNT_TYPE_PENDING_TRANSFERS",
              "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
              "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
              "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
              "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
            ],
            "default": "ACCOUNT_TYPE_UNSPECIFIED"
          },
          {
            "name": "asset",
            "description": "Asset identifier.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/parties/{party_id}/deposits": {
      "get": {
        "summary": "Get deposits for a party",
        "operationId": "Deposits",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DepositsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "party_id",
            "description": "The party to get the deposits for",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/parties/{party_id}/markets/{market_id}/margin": {
      "get": {
        "summary": "Get Margin Levels by Party ID",
        "operationId": "MarginLevels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MarginLevelsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "party_id",
            "description": "Party identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "market_id",
            "description": "Market identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/parties/{party_id}/orders": {
      "get": {
        "summary": "Get a list of Orders by Party",
        "operationId": "OrdersByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OrdersByPartyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "party_id",
            "description": "Party identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "description": "Skip the number of records specified, default is 0.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "Limit the number of returned records to the value specified, default is 50.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "description": "Descending reverses the order of the records returned,\ndefault is true, if false the results will be returned in ascending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/parties/{party_id}/positions": {
      "get": {
        "summary": "Get a list of Positions by Party",
        "operationId": "PositionsByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PositionsByPartyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "party_id",
            "description": "Party identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "market_id",
            "description": "Market identifier.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/parties/{party_id}/proposals": {
      "get": {
        "summary": "Get governance data (proposals and votes) for proposals by party authoring them",
        "operationId": "GetProposalsByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProposalsByPartyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "party_id",
            "description": "Party identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "select_in_state.value",
            "description": "Proposal state value.\n\n - STATE_UNSPECIFIED: Default value, always invalid\n - STATE_FAILED: Proposal enactment has failed - even though proposal has passed, its execution could not be performed\n - STATE_OPEN: Proposal is open for voting\n - STATE_PASSED: Proposal has gained enough support to be executed\n - STATE_REJECTED: Proposal wasn't accepted (proposal terms failed validation due to wrong configuration or failing to meet network requirements)\n - STATE_DECLINED: Proposal didn't get enough votes (either failing to gain required participation or majority level)\n - STATE_ENACTED: Proposal enacted\n - STATE_WAITING_FOR_NODE_VOTE: Waiting for node validation of the proposal",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "STATE_UNSPECIFIED",
              "STATE_FAILED",
              "STATE_OPEN",
              "STATE_PASSED",
              "STATE_REJECTED",
              "STATE_DECLINED",
              "STATE_ENACTED",
              "STATE_WAITING_FOR_NODE_VOTE"
            ],
            "default": "STATE_UNSPECIFIED"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/parties/{party_id}/rewards": {
      "get": {
        "summary": "Get rewards",
        "operationId": "GetRewards",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRewardsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "party_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "description": "Skip the number of records specified, default is 0.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "Limit the number of returned records to the value specified, default is 50.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "description": "Descending reverses the order of the records returned,\ndefault is true, if false the results will be returned in ascending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/parties/{party_id}/trades": {
      "get": {
        "summary": "Get a list of Trades by Party",
        "operationId": "TradesByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TradesByPartyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "party_id",
            "description": "Party identifier. Required field",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "market_id",
            "description": "Market identifier.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "description": "Skip the number of records specified, default is 0.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "Limit the number of returned records to the value specified, default is 50.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "description": "Descending reverses the order of the records returned,\ndefault is true, if false the results will be returned in ascending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/parties/{party_id}/votes": {
      "get": {
        "summary": "Get votes by party casting them",
        "operationId": "GetVotesByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetVotesByPartyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "party_id",
            "description": "Party identifier, required field",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/parties/{party}/stake": {
      "get": {
        "operationId": "PartyStake",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PartyStakeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "party",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/time": {
      "get": {
        "summary": "Get Time",
        "operationId": "GetVegaTime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetVegaTimeResponse"
            }
          }
        },
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/withdrawals/party/{party_id}": {
      "get": {
        "summary": "Get withdrawals for a party",
        "operationId": "Withdrawals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WithdrawalsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "party_id",
            "description": "The party to get the withdrawals for",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/withdrawals/{id}": {
      "get": {
        "summary": "Get a withdrawal by its identifier",
        "operationId": "Withdrawal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WithdrawalResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the withdrawal",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    },
    "/withdrawals/{withdrawal_id}/approval/erc20": {
      "get": {
        "summary": "Get the bundle approval for an ERC20 withdrawal,\nthese data are being used to bundle the call to the smart contract on the ethereum bridge",
        "operationId": "ERC20WithdrawalApproval",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ERC20WithdrawalApprovalResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "withdrawal_id",
            "description": "The identifier of the withdrawal",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TradingDataService"
        ]
      }
    }
  },
  "definitions": {
    "ConditionOperator": {
      "type": "string",
      "enum": [
        "OPERATOR_UNSPECIFIED",
        "OPERATOR_EQUALS",
        "OPERATOR_GREATER_THAN",
        "OPERATOR_GREATER_THAN_OR_EQUAL",
        "OPERATOR_LESS_THAN",
        "OPERATOR_LESS_THAN_OR_EQUAL"
      ],
      "default": "OPERATOR_UNSPECIFIED",
      "description": "Comparator describes the type of comparison.\n\n - OPERATOR_UNSPECIFIED: The default value\n - OPERATOR_EQUALS: Verify if the property values are strictly equal or not.\n - OPERATOR_GREATER_THAN: Verify if the oracle data value is greater than the Condition value.\n - OPERATOR_GREATER_THAN_OR_EQUAL: Verify if the oracle data value is greater than or equal to the Condition\nvalue.\n - OPERATOR_LESS_THAN: Verify if the oracle data value is less than the Condition value.\n - OPERATOR_LESS_THAN_OR_EQUAL: Verify if the oracle data value is less or equal to than the Condition\nvalue."
    },
    "MarketTradingMode": {
      "type": "string",
      "enum": [
        "TRADING_MODE_UNSPECIFIED",
        "TRADING_MODE_CONTINUOUS",
        "TRADING_MODE_BATCH_AUCTION",
        "TRADING_MODE_OPENING_AUCTION",
        "TRADING_MODE_MONITORING_AUCTION"
      ],
      "default": "TRADING_MODE_UNSPECIFIED",
      "description": "- TRADING_MODE_UNSPECIFIED: Default value, this is invalid\n - TRADING_MODE_CONTINUOUS: Normal trading\n - TRADING_MODE_BATCH_AUCTION: Auction trading (FBA)\n - TRADING_MODE_OPENING_AUCTION: Opening auction\n - TRADING_MODE_MONITORING_AUCTION: Auction triggered by monitoring",
      "title": "The trading mode the market is currently running, also referred to as 'market state'"
    },
    "OrderTimeInForce": {
      "type": "string",
      "enum": [
        "TIME_IN_FORCE_UNSPECIFIED",
        "TIME_IN_FORCE_GTC",
        "TIME_IN_FORCE_GTT",
        "TIME_IN_FORCE_IOC",
        "TIME_IN_FORCE_FOK",
        "TIME_IN_FORCE_GFA",
        "TIME_IN_FORCE_GFN"
      ],
      "default": "TIME_IN_FORCE_UNSPECIFIED",
      "description": "- TIME_IN_FORCE_UNSPECIFIED: Default value for TimeInForce, can be valid for an amend\n - TIME_IN_FORCE_GTC: Good until cancelled\n - TIME_IN_FORCE_GTT: Good until specified time\n - TIME_IN_FORCE_IOC: Immediate or cancel\n - TIME_IN_FORCE_FOK: Fill or kill\n - TIME_IN_FORCE_GFA: Good for auction\n - TIME_IN_FORCE_GFN: Good for normal",
      "title": "Time In Force for an order\nSee [What order types are available to trade on Vega?](https://docs.testnet.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail"
    },
    "UndelegateSubmissionMethod": {
      "type": "string",
      "enum": [
        "METHOD_UNSPECIFIED",
        "METHOD_NOW",
        "METHOD_AT_END_OF_EPOCH",
        "METHOD_IN_ANGER"
      ],
      "default": "METHOD_UNSPECIFIED"
    },
    "VoteValue": {
      "type": "string",
      "enum": [
        "VALUE_UNSPECIFIED",
        "VALUE_NO",
        "VALUE_YES"
      ],
      "default": "VALUE_UNSPECIFIED",
      "description": "- VALUE_UNSPECIFIED: Default value, always invalid\n - VALUE_NO: A vote against the proposal\n - VALUE_YES: A vote in favour of the proposal",
      "title": "Vote value"
    },
    "datanodeapiv1KeyRotation": {
      "type": "object",
      "properties": {
        "node_id": {
          "type": "string"
        },
        "old_pub_key": {
          "type": "string"
        },
        "new_pub_key": {
          "type": "string"
        },
        "block_height": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AccountsSubscribeResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/vegaAccount"
        }
      }
    },
    "v1AssetByIDResponse": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/vegaAsset",
          "title": "An asset record, if found"
        }
      },
      "title": "Response for an asset given an asset identifier"
    },
    "v1AssetsResponse": {
      "type": "object",
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAsset"
          },
          "title": "A list of 0 or more assets"
        }
      },
      "title": "Response for a list of all assets enabled on Vega"
    },
    "v1AuctionEvent": {
      "type": "object",
      "properties": {
        "market_id": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "opening_auction": {
          "type": "boolean",
          "format": "boolean",
          "title": "True if the event indicates an auction opening and False otherwise"
        },
        "leave": {
          "type": "boolean",
          "format": "boolean",
          "title": "True if the event indicates leaving auction mode and False otherwise"
        },
        "start": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp containing the start time for an auction"
        },
        "end": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp containing the end time for an auction"
        },
        "trigger": {
          "$ref": "#/definitions/vegaAuctionTrigger",
          "title": "the reason this market is/was in auction"
        },
        "extension_trigger": {
          "$ref": "#/definitions/vegaAuctionTrigger",
          "title": "If an auction was ongoing, but was extended for whatever reason, this field will\nbe set to the trigger type indicating which component extended the auction"
        }
      },
      "title": "An auction event indicating a change in auction state, for example starting or ending an auction"
    },
    "v1BusEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "A unique event identifier for the message"
        },
        "block": {
          "type": "string",
          "title": "The batch (or block) of transactions that the events relate to"
        },
        "type": {
          "$ref": "#/definitions/v1BusEventType",
          "title": "The type of bus event (one of the list below)"
        },
        "time_update": {
          "$ref": "#/definitions/v1TimeUpdate",
          "title": "Time update events - See [TimeUpdate](#vega.TimeUpdate)"
        },
        "transfer_responses": {
          "$ref": "#/definitions/v1TransferResponses",
          "title": "Transfer responses update events - See [TransferResponses](#vega.TransferResponses)"
        },
        "position_resolution": {
          "$ref": "#/definitions/v1PositionResolution",
          "title": "Position resolution events - See [PositionResolution](#vega.PositionResolution)"
        },
        "order": {
          "$ref": "#/definitions/vegaOrder",
          "title": "Order events"
        },
        "account": {
          "$ref": "#/definitions/vegaAccount",
          "title": "Account events"
        },
        "party": {
          "$ref": "#/definitions/vegaParty",
          "title": "Party events"
        },
        "trade": {
          "$ref": "#/definitions/vegaTrade",
          "title": "Trade events"
        },
        "margin_levels": {
          "$ref": "#/definitions/vegaMarginLevels",
          "title": "Margin level update events"
        },
        "proposal": {
          "$ref": "#/definitions/vegaProposal",
          "title": "Proposal events (for governance)"
        },
        "vote": {
          "$ref": "#/definitions/vegaVote",
          "title": "Vote events (for governance)"
        },
        "market_data": {
          "$ref": "#/definitions/vegaMarketData",
          "title": "Market data events"
        },
        "node_signature": {
          "$ref": "#/definitions/v1NodeSignature",
          "title": "Node signature events"
        },
        "loss_socialization": {
          "$ref": "#/definitions/v1LossSocialization",
          "title": "Loss socialization events - See [LossSocialization](#vega.LossSocialization)"
        },
        "settle_position": {
          "$ref": "#/definitions/v1SettlePosition",
          "title": "Position settlement events - See [SettlePosition](#vega.SettlePosition)"
        },
        "settle_distressed": {
          "$ref": "#/definitions/v1SettleDistressed",
          "title": "Position distressed events - See [SettleDistressed](#vega.SettleDistressed)"
        },
        "market_created": {
          "$ref": "#/definitions/vegaMarket",
          "title": "Market created events"
        },
        "asset": {
          "$ref": "#/definitions/vegaAsset",
          "title": "Asset events"
        },
        "market_tick": {
          "$ref": "#/definitions/v1MarketTick",
          "title": "Market tick events - See [MarketTick](#vega.MarketTick)"
        },
        "withdrawal": {
          "$ref": "#/definitions/vegaWithdrawal",
          "title": "Withdrawal events"
        },
        "deposit": {
          "$ref": "#/definitions/vegaDeposit",
          "title": "Deposit events"
        },
        "auction": {
          "$ref": "#/definitions/v1AuctionEvent",
          "title": "Auction events - See [AuctionEvent](#vega.AuctionEvent)"
        },
        "risk_factor": {
          "$ref": "#/definitions/vegaRiskFactor",
          "title": "Risk factor events"
        },
        "network_parameter": {
          "$ref": "#/definitions/vegaNetworkParameter",
          "title": "Network parameter events"
        },
        "liquidity_provision": {
          "$ref": "#/definitions/vegaLiquidityProvision",
          "title": "LiquidityProvision  events"
        },
        "market_updated": {
          "$ref": "#/definitions/vegaMarket",
          "title": "Market created events"
        },
        "oracle_spec": {
          "$ref": "#/definitions/v1OracleSpec",
          "title": "OracleSpec events"
        },
        "oracle_data": {
          "$ref": "#/definitions/v1OracleData",
          "title": "OracleData events"
        },
        "delegation_balance": {
          "$ref": "#/definitions/v1DelegationBalanceEvent",
          "title": "Delegation balance events"
        },
        "validator_score": {
          "$ref": "#/definitions/v1ValidatorScoreEvent",
          "title": "Validator score calculated"
        },
        "epoch_event": {
          "$ref": "#/definitions/v1EpochEvent",
          "title": "Epoch update events - See [Epoch](#vega.Epoch)"
        },
        "validator_update": {
          "$ref": "#/definitions/v1ValidatorUpdate",
          "title": "Validator update events"
        },
        "stake_linking": {
          "$ref": "#/definitions/v1StakeLinking",
          "title": "Staking event"
        },
        "reward_payout": {
          "$ref": "#/definitions/v1RewardPayoutEvent",
          "title": "Reward payout event"
        },
        "checkpoint": {
          "$ref": "#/definitions/v1CheckpointEvent",
          "title": "Checkpoint was created"
        },
        "key_rotation": {
          "$ref": "#/definitions/vegaeventsv1KeyRotation",
          "title": "Key rotation took place"
        },
        "state_var": {
          "$ref": "#/definitions/v1StateVar",
          "title": "State variable consensus state transition update"
        },
        "network_limits": {
          "$ref": "#/definitions/vegaNetworkLimits",
          "title": "Network limits events"
        },
        "transfer": {
          "$ref": "#/definitions/vegaeventsv1Transfer",
          "title": "Transfer event"
        },
        "market": {
          "$ref": "#/definitions/v1MarketEvent",
          "title": "Market tick events - See [MarketEvent](#vega.MarketEvent)"
        },
        "tx_err_event": {
          "$ref": "#/definitions/v1TxErrorEvent",
          "title": "Transaction error events, not included in the ALL event type"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "title": "Version of bus event"
        },
        "chain_id": {
          "type": "string"
        }
      },
      "title": "A bus event is a container for event bus events emitted by Vega"
    },
    "v1BusEventType": {
      "type": "string",
      "enum": [
        "BUS_EVENT_TYPE_UNSPECIFIED",
        "BUS_EVENT_TYPE_ALL",
        "BUS_EVENT_TYPE_TIME_UPDATE",
        "BUS_EVENT_TYPE_TRANSFER_RESPONSES",
        "BUS_EVENT_TYPE_POSITION_RESOLUTION",
        "BUS_EVENT_TYPE_ORDER",
        "BUS_EVENT_TYPE_ACCOUNT",
        "BUS_EVENT_TYPE_PARTY",
        "BUS_EVENT_TYPE_TRADE",
        "BUS_EVENT_TYPE_MARGIN_LEVELS",
        "BUS_EVENT_TYPE_PROPOSAL",
        "BUS_EVENT_TYPE_VOTE",
        "BUS_EVENT_TYPE_MARKET_DATA",
        "BUS_EVENT_TYPE_NODE_SIGNATURE",
        "BUS_EVENT_TYPE_LOSS_SOCIALIZATION",
        "BUS_EVENT_TYPE_SETTLE_POSITION",
        "BUS_EVENT_TYPE_SETTLE_DISTRESSED",
        "BUS_EVENT_TYPE_MARKET_CREATED",
        "BUS_EVENT_TYPE_ASSET",
        "BUS_EVENT_TYPE_MARKET_TICK",
        "BUS_EVENT_TYPE_WITHDRAWAL",
        "BUS_EVENT_TYPE_DEPOSIT",
        "BUS_EVENT_TYPE_AUCTION",
        "BUS_EVENT_TYPE_RISK_FACTOR",
        "BUS_EVENT_TYPE_NETWORK_PARAMETER",
        "BUS_EVENT_TYPE_LIQUIDITY_PROVISION",
        "BUS_EVENT_TYPE_MARKET_UPDATED",
        "BUS_EVENT_TYPE_ORACLE_SPEC",
        "BUS_EVENT_TYPE_ORACLE_DATA",
        "BUS_EVENT_TYPE_DELEGATION_BALANCE",
        "BUS_EVENT_TYPE_VALIDATOR_SCORE",
        "BUS_EVENT_TYPE_EPOCH_UPDATE",
        "BUS_EVENT_TYPE_VALIDATOR_UPDATE",
        "BUS_EVENT_TYPE_STAKE_LINKING",
        "BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT",
        "BUS_EVENT_TYPE_CHECKPOINT",
        "BUS_EVENT_TYPE_STREAM_START",
        "BUS_EVENT_TYPE_KEY_ROTATION",
        "BUS_EVENT_TYPE_STATE_VAR",
        "BUS_EVENT_TYPE_NETWORK_LIMITS",
        "BUS_EVENT_TYPE_TRANSFER",
        "BUS_EVENT_TYPE_MARKET",
        "BUS_EVENT_TYPE_TX_ERROR"
      ],
      "default": "BUS_EVENT_TYPE_UNSPECIFIED",
      "description": "- BUS_EVENT_TYPE_UNSPECIFIED: Default value, always invalid\n - BUS_EVENT_TYPE_ALL: Events of ALL event types, used when filtering stream from event bus\n - BUS_EVENT_TYPE_TIME_UPDATE: Event for blockchain time updates\n - BUS_EVENT_TYPE_TRANSFER_RESPONSES: Event for when a transfer happens internally, contains the transfer information\n - BUS_EVENT_TYPE_POSITION_RESOLUTION: Event indicating position resolution has occurred\n - BUS_EVENT_TYPE_ORDER: Event for order updates, both new and existing orders\n - BUS_EVENT_TYPE_ACCOUNT: Event for account updates\n - BUS_EVENT_TYPE_PARTY: Event for party updates\n - BUS_EVENT_TYPE_TRADE: Event indicating a new trade has occurred\n - BUS_EVENT_TYPE_MARGIN_LEVELS: Event indicating margin levels have changed for a party\n - BUS_EVENT_TYPE_PROPOSAL: Event for proposal updates (for governance)\n - BUS_EVENT_TYPE_VOTE: Event indicating a new vote has occurred (for governance)\n - BUS_EVENT_TYPE_MARKET_DATA: Event for market data updates\n - BUS_EVENT_TYPE_NODE_SIGNATURE: Event for a new signature for a Vega node\n - BUS_EVENT_TYPE_LOSS_SOCIALIZATION: Event indicating loss socialisation occurred for a party\n - BUS_EVENT_TYPE_SETTLE_POSITION: Event for when a position is being settled\n - BUS_EVENT_TYPE_SETTLE_DISTRESSED: Event for when a position is distressed\n - BUS_EVENT_TYPE_MARKET_CREATED: Event indicating a new market was created\n - BUS_EVENT_TYPE_ASSET: Event for when an asset is added to Vega\n - BUS_EVENT_TYPE_MARKET_TICK: Event indicating a market tick event\n - BUS_EVENT_TYPE_WITHDRAWAL: Event for when a withdrawal occurs\n - BUS_EVENT_TYPE_DEPOSIT: Event for when a deposit occurs\n - BUS_EVENT_TYPE_AUCTION: Event indicating a change in auction state, for example starting or ending an auction\n - BUS_EVENT_TYPE_RISK_FACTOR: Event indicating a risk factor has been updated\n - BUS_EVENT_TYPE_NETWORK_PARAMETER: Event indicating a network parameter has been added or updated\n - BUS_EVENT_TYPE_LIQUIDITY_PROVISION: Event indicating a liquidity provision has been created or updated\n - BUS_EVENT_TYPE_MARKET_UPDATED: Event indicating a new market was created\n - BUS_EVENT_TYPE_ORACLE_SPEC: Event indicating an oracle spec has been created or updated\n - BUS_EVENT_TYPE_ORACLE_DATA: Event indicating that an oracle data has been broadcast\n - BUS_EVENT_TYPE_DELEGATION_BALANCE: Event indicating that an delegation balance of a party to a node for current epoch has changed\n - BUS_EVENT_TYPE_VALIDATOR_SCORE: Event indicating the validator score for the given epoch\n - BUS_EVENT_TYPE_EPOCH_UPDATE: Event indicating the start or end of an epoch\n - BUS_EVENT_TYPE_VALIDATOR_UPDATE: Event indicating that validator node has been updated\n - BUS_EVENT_TYPE_STAKE_LINKING: Event indicating a new staking event have been processed by the network\n - BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT: Event indicating the payout of a reward has been initiated\n - BUS_EVENT_TYPE_CHECKPOINT: Event indicating a new checkpoint was created\n - BUS_EVENT_TYPE_STREAM_START: Event indicating stream is starting\n - BUS_EVENT_TYPE_KEY_ROTATION: Event indicating key rotation took place\n - BUS_EVENT_TYPE_STATE_VAR: Event indicating state transitions in state variable consensus\n - BUS_EVENT_TYPE_NETWORK_LIMITS: Event indicating network limits set or updated\n - BUS_EVENT_TYPE_TRANSFER: Event indicating a update for a transfert\n - BUS_EVENT_TYPE_MARKET: Event indicating a market related event, for example when a market opens\n - BUS_EVENT_TYPE_TX_ERROR: Event used to report failed transactions back to a user, this is excluded from the ALL type",
      "title": "An (event) bus event type is used to specify a type of event\nIt has 2 styles of event:\nSingle values (e.g. BUS_EVENT_TYPE_ORDER) where they represent one data item\nGroup values (e.g. BUS_EVENT_TYPE_AUCTION) where they represent a group of data items"
    },
    "v1CandlesResponse": {
      "type": "object",
      "properties": {
        "candles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaCandle"
          },
          "title": "A list of 0 or more candles"
        }
      },
      "title": "Response for a list of candles for a market at an interval"
    },
    "v1CandlesSubscribeResponse": {
      "type": "object",
      "properties": {
        "candle": {
          "$ref": "#/definitions/vegaCandle"
        }
      }
    },
    "v1Checkpoint": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "block_hash": {
          "type": "string"
        },
        "at_block": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "The actual data regarding a checkpoint"
    },
    "v1CheckpointEvent": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "block_hash": {
          "type": "string"
        },
        "block_height": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1CheckpointsResponse": {
      "type": "object",
      "properties": {
        "checkpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Checkpoint"
          }
        }
      },
      "title": "Response message containing all checkpoints requested"
    },
    "v1Condition": {
      "type": "object",
      "properties": {
        "operator": {
          "$ref": "#/definitions/ConditionOperator",
          "description": "comparator is the type of comparison to make on the value."
        },
        "value": {
          "type": "string",
          "description": "value is used by the comparator."
        }
      },
      "title": "Condition describes the condition that must be validated by the"
    },
    "v1DelegateSubmission": {
      "type": "object",
      "properties": {
        "node_id": {
          "type": "string",
          "title": "The ID for the node to delegate to"
        },
        "amount": {
          "type": "string",
          "title": "The amount of stake to delegate"
        }
      },
      "title": "A command to submit an instruction to delegate some stake to a node"
    },
    "v1DelegationBalanceEvent": {
      "type": "object",
      "properties": {
        "party": {
          "type": "string"
        },
        "node_id": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "epoch_seq": {
          "type": "string"
        }
      },
      "title": "DelegationBalanceEvent - updates on the delegation balance of a party to a node in the current epoch in effect"
    },
    "v1DelegationsResponse": {
      "type": "object",
      "properties": {
        "delegations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaDelegation"
          }
        }
      }
    },
    "v1DepositResponse": {
      "type": "object",
      "properties": {
        "deposit": {
          "$ref": "#/definitions/vegaDeposit",
          "title": "The deposit matching the identifier from the request"
        }
      },
      "title": "A response for a deposit"
    },
    "v1DepositsResponse": {
      "type": "object",
      "properties": {
        "deposits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaDeposit"
          },
          "title": "The list of deposits for the specified party"
        }
      },
      "title": "The response for a list of deposits"
    },
    "v1ERC20WithdrawalApprovalResponse": {
      "type": "object",
      "properties": {
        "asset_source": {
          "type": "string",
          "title": "The address of asset on ethereum"
        },
        "amount": {
          "type": "string",
          "title": "The amount to be withdrawn"
        },
        "expiry": {
          "type": "string",
          "format": "int64",
          "title": "The expiry / until what time the request is valid"
        },
        "nonce": {
          "type": "string",
          "title": "The nonce, which is actually the internal reference for the withdrawal"
        },
        "signatures": {
          "type": "string",
          "title": "The signatures bundle as hex encoded data, forward by 0x\ne.g: 0x + sig1 + sig2 + ... + sixN"
        },
        "target_address": {
          "type": "string",
          "title": "The ethereum address to withdraw the funds to, 0x prefixed"
        }
      },
      "title": "The response with all information required to bundle the call to finalise the withdrawal on the erc20 bridge\nfunction withdraw_asset(address asset_source, uint256 asset_id, uint256 amount, uint256 expiry, uint256 nonce, bytes memory signatures)"
    },
    "v1EpochEvent": {
      "type": "object",
      "properties": {
        "seq": {
          "type": "string",
          "format": "uint64",
          "title": "Sequence number that increases by one each epoch"
        },
        "action": {
          "$ref": "#/definitions/vegaEpochAction",
          "title": "Action tells us what action is taking place"
        },
        "start_time": {
          "type": "string",
          "format": "int64",
          "title": "What time did this epoch start"
        },
        "expire_time": {
          "type": "string",
          "format": "int64",
          "title": "What time should this epoch end"
        },
        "end_time": {
          "type": "string",
          "format": "int64",
          "title": "What time did it actually end"
        }
      },
      "title": "Epoch details"
    },
    "v1EstimateFeeRequest": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/vegaOrder",
          "title": "Order to estimate fees for\nthe following fields in the order are required:\nMarketID (used to specify the fee factors)\nPrice (the price at which the order could trade)\nSize (the size at which the order could eventually trade)"
        }
      },
      "title": "Request to fetch the estimated fee if an order were to trade immediately"
    },
    "v1EstimateFeeResponse": {
      "type": "object",
      "properties": {
        "fee": {
          "$ref": "#/definitions/vegaFee",
          "title": "Summary of the estimated fees for this order if it were to trade now"
        }
      },
      "title": "Response to a EstimateFeeRequest, containing the estimated fees for a given order"
    },
    "v1EstimateMarginRequest": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/vegaOrder",
          "title": "Order to estimate fees for"
        }
      },
      "title": "Request to fetch the estimated MarginLevels if an order were to trade immediately"
    },
    "v1EstimateMarginResponse": {
      "type": "object",
      "properties": {
        "margin_levels": {
          "$ref": "#/definitions/vegaMarginLevels",
          "title": "Summary of the estimated margins for this order if it were to trade now"
        }
      },
      "title": "Response to a EstimateMarginRequest, containing the estimated marginLevels for a given order"
    },
    "v1FeeInfrastructureAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAccount"
          },
          "title": "A list of 0 or more infrastructure fee accounts"
        }
      },
      "title": "Response for a list of infrastructure fee accounts"
    },
    "v1Filter": {
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/v1PropertyKey",
          "description": "key is the oracle data property key targeted by the filter."
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Condition"
          },
          "description": "conditions are the conditions that should be matched by the data to be\nconsidered of interest."
        }
      },
      "description": "Filter describes the conditions under which an oracle data is considered of\ninterest or not."
    },
    "v1GetEpochResponse": {
      "type": "object",
      "properties": {
        "epoch": {
          "$ref": "#/definitions/vegaEpoch"
        }
      }
    },
    "v1GetKeyRotationsByNodeResponse": {
      "type": "object",
      "properties": {
        "rotations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/datanodeapiv1KeyRotation"
          }
        }
      },
      "title": "Response with all key rotations per node"
    },
    "v1GetKeyRotationsResponse": {
      "type": "object",
      "properties": {
        "rotations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/datanodeapiv1KeyRotation"
          }
        }
      },
      "title": "Response with all key rotations"
    },
    "v1GetNetworkParametersProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          },
          "title": "A list of 0 or more governance data"
        }
      },
      "title": "Response for a list of network parameter proposals"
    },
    "v1GetNewAssetProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          },
          "title": "A list of 0 or more governance data"
        }
      },
      "title": "Response for a list of new asset proposals"
    },
    "v1GetNewMarketProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          },
          "title": "A list of 0 or more governance data"
        }
      },
      "title": "Response for a list of new market proposals"
    },
    "v1GetNodeByIDResponse": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/vegaNode"
        }
      },
      "title": "Response with all nodes"
    },
    "v1GetNodeDataResponse": {
      "type": "object",
      "properties": {
        "node_data": {
          "$ref": "#/definitions/vegaNodeData"
        }
      },
      "title": "Response with node data"
    },
    "v1GetNodeSignaturesAggregateResponse": {
      "type": "object",
      "properties": {
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1NodeSignature"
          },
          "title": "A list of 0 or more signatures"
        }
      },
      "title": "Response to specify the identifier of the resource we want to retrieve aggregated signatures for"
    },
    "v1GetNodesResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaNode"
          }
        }
      },
      "title": "Response with all nodes"
    },
    "v1GetProposalByIDResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/vegaGovernanceData",
          "title": "Governance data, if found"
        }
      },
      "title": "Response for a governance proposal given a proposal identifier"
    },
    "v1GetProposalByReferenceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/vegaGovernanceData",
          "title": "Governance data, if found"
        }
      },
      "title": "Response for a governance proposal given a proposal reference"
    },
    "v1GetProposalsByPartyResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          },
          "title": "A list of 0 or more governance data"
        }
      },
      "title": "Response for a list of proposals for a party"
    },
    "v1GetProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          },
          "title": "A list of 0 or more governance data"
        }
      },
      "title": "Response for a list of proposals"
    },
    "v1GetRewardSummariesResponse": {
      "type": "object",
      "properties": {
        "summaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaRewardSummary"
          }
        }
      },
      "title": "The return message with reward details in for a single party"
    },
    "v1GetRewardsResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaReward"
          }
        }
      },
      "title": "The return message with reward details in for a single party"
    },
    "v1GetUpdateMarketProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          },
          "title": "A list of 0 or more governance data"
        }
      },
      "title": "Response for a list of update market proposals"
    },
    "v1GetVegaTimeResponse": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp representation of current VegaTime as represented in\nNanoseconds since the epoch, for example `1580473859111222333` corresponds to `2020-01-31T12:30:59.111222333Z`"
        }
      },
      "title": "Response for the current consensus coordinated time on the Vega network, referred to as \"VegaTime\""
    },
    "v1GetVotesByPartyResponse": {
      "type": "object",
      "properties": {
        "votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaVote"
          },
          "title": "A list of 0 or more votes"
        }
      },
      "title": "Response for a list of votes for a party"
    },
    "v1GlobalRewardPoolAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAccount"
          },
          "title": "A list of 0 or more global reward pool accounts"
        }
      },
      "title": "Response for a list of global reward pool accounts"
    },
    "v1LastTradeResponse": {
      "type": "object",
      "properties": {
        "trade": {
          "$ref": "#/definitions/vegaTrade",
          "title": "A trade, if found"
        }
      },
      "title": "Response for the latest trade that occurred on Vega for a given market"
    },
    "v1LiquidityProvisionAmendment": {
      "type": "object",
      "properties": {
        "market_id": {
          "type": "string"
        },
        "commitment_amount": {
          "type": "string",
          "title": "From here at least one of the following is required to consider the command valid"
        },
        "fee": {
          "type": "string"
        },
        "sells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          }
        },
        "buys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          }
        },
        "reference": {
          "type": "string"
        }
      },
      "title": "Amend a liquidity provision request"
    },
    "v1LiquidityProvisionCancellation": {
      "type": "object",
      "properties": {
        "market_id": {
          "type": "string"
        }
      },
      "title": "Cancel a liquidity provision request"
    },
    "v1LiquidityProvisionSubmission": {
      "type": "object",
      "properties": {
        "market_id": {
          "type": "string",
          "title": "Market identifier for the order, required field"
        },
        "commitment_amount": {
          "type": "string",
          "title": "Specified as a unitless number that represents the amount of settlement asset of the market"
        },
        "fee": {
          "type": "string",
          "title": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers"
        },
        "sells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          },
          "title": "A set of liquidity sell orders to meet the liquidity provision obligation"
        },
        "buys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          },
          "title": "A set of liquidity buy orders to meet the liquidity provision obligation"
        },
        "reference": {
          "type": "string",
          "title": "A reference to be added to every order created out of this liquidityProvisionSubmission"
        }
      },
      "title": "A liquidity provision submitted for a given market"
    },
    "v1LiquidityProvisionsResponse": {
      "type": "object",
      "properties": {
        "liquidity_provisions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityProvision"
          }
        }
      },
      "title": "A response containing all of the Vega liquidity provision orders"
    },
    "v1LossSocialization": {
      "type": "object",
      "properties": {
        "market_id": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "party_id": {
          "type": "string",
          "title": "Party identifier (public key) for the event"
        },
        "amount": {
          "type": "string",
          "title": "Amount distributed"
        }
      },
      "title": "A loss socialization event contains details on the amount of wins unable to be distributed"
    },
    "v1MarginLevelsResponse": {
      "type": "object",
      "properties": {
        "margin_levels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaMarginLevels"
          },
          "title": "A list of 0 or more margin levels"
        }
      },
      "title": "Response for margin levels for a party"
    },
    "v1MarginLevelsSubscribeResponse": {
      "type": "object",
      "properties": {
        "margin_levels": {
          "$ref": "#/definitions/vegaMarginLevels"
        }
      }
    },
    "v1MarketAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAccount"
          },
          "title": "A list of 0 or more accounts"
        }
      },
      "title": "Response for a list of accounts for a market"
    },
    "v1MarketByIDResponse": {
      "type": "object",
      "properties": {
        "market": {
          "$ref": "#/definitions/vegaMarket",
          "title": "A market, if found"
        }
      },
      "title": "Response for a market given a market identifier"
    },
    "v1MarketDataByIDResponse": {
      "type": "object",
      "properties": {
        "market_data": {
          "$ref": "#/definitions/vegaMarketData",
          "title": "Market data, if found"
        }
      },
      "title": "Response for market data for a market"
    },
    "v1MarketDepthResponse": {
      "type": "object",
      "properties": {
        "market_id": {
          "type": "string",
          "title": "Market identifier"
        },
        "buy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          },
          "title": "Zero or more price levels for the buy side of the market depth data"
        },
        "sell": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          },
          "title": "Zero or more price levels for the sell side of the market depth data"
        },
        "last_trade": {
          "$ref": "#/definitions/vegaTrade",
          "title": "Last trade recorded on Vega at the time of retrieving the `MarketDepthResponse`"
        },
        "sequence_number": {
          "type": "string",
          "format": "uint64",
          "title": "Sequence number incremented after each update"
        }
      },
      "title": "Response for the market depth/order book price levels on a market"
    },
    "v1MarketDepthSubscribeResponse": {
      "type": "object",
      "properties": {
        "market_depth": {
          "$ref": "#/definitions/vegaMarketDepth"
        }
      }
    },
    "v1MarketDepthUpdatesSubscribeResponse": {
      "type": "object",
      "properties": {
        "update": {
          "$ref": "#/definitions/vegaMarketDepthUpdate"
        }
      }
    },
    "v1MarketEvent": {
      "type": "object",
      "properties": {
        "market_id": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "payload": {
          "type": "string",
          "title": "Payload is a unique information string"
        }
      },
      "title": "MarketEvent - the common denominator for all market events\ninterface has a method to return a string for logging"
    },
    "v1MarketTick": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "time": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp containing latest update from Vega blockchain aka Vega-time"
        }
      },
      "title": "A market ticket event contains the time value for when a particular market was last processed on Vega"
    },
    "v1MarketsDataResponse": {
      "type": "object",
      "properties": {
        "markets_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaMarketData"
          },
          "title": "A list of 0 or more market data"
        }
      },
      "title": "Response for market data"
    },
    "v1MarketsDataSubscribeResponse": {
      "type": "object",
      "properties": {
        "market_data": {
          "$ref": "#/definitions/vegaMarketData"
        }
      }
    },
    "v1MarketsResponse": {
      "type": "object",
      "properties": {
        "markets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaMarket"
          },
          "title": "A list of 0 or more markets"
        }
      },
      "title": "Response for a list of markets on Vega"
    },
    "v1NetworkParametersResponse": {
      "type": "object",
      "properties": {
        "network_parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaNetworkParameter"
          }
        }
      },
      "title": "A response containing all of the vega network parameters"
    },
    "v1NodeSignature": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The identifier of the resource being signed"
        },
        "sig": {
          "type": "string",
          "format": "byte",
          "title": "The signature"
        },
        "kind": {
          "$ref": "#/definitions/v1NodeSignatureKind",
          "title": "The kind of resource being signed"
        }
      },
      "title": "Represents a signature from a validator, to be used by a foreign chain in order to recognise a decision taken by the Vega network"
    },
    "v1NodeSignatureKind": {
      "type": "string",
      "enum": [
        "NODE_SIGNATURE_KIND_UNSPECIFIED",
        "NODE_SIGNATURE_KIND_ASSET_NEW",
        "NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL"
      ],
      "default": "NODE_SIGNATURE_KIND_UNSPECIFIED",
      "description": "- NODE_SIGNATURE_KIND_UNSPECIFIED: Represents an unspecified or missing value from the input\n - NODE_SIGNATURE_KIND_ASSET_NEW: Represents a signature for a new asset allow-listing\n - NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL: Represents a signature for an asset withdrawal",
      "title": "The kind of the signature created by a node, for example, allow-listing a new asset, withdrawal etc"
    },
    "v1ObserveDelegationsResponse": {
      "type": "object",
      "properties": {
        "delegation": {
          "$ref": "#/definitions/vegaDelegation"
        }
      },
      "title": "All events related to delegation with the given filters"
    },
    "v1ObserveEventBusResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1BusEvent"
          },
          "title": "One or more events"
        }
      },
      "title": "Response to a subscribed stream of events from the Vega event bus"
    },
    "v1ObserveGovernanceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/vegaGovernanceData"
        }
      },
      "title": "All events related to governance"
    },
    "v1ObservePartyProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/vegaGovernanceData"
        }
      }
    },
    "v1ObservePartyVotesResponse": {
      "type": "object",
      "properties": {
        "vote": {
          "$ref": "#/definitions/vegaVote"
        }
      }
    },
    "v1ObserveProposalVotesResponse": {
      "type": "object",
      "properties": {
        "vote": {
          "$ref": "#/definitions/vegaVote"
        }
      }
    },
    "v1ObserveRewardsResponse": {
      "type": "object",
      "properties": {
        "reward": {
          "$ref": "#/definitions/vegaReward"
        }
      }
    },
    "v1OptionalProposalState": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/vegaProposalState",
          "title": "Proposal state value"
        }
      },
      "title": "Optional proposal state"
    },
    "v1OracleData": {
      "type": "object",
      "properties": {
        "pub_keys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "pubKeys is the list of authorized public keys that signed the data for this\noracle. All the public keys in the oracle data should be contained in these\npublic keys."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Property"
          },
          "title": "data holds all the properties of the oracle data"
        },
        "matched_spec_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "matched_specs_ids lists all the oracle specs that matched this oracle data."
        },
        "broadcast_at": {
          "type": "string",
          "format": "int64",
          "description": "broadcast_at is the time at which the data was broadcast for the first\ntime."
        }
      },
      "description": "OracleData describes an oracle data that has been broadcast."
    },
    "v1OracleDataBySpecResponse": {
      "type": "object",
      "properties": {
        "oracle_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OracleData"
          },
          "title": "The list of oracle data broadcast to a given spec"
        }
      },
      "title": "The response for a list of all oracle data broadcast to a given spec"
    },
    "v1OracleSpec": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id is a hash generated from the OracleSpec data."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "Creation Date time"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "Last Updated timestamp"
        },
        "pub_keys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "pubKeys is the list of authorized public keys that signed the data for this\noracle. All the public keys in the oracle data should be contained in these\npublic keys."
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Filter"
          },
          "description": "filters describes which oracle data are considered of interest or not for\nthe product (or the risk model)."
        },
        "status": {
          "$ref": "#/definitions/v1OracleSpecStatus",
          "title": "status describes the status of the oracle spec"
        }
      },
      "description": "An oracle spec describe the oracle data that a product (or a risk model)\nwants to get from the oracle engine.\nThis message contains additional information used by the API."
    },
    "v1OracleSpecConfiguration": {
      "type": "object",
      "properties": {
        "pub_keys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "pubKeys is the list of authorized public keys that signed the data for this\noracle. All the public keys in the oracle data should be contained in these\npublic keys."
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Filter"
          },
          "description": "filters describes which oracle data are considered of interest or not for\nthe product (or the risk model)."
        }
      },
      "description": "An oracle spec describe the oracle data that a product (or a risk model)\nwants to get from the oracle engine."
    },
    "v1OracleSpecResponse": {
      "type": "object",
      "properties": {
        "oracle_spec": {
          "$ref": "#/definitions/v1OracleSpec",
          "title": "The withdrawal matching the identifier from the request"
        }
      },
      "title": "A response for a oracle spec"
    },
    "v1OracleSpecStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_ACTIVE",
        "STATUS_DEACTIVATED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "description": "- STATUS_UNSPECIFIED: The default value.\n - STATUS_ACTIVE: STATUS_ACTIVE describes an active oracle spec.\n - STATUS_DEACTIVATED: STATUS_DEACTIVATED describes an oracle spec that is not listening to data\nanymore.",
      "title": "Status describe the status of the oracle spec"
    },
    "v1OracleSpecsResponse": {
      "type": "object",
      "properties": {
        "oracle_specs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OracleSpec"
          },
          "title": "The list of oracle specs"
        }
      },
      "title": "The response for a list of withdrawals"
    },
    "v1OrderAmendment": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "title": "Order identifier, this is required to find the order and will not be updated, required field"
        },
        "market_id": {
          "type": "string",
          "title": "Market identifier, this is required to find the order and will not be updated"
        },
        "price": {
          "$ref": "#/definitions/vegaPrice",
          "title": "Amend the price for the order, if the Price value is set, otherwise price will remain unchanged - See [`Price`](#vega.Price)"
        },
        "size_delta": {
          "type": "string",
          "format": "int64",
          "title": "Amend the size for the order by the delta specified:\n- To reduce the size from the current value set a negative integer value\n- To increase the size from the current value, set a positive integer value\n- To leave the size unchanged set a value of zero"
        },
        "expires_at": {
          "$ref": "#/definitions/vegaTimestamp",
          "title": "Amend the expiry time for the order, if the Timestamp value is set, otherwise expiry time will remain unchanged\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "time_in_force": {
          "$ref": "#/definitions/OrderTimeInForce",
          "title": "Amend the time in force for the order, set to TIME_IN_FORCE_UNSPECIFIED to remain unchanged\n- See [`TimeInForce`](#api.VegaTimeResponse).`timestamp`"
        },
        "pegged_offset": {
          "type": "string",
          "title": "Amend the pegged order offset for the order"
        },
        "pegged_reference": {
          "$ref": "#/definitions/vegaPeggedReference",
          "title": "Amend the pegged order reference for the order\n- See [`PeggedReference`](#vega.PeggedReference)"
        }
      },
      "title": "An order amendment is a request to amend or update an existing order on Vega"
    },
    "v1OrderByIDResponse": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/vegaOrder"
        }
      }
    },
    "v1OrderByMarketAndIDResponse": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/vegaOrder",
          "title": "An order, if found"
        }
      },
      "title": "Response for an order on a market given an order identifier"
    },
    "v1OrderByReferenceResponse": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/vegaOrder",
          "title": "An order, if found"
        }
      },
      "title": "Response for an order given an order reference"
    },
    "v1OrderCancellation": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "title": "Unique identifier for the order (set by the system after consensus), required field"
        },
        "market_id": {
          "type": "string",
          "title": "Market identifier for the order, required field"
        }
      },
      "title": "An order cancellation is a request to cancel an existing order on Vega"
    },
    "v1OrderSubmission": {
      "type": "object",
      "properties": {
        "market_id": {
          "type": "string",
          "title": "Market identifier for the order, required field"
        },
        "price": {
          "type": "string",
          "title": "Price for the order, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places,\n, required field for limit orders, however it is not required for market orders"
        },
        "size": {
          "type": "string",
          "format": "uint64",
          "title": "Size for the order, for example, in a futures market the size equals the number of contracts, cannot be negative"
        },
        "side": {
          "$ref": "#/definitions/vegaSide",
          "title": "Side for the order, e.g. SIDE_BUY or SIDE_SELL, required field - See [`Side`](#vega.Side)"
        },
        "time_in_force": {
          "$ref": "#/definitions/OrderTimeInForce",
          "title": "Time in force indicates how long an order will remain active before it is executed or expires, required field\n- See [`Order.TimeInForce`](#vega.Order.TimeInForce)"
        },
        "expires_at": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the order will expire, in nanoseconds since the epoch,\nrequired field only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType",
          "title": "Type for the order, required field - See [`Order.Type`](#vega.Order.Type)"
        },
        "reference": {
          "type": "string",
          "title": "Reference given for the order, this is typically used to retrieve an order submitted through consensus, currently\nset internally by the node to return a unique reference identifier for the order submission"
        },
        "pegged_order": {
          "$ref": "#/definitions/vegaPeggedOrder",
          "title": "Used to specify the details for a pegged order\n- See [`PeggedOrder`](#vega.PeggedOrder)"
        }
      },
      "title": "An order submission is a request to submit or create a new order on Vega"
    },
    "v1OrderVersionsByIDResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          },
          "title": "A list of 0 or more orders (list will contain the same order but with different versions, if it has been amended)"
        }
      },
      "title": "Response to a request for a list of all versions of an order"
    },
    "v1OrdersByMarketResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          },
          "title": "A list of 0 or more orders"
        }
      },
      "title": "Response for a list of orders for a market"
    },
    "v1OrdersByPartyResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          },
          "title": "A list of 0 or more orders"
        }
      },
      "title": "Response for a list of orders for a party"
    },
    "v1OrdersSubscribeResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          },
          "title": "A list of 0 or more orders"
        }
      },
      "title": "A stream of orders"
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "skip": {
          "type": "string",
          "format": "uint64",
          "title": "Skip the number of records specified, default is 0"
        },
        "limit": {
          "type": "string",
          "format": "uint64",
          "title": "Limit the number of returned records to the value specified, default is 50"
        },
        "descending": {
          "type": "boolean",
          "format": "boolean",
          "title": "Descending reverses the order of the records returned,\ndefault is true, if false the results will be returned in ascending order"
        }
      },
      "title": "Pagination controls"
    },
    "v1PartiesResponse": {
      "type": "object",
      "properties": {
        "parties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaParty"
          },
          "title": "A list of 0 or more parties"
        }
      },
      "title": "Response to a request for a list of parties"
    },
    "v1PartyAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAccount"
          },
          "title": "A list of 0 or more accounts"
        }
      },
      "title": "Response for a list of accounts for a party"
    },
    "v1PartyByIDResponse": {
      "type": "object",
      "properties": {
        "party": {
          "$ref": "#/definitions/vegaParty",
          "title": "A party, if found"
        }
      },
      "title": "Response for a party given a party identifier"
    },
    "v1PartyStakeResponse": {
      "type": "object",
      "properties": {
        "current_stake_available": {
          "type": "string"
        },
        "stake_linkings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1StakeLinking"
          }
        }
      }
    },
    "v1PositionResolution": {
      "type": "object",
      "properties": {
        "market_id": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "distressed": {
          "type": "string",
          "format": "int64",
          "title": "Number of distressed traders"
        },
        "closed": {
          "type": "string",
          "format": "int64",
          "title": "Number of close outs"
        },
        "mark_price": {
          "type": "string",
          "title": "Mark price as a string representing a scaled price"
        }
      },
      "title": "A position resolution event contains information on distressed trades"
    },
    "v1PositionsByPartyResponse": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPosition"
          },
          "title": "A list of 0 or more positions"
        }
      },
      "title": "Response for a list of positions for a party"
    },
    "v1PositionsSubscribeResponse": {
      "type": "object",
      "properties": {
        "position": {
          "$ref": "#/definitions/vegaPosition"
        }
      }
    },
    "v1Property": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name is the name of the property."
        },
        "value": {
          "type": "string",
          "description": "value is the value of the property."
        }
      },
      "description": "Property describes one property of an oracle spec with a key with its value."
    },
    "v1PropertyKey": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name is the name of the property."
        },
        "type": {
          "$ref": "#/definitions/v1PropertyKeyType",
          "description": "type is the type of the property."
        }
      },
      "description": "PropertyKey describes the property key contained in an oracle data."
    },
    "v1PropertyKeyType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_EMPTY",
        "TYPE_INTEGER",
        "TYPE_STRING",
        "TYPE_BOOLEAN",
        "TYPE_DECIMAL",
        "TYPE_TIMESTAMP"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "Type describes the type of properties that are supported by the oracle\nengine.\n\n - TYPE_UNSPECIFIED: The default value.\n - TYPE_EMPTY: Any type.\n - TYPE_INTEGER: Integer type.\n - TYPE_STRING: String type.\n - TYPE_BOOLEAN: Boolean type.\n - TYPE_DECIMAL: Any floating point decimal type.\n - TYPE_TIMESTAMP: Timestamp date type."
    },
    "v1ProposalSubmission": {
      "type": "object",
      "properties": {
        "reference": {
          "type": "string",
          "title": "Proposal reference"
        },
        "terms": {
          "$ref": "#/definitions/vegaProposalTerms",
          "title": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted"
        }
      },
      "title": "A command to submit a new proposal for the\nvega network governance"
    },
    "v1RestoreSnapshot": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "A command that loads the state from a given checkpoint"
    },
    "v1RewardPayoutEvent": {
      "type": "object",
      "properties": {
        "party": {
          "type": "string"
        },
        "epoch_seq": {
          "type": "string"
        },
        "asset": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "percent_of_total_reward": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1SettleDistressed": {
      "type": "object",
      "properties": {
        "market_id": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "party_id": {
          "type": "string",
          "title": "Party identifier (public key) for the event"
        },
        "margin": {
          "type": "string",
          "title": "Margin value as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        },
        "price": {
          "type": "string",
          "title": "Price as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        }
      },
      "title": "A settle distressed event contains information on distressed trading parties who are closed out"
    },
    "v1SettlePosition": {
      "type": "object",
      "properties": {
        "market_id": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "party_id": {
          "type": "string",
          "title": "Party identifier (public key) for the event"
        },
        "price": {
          "type": "string",
          "title": "Price of settlement as a string"
        },
        "trade_settlements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TradeSettlement"
          },
          "title": "A collection of 1 or more trade settlements"
        }
      },
      "title": "A settle position event contains position settlement information for a party"
    },
    "v1StakeLinking": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The internal ID for this staking event"
        },
        "type": {
          "$ref": "#/definitions/v1StakeLinkingType",
          "title": "The type of event"
        },
        "ts": {
          "type": "string",
          "format": "int64",
          "title": "The timestamps at which the event was emitted by ethereum"
        },
        "party": {
          "type": "string",
          "description": "The party to whom the event is directed at."
        },
        "amount": {
          "type": "string",
          "title": "The amount of stake deposited or removed"
        },
        "status": {
          "$ref": "#/definitions/v1StakeLinkingStatus",
          "title": "The status of the event"
        },
        "finalized_at": {
          "type": "string",
          "format": "int64",
          "title": "The time at which the vega network finalized the state of the event"
        },
        "tx_hash": {
          "type": "string",
          "title": "The hash of the transaction from which the events happen"
        }
      },
      "title": "StakeLinking - an event notifying of stake being deposited or removed for a given party\nThese events are emitted for every Staking deposit or removed accepted by the network"
    },
    "v1StakeLinkingStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_PENDING",
        "STATUS_ACCEPTED",
        "STATUS_REJECTED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "title": "- STATUS_UNSPECIFIED: Default value\n - STATUS_PENDING: Indicate an event waiting for confirmation from the vega network\n - STATUS_ACCEPTED: Indicate of an event accepted by the vega network\n - STATUS_REJECTED: Indaicate of an event rejected by the vega network"
    },
    "v1StakeLinkingType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_LINK",
        "TYPE_UNLINK"
      ],
      "default": "TYPE_UNSPECIFIED",
      "title": "- TYPE_UNSPECIFIED: Default value\n - TYPE_LINK: Indicate of a stake deposit instruction\n - TYPE_UNLINK: Indicate of a stake remove instruction"
    },
    "v1StateVar": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "event_id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "title": "StateVarEvent - updates on state changes in state variable consensus"
    },
    "v1TimeUpdate": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp containing latest update from Vega blockchain aka Vega-time"
        }
      },
      "title": "A time update event contains the latest time update from Vega blockchain"
    },
    "v1TradeSettlement": {
      "type": "object",
      "properties": {
        "size": {
          "type": "string",
          "format": "int64",
          "title": "Size of trade settlement"
        },
        "price": {
          "type": "string",
          "title": "Price of settlement as string"
        }
      },
      "title": "A trade settlement is part of the settle position event"
    },
    "v1TradesByMarketResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          },
          "title": "A list of 0 or more trades"
        }
      },
      "title": "Response for a list of trades on a market"
    },
    "v1TradesByOrderResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          },
          "title": "A list of 0 or more trades"
        }
      },
      "title": "Response for a list of trades related to an order"
    },
    "v1TradesByPartyResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          },
          "title": "A list of 0 or more trades"
        }
      },
      "title": "Response for a list of trades relating to a party"
    },
    "v1TradesSubscribeResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          },
          "title": "A list of 0 or more trades"
        }
      },
      "title": "A stream of trades"
    },
    "v1TransferResponses": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTransferResponse"
          },
          "title": "One or more entries containing internal transfer information"
        }
      },
      "title": "A transfer responses event contains a collection of transfer information"
    },
    "v1TransferResponsesSubscribeResponse": {
      "type": "object",
      "properties": {
        "response": {
          "$ref": "#/definitions/vegaTransferResponse"
        }
      }
    },
    "v1TransferStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_PENDING",
        "STATUS_DONE",
        "STATUS_REJECTED",
        "STATUS_STOPPED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "title": "- STATUS_UNSPECIFIED: Default value\n - STATUS_PENDING: Indicate a transfer still being processed\n - STATUS_DONE: Indicate of an transfer accepted by the vega network\n - STATUS_REJECTED: Indicate of an transfer rejected by the vega network\n - STATUS_STOPPED: Indicate of a transfer stopped by the vega network\ne.g: no funds left to cover the transfer"
    },
    "v1TxErrorEvent": {
      "type": "object",
      "properties": {
        "party_id": {
          "type": "string",
          "title": "Unique party identifier for the related party"
        },
        "err_msg": {
          "type": "string",
          "title": "An error message describing what went wrong"
        },
        "order_submission": {
          "$ref": "#/definitions/v1OrderSubmission"
        },
        "order_amendment": {
          "$ref": "#/definitions/v1OrderAmendment"
        },
        "order_cancellation": {
          "$ref": "#/definitions/v1OrderCancellation"
        },
        "proposal": {
          "$ref": "#/definitions/v1ProposalSubmission"
        },
        "vote_submission": {
          "$ref": "#/definitions/v1VoteSubmission"
        },
        "liquidity_provision_submission": {
          "$ref": "#/definitions/v1LiquidityProvisionSubmission"
        },
        "withdraw_submission": {
          "$ref": "#/definitions/v1WithdrawSubmission"
        },
        "delegate_submission": {
          "$ref": "#/definitions/v1DelegateSubmission"
        },
        "undelegate_submission": {
          "$ref": "#/definitions/v1UndelegateSubmission"
        },
        "restore_snapshot": {
          "$ref": "#/definitions/v1RestoreSnapshot"
        },
        "liquidity_provision_cancellation": {
          "$ref": "#/definitions/v1LiquidityProvisionCancellation"
        },
        "liquidity_provision_amendment": {
          "$ref": "#/definitions/v1LiquidityProvisionAmendment"
        },
        "transfer": {
          "$ref": "#/definitions/vegacommandsv1Transfer"
        }
      }
    },
    "v1UndelegateSubmission": {
      "type": "object",
      "properties": {
        "node_id": {
          "type": "string"
        },
        "amount": {
          "type": "string",
          "title": "optional, if not specified = ALL"
        },
        "method": {
          "$ref": "#/definitions/UndelegateSubmissionMethod"
        }
      }
    },
    "v1ValidatorScoreEvent": {
      "type": "object",
      "properties": {
        "node_id": {
          "type": "string"
        },
        "epoch_seq": {
          "type": "string"
        },
        "validator_score": {
          "type": "string"
        },
        "normalised_score": {
          "type": "string"
        },
        "validator_performance": {
          "type": "string"
        },
        "raw_validator_score": {
          "type": "string"
        }
      },
      "title": "ValidatorScoreEvent is the score a validator gets for a given epoch"
    },
    "v1ValidatorUpdate": {
      "type": "object",
      "properties": {
        "node_id": {
          "type": "string",
          "title": "Node id of the node"
        },
        "vega_pub_key": {
          "type": "string",
          "title": "Vega public key of validator node"
        },
        "ethereum_address": {
          "type": "string",
          "title": "Ethereum public key of validator node"
        },
        "tm_pub_key": {
          "type": "string",
          "title": "Public key of Tendermint"
        },
        "info_url": {
          "type": "string",
          "title": "URL with more info on the node"
        },
        "country": {
          "type": "string",
          "title": "Country code (ISO 3166-1 alpha-2) for the location of the node"
        },
        "name": {
          "type": "string",
          "title": "Name of the validator"
        },
        "avatar_url": {
          "type": "string",
          "title": "AvatarURL of the validator"
        },
        "vega_pub_key_index": {
          "type": "integer",
          "format": "int64",
          "title": "Vega public key derivation index"
        }
      },
      "title": "A validator update event contains information about validator node"
    },
    "v1VoteSubmission": {
      "type": "object",
      "properties": {
        "proposal_id": {
          "type": "string",
          "description": "The ID of the proposal to vote for."
        },
        "value": {
          "$ref": "#/definitions/VoteValue",
          "title": "The actual value of the vote"
        }
      },
      "description": "A command to submit a new vote for a governance\nproposal."
    },
    "v1WithdrawSubmission": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "title": "The amount to be withdrawn"
        },
        "asset": {
          "type": "string",
          "title": "The asset we want to withdraw"
        },
        "ext": {
          "$ref": "#/definitions/vegaWithdrawExt",
          "title": "Foreign chain specifics"
        }
      },
      "title": "Represents the submission request to withdraw funds for a party on Vega"
    },
    "v1WithdrawalResponse": {
      "type": "object",
      "properties": {
        "withdrawal": {
          "$ref": "#/definitions/vegaWithdrawal",
          "title": "The withdrawal matching the identifier from the request"
        }
      },
      "title": "A response for a withdrawal"
    },
    "v1WithdrawalsResponse": {
      "type": "object",
      "properties": {
        "withdrawals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaWithdrawal"
          },
          "title": "The list of withdrawals for the specified party"
        }
      },
      "title": "The response for a list of withdrawals"
    },
    "vegaAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique account identifier (used internally by Vega)"
        },
        "owner": {
          "type": "string",
          "title": "The party that the account belongs to, special values include `network`, which represents the Vega network and is\nmost commonly seen during liquidation of distressed trading positions"
        },
        "balance": {
          "type": "string",
          "title": "Balance of the asset, the balance is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places\nand importantly balances cannot be negative"
        },
        "asset": {
          "type": "string",
          "title": "Asset identifier for the account"
        },
        "market_id": {
          "type": "string",
          "title": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty"
        },
        "type": {
          "$ref": "#/definitions/vegaAccountType",
          "title": "The account type related to this account"
        }
      },
      "title": "Represents an account for an asset on Vega for a particular owner or party"
    },
    "vegaAccountType": {
      "type": "string",
      "enum": [
        "ACCOUNT_TYPE_UNSPECIFIED",
        "ACCOUNT_TYPE_INSURANCE",
        "ACCOUNT_TYPE_SETTLEMENT",
        "ACCOUNT_TYPE_MARGIN",
        "ACCOUNT_TYPE_GENERAL",
        "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
        "ACCOUNT_TYPE_FEES_LIQUIDITY",
        "ACCOUNT_TYPE_FEES_MAKER",
        "ACCOUNT_TYPE_LOCK_WITHDRAW",
        "ACCOUNT_TYPE_BOND",
        "ACCOUNT_TYPE_EXTERNAL",
        "ACCOUNT_TYPE_GLOBAL_INSURANCE",
        "ACCOUNT_TYPE_GLOBAL_REWARD",
        "ACCOUNT_TYPE_PENDING_TRANSFERS",
        "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
        "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
        "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
        "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
      ],
      "default": "ACCOUNT_TYPE_UNSPECIFIED",
      "description": "- ACCOUNT_TYPE_UNSPECIFIED: Default value\n - ACCOUNT_TYPE_INSURANCE: Insurance pool accounts contain insurance pool funds for a market\n - ACCOUNT_TYPE_SETTLEMENT: Settlement accounts exist only during settlement or mark-to-market\n - ACCOUNT_TYPE_MARGIN: Margin accounts contain margin funds for a party and each party will\nhave multiple margin accounts, one for each market they have traded in\n\nMargin account funds will alter as margin requirements on positions change\n - ACCOUNT_TYPE_GENERAL: General accounts contains general funds for a party. A party will\nhave multiple general accounts, one for each asset they want\nto trade with\n\nGeneral accounts are where funds are initially deposited or withdrawn from,\nit is also the account where funds are taken to fulfil fees and initial margin requirements\n - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: Infrastructure accounts contain fees earned by providing infrastructure on Vega\n - ACCOUNT_TYPE_FEES_LIQUIDITY: Liquidity accounts contain fees earned by providing liquidity on Vega markets\n - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned by placing orders that sit on the book\nand are then matched with an incoming order to create a trade - These fees reward parties\nwho provide the best priced liquidity that actually allows trading to take place\n - ACCOUNT_TYPE_LOCK_WITHDRAW: This account is created to lock funds to be withdrawn by parties\n - ACCOUNT_TYPE_BOND: This account is created to maintain liquidity providers funds commitments\n - ACCOUNT_TYPE_EXTERNAL: External account represents an external source (deposit/withdrawal)\n - ACCOUNT_TYPE_GLOBAL_INSURANCE: Global insurance account for the asset\n - ACCOUNT_TYPE_GLOBAL_REWARD: Global reward account for the asset\n - ACCOUNT_TYPE_PENDING_TRANSFERS: Per asset account used to store pending transfers (if any)\n - ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES: Per asset reward account for fees paid by takers\n - ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES: Per asset reward account for fees received by makers\n - ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES: Per asset reward account for fees received by liquidity providers\n - ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS: Per asset reward account for market proposers when the market goes above some trading threshold",
      "title": "Various collateral/account types as used by Vega"
    },
    "vegaAsset": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Internal identifier of the asset"
        },
        "details": {
          "$ref": "#/definitions/vegaAssetDetails",
          "title": "The definition of the external source for this asset"
        }
      },
      "title": "The Vega representation of an external asset"
    },
    "vegaAssetDetails": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the asset (e.g: Great British Pound)"
        },
        "symbol": {
          "type": "string",
          "title": "Symbol of the asset (e.g: GBP)"
        },
        "total_supply": {
          "type": "string",
          "title": "Total circulating supply for the asset"
        },
        "decimals": {
          "type": "string",
          "format": "uint64",
          "title": "Number of decimal / precision handled by this asset"
        },
        "min_lp_stake": {
          "type": "string",
          "title": "Min stake required for this asset from liquidity providers"
        },
        "builtin_asset": {
          "$ref": "#/definitions/vegaBuiltinAsset",
          "title": "A built-in asset"
        },
        "erc20": {
          "$ref": "#/definitions/vegaERC20",
          "title": "An Ethereum ERC20 asset"
        }
      },
      "title": "The Vega representation of an external asset"
    },
    "vegaAuctionDuration": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "string",
          "format": "int64",
          "title": "Duration of the auction in seconds"
        },
        "volume": {
          "type": "string",
          "format": "uint64",
          "title": "Target uncrossing trading volume"
        }
      },
      "title": "An auction duration is used to configure 3 auction periods:\n1. `duration \u003e 0`, `volume == 0`:\n  The auction will last for at least N seconds\n2. `duration == 0`, `volume \u003e 0`:\n  The auction will end once we can close with given traded volume\n3. `duration \u003e 0`, `volume \u003e 0`:\n  The auction will take at least N seconds, but can end sooner if we can trade a certain volume"
    },
    "vegaAuctionTrigger": {
      "type": "string",
      "enum": [
        "AUCTION_TRIGGER_UNSPECIFIED",
        "AUCTION_TRIGGER_BATCH",
        "AUCTION_TRIGGER_OPENING",
        "AUCTION_TRIGGER_PRICE",
        "AUCTION_TRIGGER_LIQUIDITY"
      ],
      "default": "AUCTION_TRIGGER_UNSPECIFIED",
      "description": "- AUCTION_TRIGGER_UNSPECIFIED: Default value for AuctionTrigger, no auction triggered\n - AUCTION_TRIGGER_BATCH: Batch auction\n - AUCTION_TRIGGER_OPENING: Opening auction\n - AUCTION_TRIGGER_PRICE: Price monitoring trigger\n - AUCTION_TRIGGER_LIQUIDITY: Liquidity monitoring trigger",
      "title": "Auction triggers indicate what condition triggered an auction (if market is in auction mode)"
    },
    "vegaBuiltinAsset": {
      "type": "object",
      "properties": {
        "max_faucet_amount_mint": {
          "type": "string",
          "title": "Maximum amount that can be requested by a party through the built-in asset faucet at a time"
        }
      },
      "title": "A Vega internal asset"
    },
    "vegaCandle": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for the point in time when the candle was initially created/opened, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "datetime": {
          "type": "string",
          "title": "An ISO-8601 datetime with nanosecond precision for when the candle was last updated"
        },
        "high": {
          "type": "string",
          "title": "Highest price for trading during the candle interval"
        },
        "low": {
          "type": "string",
          "title": "Lowest price for trading during the candle interval"
        },
        "open": {
          "type": "string",
          "title": "Open trade price"
        },
        "close": {
          "type": "string",
          "title": "Closing trade price"
        },
        "volume": {
          "type": "string",
          "format": "uint64",
          "title": "Total trading volume during the candle interval"
        },
        "interval": {
          "$ref": "#/definitions/vegaInterval",
          "title": "Time interval for the candle - See [`Interval`](#vega.Interval)"
        }
      },
      "title": "Represents the high, low, open, and closing prices for an interval of trading,\nreferred to commonly as a candlestick or candle"
    },
    "vegaContinuousTrading": {
      "type": "object",
      "properties": {
        "tick_size": {
          "type": "string",
          "title": "Tick size"
        }
      },
      "title": "Continuous trading"
    },
    "vegaDelegation": {
      "type": "object",
      "properties": {
        "party": {
          "type": "string",
          "title": "Party which is delegating"
        },
        "node_id": {
          "type": "string",
          "title": "Node ID"
        },
        "amount": {
          "type": "string",
          "title": "Amount delegated"
        },
        "epoch_seq": {
          "type": "string",
          "title": "Epoch of delegation"
        }
      }
    },
    "vegaDeposit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier for the deposit"
        },
        "status": {
          "$ref": "#/definitions/vegaDepositStatus",
          "title": "Status of the deposit"
        },
        "party_id": {
          "type": "string",
          "title": "Party identifier of the user initiating the deposit"
        },
        "asset": {
          "type": "string",
          "title": "The Vega asset targeted by this deposit"
        },
        "amount": {
          "type": "string",
          "title": "The amount to be deposited"
        },
        "tx_hash": {
          "type": "string",
          "title": "The hash of the transaction from the foreign chain"
        },
        "credited_timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the Vega account was updated with the deposit"
        },
        "created_timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the deposit was created on the Vega network"
        }
      },
      "title": "A deposit on to the Vega network"
    },
    "vegaDepositStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_OPEN",
        "STATUS_CANCELLED",
        "STATUS_FINALIZED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "description": "- STATUS_UNSPECIFIED: Default value, always invalid\n - STATUS_OPEN: The deposit is being processed by the network\n - STATUS_CANCELLED: The deposit has been cancelled by the network\n - STATUS_FINALIZED: The deposit has been finalised and accounts have been updated",
      "title": "The status of the deposit"
    },
    "vegaDiscreteTrading": {
      "type": "object",
      "properties": {
        "duration_ns": {
          "type": "string",
          "format": "int64",
          "title": "Duration in nanoseconds, maximum 1 month (2592000000000000 ns)"
        },
        "tick_size": {
          "type": "string",
          "title": "Tick size"
        }
      },
      "title": "Discrete trading"
    },
    "vegaERC20": {
      "type": "object",
      "properties": {
        "contract_address": {
          "type": "string",
          "title": "The address of the contract for the token, on the ethereum network"
        }
      },
      "title": "An ERC20 token based asset, living on the ethereum network"
    },
    "vegaEpoch": {
      "type": "object",
      "properties": {
        "seq": {
          "type": "string",
          "format": "uint64",
          "title": "Sequence is used as epoch identifier"
        },
        "timestamps": {
          "$ref": "#/definitions/vegaEpochTimestamps",
          "title": "Timestamps for start/end etc"
        },
        "validators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaNode"
          },
          "title": "Validators that participated in this epoch"
        },
        "delegations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaDelegation"
          },
          "title": "List of all delegations in epoch"
        }
      }
    },
    "vegaEpochAction": {
      "type": "string",
      "enum": [
        "EPOCH_ACTION_UNSPECIFIED",
        "EPOCH_ACTION_START",
        "EPOCH_ACTION_END"
      ],
      "default": "EPOCH_ACTION_UNSPECIFIED",
      "description": "- EPOCH_ACTION_START: The epoch update is for a new epoch\n - EPOCH_ACTION_END: The epoch update is for the end of an epoch",
      "title": "What epoch action has occurred"
    },
    "vegaEpochData": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of epochs since node was created"
        },
        "offline": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of offline epochs since node was created"
        },
        "online": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of online epochs since node was created"
        }
      }
    },
    "vegaEpochTimestamps": {
      "type": "object",
      "properties": {
        "start_time": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp of epoch start in nanoseconds\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "expiry_time": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp of epoch expiry in nanoseconds\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "end_time": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp of epoch end in nanoseconds, empty if not started\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "first_block": {
          "type": "string",
          "format": "uint64",
          "title": "Height of first block in the epoch"
        },
        "last_block": {
          "type": "string",
          "format": "uint64",
          "title": "Height of last block in the epoch, empty if not ended"
        }
      },
      "title": "Describes in both human readable and block time when an epoch spans"
    },
    "vegaErc20WithdrawExt": {
      "type": "object",
      "properties": {
        "receiver_address": {
          "type": "string",
          "title": "The address into which the bridge will release the funds"
        }
      },
      "title": "An extension of data required for the withdraw submissions"
    },
    "vegaFee": {
      "type": "object",
      "properties": {
        "maker_fee": {
          "type": "string",
          "title": "Fee amount paid to the non-aggressive party of the trade"
        },
        "infrastructure_fee": {
          "type": "string",
          "title": "Fee amount paid for maintaining the Vega infrastructure"
        },
        "liquidity_fee": {
          "type": "string",
          "title": "Fee amount paid to market makers"
        }
      },
      "title": "Represents any fees paid by a party, resulting from a trade"
    },
    "vegaFeeFactors": {
      "type": "object",
      "properties": {
        "maker_fee": {
          "type": "string",
          "title": "Maker fee"
        },
        "infrastructure_fee": {
          "type": "string",
          "title": "Infrastructure fee"
        },
        "liquidity_fee": {
          "type": "string",
          "title": "Liquidity fee"
        }
      },
      "title": "Fee factors definition"
    },
    "vegaFees": {
      "type": "object",
      "properties": {
        "factors": {
          "$ref": "#/definitions/vegaFeeFactors",
          "title": "Fee factors"
        }
      },
      "title": "Fees definition"
    },
    "vegaFuture": {
      "type": "object",
      "properties": {
        "maturity": {
          "type": "string",
          "title": "The maturity for the future"
        },
        "settlement_asset": {
          "type": "string",
          "title": "The asset for the future"
        },
        "quote_name": {
          "type": "string",
          "title": "Quote name of the instrument"
        },
        "oracle_spec_for_settlement_price": {
          "$ref": "#/definitions/v1OracleSpec",
          "title": "The oracle spec describing the settlement price oracle filter"
        },
        "oracle_spec_for_trading_termination": {
          "$ref": "#/definitions/v1OracleSpec",
          "title": "the oracle spec describing the trading termination oracle filter"
        },
        "oracle_spec_binding": {
          "$ref": "#/definitions/vegaOracleSpecToFutureBinding",
          "title": "The binding between the oracle spec and the oracle data"
        }
      },
      "title": "Future product definition"
    },
    "vegaFutureProduct": {
      "type": "object",
      "properties": {
        "maturity": {
          "type": "string",
          "title": "Future product maturity (ISO8601/RFC3339 timestamp)"
        },
        "settlement_asset": {
          "type": "string",
          "title": "Product settlement asset identifier"
        },
        "quote_name": {
          "type": "string",
          "title": "Product quote name"
        },
        "oracle_spec_for_settlement_price": {
          "$ref": "#/definitions/v1OracleSpecConfiguration",
          "title": "The oracle spec describing the oracle data of settlement price"
        },
        "oracle_spec_for_trading_termination": {
          "$ref": "#/definitions/v1OracleSpecConfiguration",
          "title": "The oracle spec describing the oracle data of trading termination"
        },
        "oracle_spec_binding": {
          "$ref": "#/definitions/vegaOracleSpecToFutureBinding",
          "title": "The binding between the oracle spec and the settlement price"
        }
      },
      "title": "Future product configuration"
    },
    "vegaGovernanceData": {
      "type": "object",
      "properties": {
        "proposal": {
          "$ref": "#/definitions/vegaProposal",
          "title": "The governance proposal"
        },
        "yes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaVote"
          },
          "title": "All \"yes\" votes in favour of the proposal above"
        },
        "no": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaVote"
          },
          "title": "All \"no\" votes against the proposal above"
        },
        "yes_party": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/vegaVote"
          },
          "title": "All latest YES votes by party (guaranteed to be unique),\nwhere key (string) is the party ID (public key) and\nvalue (Vote) is the vote cast by the given party"
        },
        "no_party": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/vegaVote"
          },
          "title": "All latest NO votes by party (guaranteed to be unique),\nwhere key (string) is the party ID (public key) and\nvalue (Vote) is the vote cast by the given party"
        }
      },
      "title": "Governance data"
    },
    "vegaInstrument": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Instrument identifier"
        },
        "code": {
          "type": "string",
          "title": "Code for the instrument"
        },
        "name": {
          "type": "string",
          "title": "Name of the instrument"
        },
        "metadata": {
          "$ref": "#/definitions/vegaInstrumentMetadata",
          "title": "A collection of instrument meta-data"
        },
        "future": {
          "$ref": "#/definitions/vegaFuture",
          "title": "Future"
        }
      },
      "title": "Instrument definition"
    },
    "vegaInstrumentConfiguration": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Instrument name"
        },
        "code": {
          "type": "string",
          "title": "Instrument code"
        },
        "future": {
          "$ref": "#/definitions/vegaFutureProduct",
          "title": "Future"
        }
      },
      "title": "Instrument configuration"
    },
    "vegaInstrumentMetadata": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of 0 or more tags"
        }
      },
      "title": "Instrument metadata definition"
    },
    "vegaInterval": {
      "type": "string",
      "enum": [
        "INTERVAL_UNSPECIFIED",
        "INTERVAL_I1M",
        "INTERVAL_I5M",
        "INTERVAL_I15M",
        "INTERVAL_I1H",
        "INTERVAL_I6H",
        "INTERVAL_I1D"
      ],
      "default": "INTERVAL_UNSPECIFIED",
      "description": "- INTERVAL_UNSPECIFIED: Default value, always invalid\n - INTERVAL_I1M: 1 minute.\n - INTERVAL_I5M: 5 minutes.\n - INTERVAL_I15M: 15 minutes.\n - INTERVAL_I1H: 1 hour.\n - INTERVAL_I6H: 6 hours.\n - INTERVAL_I1D: 1 day.",
      "title": "Represents a set of time intervals that are used when querying for candle-stick data"
    },
    "vegaLedgerEntry": {
      "type": "object",
      "properties": {
        "from_account": {
          "type": "string",
          "title": "One or more accounts to transfer from"
        },
        "to_account": {
          "type": "string",
          "title": "One or more accounts to transfer to"
        },
        "amount": {
          "type": "string",
          "title": "An amount to transfer"
        },
        "reference": {
          "type": "string",
          "title": "A reference for auditing purposes"
        },
        "type": {
          "type": "string",
          "title": "Type of ledger entry"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        }
      },
      "title": "Represents a ledger entry on Vega"
    },
    "vegaLiquidityMonitoringParameters": {
      "type": "object",
      "properties": {
        "target_stake_parameters": {
          "$ref": "#/definitions/vegaTargetStakeParameters",
          "title": "Specifies parameters related to target stake calculation"
        },
        "triggering_ratio": {
          "type": "number",
          "format": "double",
          "title": "Specifies the triggering ratio for entering liquidity auction"
        },
        "auction_extension": {
          "type": "string",
          "format": "int64",
          "title": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction"
        }
      },
      "title": "LiquidityMonitoringParameters contains settings used for liquidity monitoring"
    },
    "vegaLiquidityOrder": {
      "type": "object",
      "properties": {
        "reference": {
          "$ref": "#/definitions/vegaPeggedReference",
          "title": "The pegged reference point for the order"
        },
        "proportion": {
          "type": "integer",
          "format": "int64",
          "title": "The relative proportion of the commitment to be allocated at a price level"
        },
        "offset": {
          "type": "string",
          "title": "The offset/amount of units away for the order"
        }
      },
      "title": "Represents a liquidity order"
    },
    "vegaLiquidityOrderReference": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "title": "Unique identifier of the pegged order generated by the core to fulfil this liquidity order"
        },
        "liquidity_order": {
          "$ref": "#/definitions/vegaLiquidityOrder",
          "title": "The liquidity order from the original submission"
        }
      },
      "title": "A pair of a liquidity order and the id of the generated order by the core"
    },
    "vegaLiquidityProviderFeeShare": {
      "type": "object",
      "properties": {
        "party": {
          "type": "string",
          "title": "The liquidity provider party id"
        },
        "equity_like_share": {
          "type": "string",
          "title": "The share own by this liquidity provider (float)"
        },
        "average_entry_valuation": {
          "type": "string",
          "title": "The average entry valuation of the liquidity provider for the market"
        }
      },
      "title": "The equity like share of liquidity fee for each liquidity provider"
    },
    "vegaLiquidityProvision": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier"
        },
        "party_id": {
          "type": "string",
          "title": "Unique party identifier for the creator of the provision"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the order was created at, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the order was updated at, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "market_id": {
          "type": "string",
          "title": "Market identifier for the order, required field"
        },
        "commitment_amount": {
          "type": "string",
          "title": "Specified as a unitless number that represents the amount of settlement asset of the market"
        },
        "fee": {
          "type": "string",
          "title": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers"
        },
        "sells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrderReference"
          },
          "title": "A set of liquidity sell orders to meet the liquidity provision obligation"
        },
        "buys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrderReference"
          },
          "title": "A set of liquidity buy orders to meet the liquidity provision obligation"
        },
        "version": {
          "type": "string",
          "title": "Version of this liquidity provision order"
        },
        "status": {
          "$ref": "#/definitions/vegaLiquidityProvisionStatus",
          "title": "Status of this liquidity provision order"
        },
        "reference": {
          "type": "string",
          "title": "A reference shared between this liquidity provision and all it's orders"
        }
      },
      "title": "An Liquidity provider commitment"
    },
    "vegaLiquidityProvisionStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_ACTIVE",
        "STATUS_STOPPED",
        "STATUS_CANCELLED",
        "STATUS_REJECTED",
        "STATUS_UNDEPLOYED",
        "STATUS_PENDING"
      ],
      "default": "STATUS_UNSPECIFIED",
      "description": "- STATUS_UNSPECIFIED: The default value\n - STATUS_ACTIVE: The liquidity provision is active\n - STATUS_STOPPED: The liquidity provision was stopped by the network\n - STATUS_CANCELLED: The liquidity provision was cancelled by the liquidity provider\n - STATUS_REJECTED: The liquidity provision was invalid and got rejected\n - STATUS_UNDEPLOYED: The liquidity provision is valid and accepted by network, but orders aren't deployed\n - STATUS_PENDING: The liquidity provision is valid and accepted by network\nbut have never been deployed. I when it's possible to deploy them for the first time\nmargin check fails, then they will be cancelled without any penalties.",
      "title": "Status of a liquidity provision order"
    },
    "vegaLogNormalModelParams": {
      "type": "object",
      "properties": {
        "mu": {
          "type": "number",
          "format": "double",
          "title": "Mu param"
        },
        "r": {
          "type": "number",
          "format": "double",
          "title": "R param"
        },
        "sigma": {
          "type": "number",
          "format": "double",
          "title": "Sigma param"
        }
      },
      "title": "Risk model parameters for log normal"
    },
    "vegaLogNormalRiskModel": {
      "type": "object",
      "properties": {
        "risk_aversion_parameter": {
          "type": "number",
          "format": "double",
          "title": "Risk Aversion Parameter"
        },
        "tau": {
          "type": "number",
          "format": "double",
          "title": "Tau"
        },
        "params": {
          "$ref": "#/definitions/vegaLogNormalModelParams",
          "title": "Risk model parameters for log normal"
        }
      },
      "title": "Risk model for log normal"
    },
    "vegaMarginCalculator": {
      "type": "object",
      "properties": {
        "scaling_factors": {
          "$ref": "#/definitions/vegaScalingFactors",
          "title": "Scaling factors for margin calculation"
        }
      },
      "title": "Margin Calculator definition"
    },
    "vegaMarginLevels": {
      "type": "object",
      "properties": {
        "maintenance_margin": {
          "type": "string",
          "title": "Maintenance margin value"
        },
        "search_level": {
          "type": "string",
          "title": "Search level value"
        },
        "initial_margin": {
          "type": "string",
          "title": "Initial margin value"
        },
        "collateral_release_level": {
          "type": "string",
          "title": "Collateral release level value"
        },
        "party_id": {
          "type": "string",
          "title": "Party identifier"
        },
        "market_id": {
          "type": "string",
          "title": "Market identifier"
        },
        "asset": {
          "type": "string",
          "title": "Asset identifier"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        }
      },
      "title": "Represents the margin levels for a party on a market at a given time"
    },
    "vegaMarket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier"
        },
        "tradable_instrument": {
          "$ref": "#/definitions/vegaTradableInstrument",
          "title": "Tradable instrument configuration"
        },
        "decimal_places": {
          "type": "string",
          "format": "uint64",
          "title": "Number of decimal places that a price must be shifted by in order to get a\ncorrect price denominated in the currency of the market, for example:\n`realPrice = price / 10^decimalPlaces`"
        },
        "fees": {
          "$ref": "#/definitions/vegaFees",
          "title": "Fees configuration"
        },
        "opening_auction": {
          "$ref": "#/definitions/vegaAuctionDuration",
          "title": "Auction duration specifies how long the opening auction will run (minimum\nduration and optionally a minimum traded volume)"
        },
        "continuous": {
          "$ref": "#/definitions/vegaContinuousTrading",
          "title": "Continuous"
        },
        "discrete": {
          "$ref": "#/definitions/vegaDiscreteTrading",
          "title": "Discrete"
        },
        "price_monitoring_settings": {
          "$ref": "#/definitions/vegaPriceMonitoringSettings",
          "title": "PriceMonitoringSettings for the market"
        },
        "liquidity_monitoring_parameters": {
          "$ref": "#/definitions/vegaLiquidityMonitoringParameters",
          "title": "LiquidityMonitoringParameters for the market"
        },
        "trading_mode": {
          "$ref": "#/definitions/MarketTradingMode",
          "title": "Current mode of execution of the market"
        },
        "state": {
          "$ref": "#/definitions/vegaMarketState",
          "title": "Current state of the market"
        },
        "market_timestamps": {
          "$ref": "#/definitions/vegaMarketTimestamps",
          "title": "Timestamps for when the market stay changes"
        }
      },
      "title": "Market definition"
    },
    "vegaMarketData": {
      "type": "object",
      "properties": {
        "mark_price": {
          "type": "string",
          "title": "Mark price, as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        },
        "best_bid_price": {
          "type": "string",
          "title": "Highest price level on an order book for buy orders, as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        },
        "best_bid_volume": {
          "type": "string",
          "format": "uint64",
          "title": "Aggregated volume being bid at the best bid price"
        },
        "best_offer_price": {
          "type": "string",
          "title": "Lowest price level on an order book for offer orders"
        },
        "best_offer_volume": {
          "type": "string",
          "format": "uint64",
          "title": "Aggregated volume being offered at the best offer price, as an integer, for example `123456` is a correctly\n // formatted price of `1.23456` assuming market configured to 5 decimal places"
        },
        "best_static_bid_price": {
          "type": "string",
          "title": "Highest price on the order book for buy orders not including pegged orders"
        },
        "best_static_bid_volume": {
          "type": "string",
          "format": "uint64",
          "title": "Total volume at the best static bid price excluding pegged orders"
        },
        "best_static_offer_price": {
          "type": "string",
          "title": "Lowest price on the order book for sell orders not including pegged orders"
        },
        "best_static_offer_volume": {
          "type": "string",
          "format": "uint64",
          "title": "Total volume at the best static offer price excluding pegged orders"
        },
        "mid_price": {
          "type": "string",
          "title": "Arithmetic average of the best bid price and best offer price, as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        },
        "static_mid_price": {
          "type": "string",
          "title": "Arithmetic average of the best static bid price and best static offer price"
        },
        "market": {
          "type": "string",
          "title": "Market identifier for the data"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp at which this mark price was relevant, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "open_interest": {
          "type": "string",
          "format": "uint64",
          "title": "The sum of the size of all positions greater than 0 on the market"
        },
        "auction_end": {
          "type": "string",
          "format": "int64",
          "title": "Time in seconds until the end of the auction (0 if currently not in auction period)"
        },
        "auction_start": {
          "type": "string",
          "format": "int64",
          "title": "Time until next auction (used in FBA's) - currently always 0"
        },
        "indicative_price": {
          "type": "string",
          "title": "Indicative price (zero if not in auction)"
        },
        "indicative_volume": {
          "type": "string",
          "format": "uint64",
          "title": "Indicative volume (zero if not in auction)"
        },
        "market_trading_mode": {
          "$ref": "#/definitions/MarketTradingMode",
          "title": "The current trading mode for the market"
        },
        "trigger": {
          "$ref": "#/definitions/vegaAuctionTrigger",
          "title": "When a market is in an auction trading mode, this field indicates what triggered the auction"
        },
        "extension_trigger": {
          "$ref": "#/definitions/vegaAuctionTrigger",
          "title": "When a market auction is extended, this field indicates what caused the extension"
        },
        "target_stake": {
          "type": "string",
          "title": "Targeted stake for the given market"
        },
        "supplied_stake": {
          "type": "string",
          "title": "Available stake for the given market"
        },
        "price_monitoring_bounds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceMonitoringBounds"
          },
          "title": "One or more price monitoring bounds for the current timestamp"
        },
        "market_value_proxy": {
          "type": "string",
          "title": "the market value proxy"
        },
        "liquidity_provider_fee_share": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityProviderFeeShare"
          },
          "title": "the equity like share of liquidity fee for each liquidity provider"
        }
      },
      "title": "Represents data generated by a market when open"
    },
    "vegaMarketDepth": {
      "type": "object",
      "properties": {
        "market_id": {
          "type": "string",
          "title": "Market identifier"
        },
        "buy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          },
          "title": "Collection of price levels for the buy side of the book"
        },
        "sell": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          },
          "title": "Collection of price levels for the sell side of the book"
        },
        "sequence_number": {
          "type": "string",
          "format": "uint64",
          "title": "Sequence number for the market depth data returned"
        }
      },
      "title": "Represents market depth or order book data for the specified market on Vega"
    },
    "vegaMarketDepthUpdate": {
      "type": "object",
      "properties": {
        "market_id": {
          "type": "string",
          "title": "Market identifier"
        },
        "buy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          },
          "title": "Collection of updated price levels for the buy side of the book"
        },
        "sell": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          },
          "title": "Collection of updated price levels for the sell side of the book"
        },
        "sequence_number": {
          "type": "string",
          "format": "uint64",
          "title": "Sequence number for the market depth update data returned"
        }
      },
      "title": "Represents the changed market depth since the last update"
    },
    "vegaMarketState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_PROPOSED",
        "STATE_REJECTED",
        "STATE_PENDING",
        "STATE_CANCELLED",
        "STATE_ACTIVE",
        "STATE_SUSPENDED",
        "STATE_CLOSED",
        "STATE_TRADING_TERMINATED",
        "STATE_SETTLED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "- STATE_UNSPECIFIED: Default value, invalid\n - STATE_PROPOSED: The Governance proposal valid and accepted\n - STATE_REJECTED: Outcome of governance votes is to reject the market\n - STATE_PENDING: Governance vote passes/wins\n - STATE_CANCELLED: Market triggers cancellation condition or governance\nvotes to close before market becomes Active\n - STATE_ACTIVE: Enactment date reached and usual auction exit checks pass\n - STATE_SUSPENDED: Price monitoring or liquidity monitoring trigger\n - STATE_CLOSED: Governance vote (to close)\n - STATE_TRADING_TERMINATED: Defined by the product (i.e. from a product parameter,\nspecified in market definition, giving close date/time)\n - STATE_SETTLED: Settlement triggered and completed as defined by product",
      "title": "The current state of the Market"
    },
    "vegaMarketTimestamps": {
      "type": "object",
      "properties": {
        "proposed": {
          "type": "string",
          "format": "int64",
          "title": "Time when the market is first proposed"
        },
        "pending": {
          "type": "string",
          "format": "int64",
          "title": "Time when the market has been voted in and is created into an opening auction"
        },
        "open": {
          "type": "string",
          "format": "int64",
          "title": "Time when the market has left the opening auction and is ready to accept trades"
        },
        "close": {
          "type": "string",
          "format": "int64",
          "title": "Time when the market is closed"
        }
      },
      "title": "Time stamps for important times about creating, enacting etc the market"
    },
    "vegaNetworkLimits": {
      "type": "object",
      "properties": {
        "can_propose_market": {
          "type": "boolean",
          "format": "boolean",
          "title": "Are market proposals allowed at this point in time"
        },
        "can_propose_asset": {
          "type": "boolean",
          "format": "boolean",
          "title": "Are asset proposals allowed at this point in time"
        },
        "bootstrap_finished": {
          "type": "boolean",
          "format": "boolean",
          "title": "True once block count \u003e bootstrapBlockCount"
        },
        "propose_market_enabled": {
          "type": "boolean",
          "format": "boolean",
          "title": "Are market proposals enabled on this chain"
        },
        "propose_asset_enabled": {
          "type": "boolean",
          "format": "boolean",
          "title": "Are asset proposals enabled on this chain"
        },
        "bootstrap_block_count": {
          "type": "integer",
          "format": "int64",
          "title": "How many blocks before the chain comes out of bootstrap mode"
        },
        "genesis_loaded": {
          "type": "boolean",
          "format": "boolean",
          "title": "True once the genesis file is loaded"
        },
        "propose_market_enabled_from": {
          "type": "string",
          "format": "int64",
          "title": "The date/timestamp in unix nanoseconds at which market proposals will be enabled (0 indicates not set)"
        },
        "propose_asset_enabled_from": {
          "type": "string",
          "format": "int64",
          "title": "The date/timestamp in unix nanoseconds at which asset proposals will be enabled (0 indicates not set)"
        }
      },
      "title": "Network limits, defined in the genesis file"
    },
    "vegaNetworkParameter": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "The unique key"
        },
        "value": {
          "type": "string",
          "title": "The value for the network parameter"
        }
      },
      "title": "Represents a network parameter on Vega"
    },
    "vegaNewAsset": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaAssetDetails",
          "title": "The configuration of the new asset"
        }
      },
      "title": "New asset on Vega"
    },
    "vegaNewFreeform": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "The URL containing content that describes the proposal"
        },
        "description": {
          "type": "string",
          "title": "A short description of what is being proposed"
        },
        "hash": {
          "type": "string",
          "title": "The hash on the content of the URL"
        }
      },
      "title": "Freeform proposal"
    },
    "vegaNewMarket": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaNewMarketConfiguration",
          "title": "The configuration of the new market"
        },
        "liquidity_commitment": {
          "$ref": "#/definitions/vegaNewMarketCommitment",
          "title": "The commitment from the party creating the NewMarket proposal"
        }
      },
      "title": "New market on Vega"
    },
    "vegaNewMarketCommitment": {
      "type": "object",
      "properties": {
        "commitment_amount": {
          "type": "string",
          "title": "Specified as a unitless number that represents the amount of settlement asset of the market"
        },
        "fee": {
          "type": "string",
          "title": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers"
        },
        "sells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          },
          "title": "A set of liquidity sell orders to meet the liquidity provision obligation"
        },
        "buys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          },
          "title": "A set of liquidity buy orders to meet the liquidity provision obligation"
        },
        "reference": {
          "type": "string",
          "title": "A reference to be associated to all orders created from this commitment"
        }
      },
      "title": "A commitment of liquidity to be made by the party which proposes a market"
    },
    "vegaNewMarketConfiguration": {
      "type": "object",
      "properties": {
        "instrument": {
          "$ref": "#/definitions/vegaInstrumentConfiguration",
          "title": "New market instrument configuration"
        },
        "decimal_places": {
          "type": "string",
          "format": "uint64",
          "title": "Decimal places used for the new market"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional new market meta data, tags"
        },
        "price_monitoring_parameters": {
          "$ref": "#/definitions/vegaPriceMonitoringParameters",
          "title": "Price monitoring parameters"
        },
        "liquidity_monitoring_parameters": {
          "$ref": "#/definitions/vegaLiquidityMonitoringParameters",
          "title": "Liquidity monitoring parameters"
        },
        "simple": {
          "$ref": "#/definitions/vegaSimpleModelParams",
          "title": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected"
        },
        "log_normal": {
          "$ref": "#/definitions/vegaLogNormalRiskModel",
          "title": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected"
        },
        "continuous": {
          "$ref": "#/definitions/vegaContinuousTrading",
          "title": "Continuous trading"
        },
        "discrete": {
          "$ref": "#/definitions/vegaDiscreteTrading",
          "title": "Discrete trading"
        }
      },
      "title": "Configuration for a new market on Vega"
    },
    "vegaNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The node ID (wallet ID)"
        },
        "pub_key": {
          "type": "string",
          "title": "Pub key of the node operator"
        },
        "tm_pub_key": {
          "type": "string",
          "title": "Public key of Tendermint"
        },
        "ethereum_adddress": {
          "type": "string",
          "title": "Ethereum public key of the node"
        },
        "info_url": {
          "type": "string",
          "title": "URL where I can find out more info on the node"
        },
        "location": {
          "type": "string",
          "title": "Country code for the location of the node"
        },
        "staked_by_operator": {
          "type": "string",
          "title": "The amount the node has put up themselves"
        },
        "staked_by_delegates": {
          "type": "string",
          "title": "The amount of stake that has been delegated by token holders"
        },
        "staked_total": {
          "type": "string",
          "title": "Total amount staked on node"
        },
        "max_intended_stake": {
          "type": "string",
          "title": "Max amount of (wanted) stake, is this a network param or a node param"
        },
        "pending_stake": {
          "type": "string",
          "title": "Amount of stake on the next epoch"
        },
        "epoch_data": {
          "$ref": "#/definitions/vegaEpochData",
          "title": "Informantion about epoch"
        },
        "status": {
          "$ref": "#/definitions/vegaNodeStatus",
          "title": "Node status"
        },
        "delegations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaDelegation"
          },
          "title": "Node's delegations"
        },
        "score": {
          "type": "string",
          "title": "Node score"
        },
        "normalised_score": {
          "type": "string",
          "title": "Node normalised score"
        },
        "name": {
          "type": "string",
          "title": "Node name"
        },
        "avatar_url": {
          "type": "string",
          "title": "Avatar url"
        },
        "performance": {
          "type": "string",
          "title": "Performance"
        },
        "raw_score": {
          "type": "string",
          "title": "Raw Score"
        }
      }
    },
    "vegaNodeData": {
      "type": "object",
      "properties": {
        "staked_total": {
          "type": "string",
          "title": "Total staked amount across all nodes"
        },
        "total_nodes": {
          "type": "integer",
          "format": "int64",
          "title": "Total number of nodes"
        },
        "inactive_nodes": {
          "type": "integer",
          "format": "int64",
          "title": "Number of inactive nodes"
        },
        "validating_nodes": {
          "type": "integer",
          "format": "int64",
          "title": "Number of nodes validating"
        },
        "uptime": {
          "type": "number",
          "format": "float",
          "title": "Total uptime for all epochs across all nodes"
        }
      }
    },
    "vegaNodeStatus": {
      "type": "string",
      "enum": [
        "NODE_STATUS_UNSPECIFIED",
        "NODE_STATUS_VALIDATOR",
        "NODE_STATUS_NON_VALIDATOR"
      ],
      "default": "NODE_STATUS_UNSPECIFIED",
      "description": "- NODE_STATUS_VALIDATOR: The node is validating\n - NODE_STATUS_NON_VALIDATOR: The node is non-validating",
      "title": "Node status type"
    },
    "vegaOracleSpecToFutureBinding": {
      "type": "object",
      "properties": {
        "settlement_price_property": {
          "type": "string",
          "description": "settlement_price_property holds the name of the property in the oracle data\nthat should be used as settlement price.\nIf it is set to \"prices.BTC.value\", then the Future will use the value of\nthis property as settlement price."
        },
        "trading_termination_property": {
          "type": "string",
          "title": "the name of the property in the oracle data that signals termination of trading"
        }
      },
      "title": "OracleSpecToFutureBinding tells on which property oracle data should be\nused as settlement price and which to use the trading terminated trigger"
    },
    "vegaOrder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier for the order (set by the system after consensus)"
        },
        "market_id": {
          "type": "string",
          "title": "Market identifier for the order"
        },
        "party_id": {
          "type": "string",
          "title": "Party identifier for the order"
        },
        "side": {
          "$ref": "#/definitions/vegaSide",
          "title": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)"
        },
        "price": {
          "type": "string",
          "title": "Price for the order, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        },
        "size": {
          "type": "string",
          "format": "uint64",
          "title": "Size for the order, for example, in a futures market the size equals the number of contracts"
        },
        "remaining": {
          "type": "string",
          "format": "uint64",
          "title": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED"
        },
        "time_in_force": {
          "$ref": "#/definitions/OrderTimeInForce",
          "title": "Time in force indicates how long an order will remain active before it is executed or expires.\n- See [`Order.TimeInForce`](#vega.Order.TimeInForce)"
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType",
          "title": "Type for the order - See [`Order.Type`](#vega.Order.Type)"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the order was created at, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "status": {
          "$ref": "#/definitions/vegaOrderStatus",
          "title": "The current status for the order. See [`Order.Status`](#vega.Order.Status)\n- For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field"
        },
        "expires_at": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the order will expire, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`"
        },
        "reference": {
          "type": "string",
          "title": "Reference given for the order, this is typically used to retrieve an order submitted through consensus\n- Currently set internally by the node to return a unique reference identifier for the order submission"
        },
        "reason": {
          "$ref": "#/definitions/vegaOrderError",
          "title": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified\n- The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the Order was last updated, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "The version for the order, initial value is version 1 and is incremented after each successful amend"
        },
        "batch_id": {
          "type": "string",
          "format": "uint64",
          "title": "Batch identifier for the order, used internally for orders submitted during auctions\nto keep track of the auction batch this order falls under (required for fees calculation)"
        },
        "pegged_order": {
          "$ref": "#/definitions/vegaPeggedOrder",
          "description": "Pegged order details, used only if the order represents a pegged order."
        },
        "liquidity_provision_id": {
          "type": "string",
          "description": "Is this order created as part of a liquidity provision, will be empty if not."
        }
      },
      "title": "An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties"
    },
    "vegaOrderError": {
      "type": "string",
      "enum": [
        "ORDER_ERROR_UNSPECIFIED",
        "ORDER_ERROR_INVALID_MARKET_ID",
        "ORDER_ERROR_INVALID_ORDER_ID",
        "ORDER_ERROR_OUT_OF_SEQUENCE",
        "ORDER_ERROR_INVALID_REMAINING_SIZE",
        "ORDER_ERROR_TIME_FAILURE",
        "ORDER_ERROR_REMOVAL_FAILURE",
        "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
        "ORDER_ERROR_INVALID_ORDER_REFERENCE",
        "ORDER_ERROR_EDIT_NOT_ALLOWED",
        "ORDER_ERROR_AMEND_FAILURE",
        "ORDER_ERROR_NOT_FOUND",
        "ORDER_ERROR_INVALID_PARTY_ID",
        "ORDER_ERROR_MARKET_CLOSED",
        "ORDER_ERROR_MARGIN_CHECK_FAILED",
        "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
        "ORDER_ERROR_INTERNAL_ERROR",
        "ORDER_ERROR_INVALID_SIZE",
        "ORDER_ERROR_INVALID_PERSISTENCE",
        "ORDER_ERROR_INVALID_TYPE",
        "ORDER_ERROR_SELF_TRADING",
        "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
        "ORDER_ERROR_INCORRECT_MARKET_TYPE",
        "ORDER_ERROR_INVALID_TIME_IN_FORCE",
        "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
        "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
        "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
        "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
        "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
        "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
        "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
        "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
        "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
        "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
        "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
        "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
        "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
        "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
        "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
        "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
        "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
        "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
        "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
        "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
        "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
        "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
      ],
      "default": "ORDER_ERROR_UNSPECIFIED",
      "description": "- ORDER_ERROR_UNSPECIFIED: Default value, no error reported\n - ORDER_ERROR_INVALID_MARKET_ID: Order was submitted for a market that does not exist\n - ORDER_ERROR_INVALID_ORDER_ID: Order was submitted with an invalid identifier\n - ORDER_ERROR_OUT_OF_SEQUENCE: Order was amended with a sequence number that was not previous version + 1\n - ORDER_ERROR_INVALID_REMAINING_SIZE: Order was amended with an invalid remaining size (e.g. remaining greater than total size)\n - ORDER_ERROR_TIME_FAILURE: Node was unable to get Vega (blockchain) time\n - ORDER_ERROR_REMOVAL_FAILURE: Failed to remove an order from the book\n - ORDER_ERROR_INVALID_EXPIRATION_DATETIME: An order with `TimeInForce.TIME_IN_FORCE_GTT` was submitted or amended\nwith an expiration that was badly formatted or otherwise invalid\n - ORDER_ERROR_INVALID_ORDER_REFERENCE: Order was submitted or amended with an invalid reference field\n - ORDER_ERROR_EDIT_NOT_ALLOWED: Order amend was submitted for an order field that cannot not be amended (e.g. order identifier)\n - ORDER_ERROR_AMEND_FAILURE: Amend failure because amend details do not match original order\n - ORDER_ERROR_NOT_FOUND: Order not found in an order book or store\n - ORDER_ERROR_INVALID_PARTY_ID: Order was submitted with an invalid or missing party identifier\n - ORDER_ERROR_MARKET_CLOSED: Order was submitted for a market that has closed\n - ORDER_ERROR_MARGIN_CHECK_FAILED: Order was submitted, but the party did not have enough collateral to cover the order\n - ORDER_ERROR_MISSING_GENERAL_ACCOUNT: Order was submitted, but the party did not have an account for this asset\n - ORDER_ERROR_INTERNAL_ERROR: Unspecified internal error\n - ORDER_ERROR_INVALID_SIZE: Order was submitted with an invalid or missing size (e.g. 0)\n - ORDER_ERROR_INVALID_PERSISTENCE: Order was submitted with an invalid persistence for its type\n - ORDER_ERROR_INVALID_TYPE: Order was submitted with an invalid type field\n - ORDER_ERROR_SELF_TRADING: Order was stopped as it would have traded with another order submitted from the same party\n - ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES: Order was submitted, but the party did not have enough collateral to cover the fees for the order\n - ORDER_ERROR_INCORRECT_MARKET_TYPE: Order was submitted with an incorrect or invalid market type\n - ORDER_ERROR_INVALID_TIME_IN_FORCE: Order was submitted with invalid time in force\n - ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION: A GFN order has got to the market when it is in auction mode\n - ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING: A GFA order has got to the market when it is in continuous trading mode\n - ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT: Attempt to amend order to GTT without ExpiryAt\n - ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT: Attempt to amend ExpiryAt to a value before CreatedAt\n - ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT: Attempt to amend to GTC without an ExpiryAt value\n - ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC: Amending to FOK or IOC is invalid\n - ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN: Amending to GFA or GFN is invalid\n - ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN: Amending from GFA or GFN is invalid\n - ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION: IOC orders are not allowed during auction\n - ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION: FOK orders are not allowed during auction\n - ORDER_ERROR_MUST_BE_LIMIT_ORDER: Pegged orders must be LIMIT orders\n - ORDER_ERROR_MUST_BE_GTT_OR_GTC: Pegged orders can only have TIF GTC or GTT\n - ORDER_ERROR_WITHOUT_REFERENCE_PRICE: Pegged order must have a reference price\n - ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE: Buy pegged order cannot reference best ask price\n - ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO: Pegged order offset must be \u003e= 0\n - ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE: Sell pegged order cannot reference best bid price\n - ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO: Pegged order offset must be \u003e zero\n - ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE: The party has an insufficient balance, or does not have\na general account to submit the order (no deposits made\nfor the required asset)\n - ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER: Cannot amend a non pegged orders details\n - ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER: We are unable to re-price a pegged order because a market price is unavailable\n - ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER: It is not possible to amend the price of an existing pegged order\n - ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS: An FOK, IOC, or GFN order was rejected because it resulted in trades outside the price bounds",
      "title": "OrderError codes are returned in the `[Order](#vega.Order).reason` field - If there is an issue\nwith an order during its life-cycle, it will be marked with `status.ORDER_STATUS_REJECTED`"
    },
    "vegaOrderStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_ACTIVE",
        "STATUS_EXPIRED",
        "STATUS_CANCELLED",
        "STATUS_STOPPED",
        "STATUS_FILLED",
        "STATUS_REJECTED",
        "STATUS_PARTIALLY_FILLED",
        "STATUS_PARKED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "description": "Status values for an order\nSee resulting status in [What order types are available to trade on Vega?](https://docs.testnet.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail.\n\n - STATUS_UNSPECIFIED: Default value, always invalid\n - STATUS_ACTIVE: Used for active unfilled or partially filled orders\n - STATUS_EXPIRED: Used for expired GTT orders\n - STATUS_CANCELLED: Used for orders cancelled by the party that created the order\n - STATUS_STOPPED: Used for unfilled FOK or IOC orders, and for orders that were stopped by the network\n - STATUS_FILLED: Used for closed fully filled orders\n - STATUS_REJECTED: Used for orders when not enough collateral was available to fill the margin requirements\n - STATUS_PARTIALLY_FILLED: Used for closed partially filled IOC orders\n - STATUS_PARKED: Order has been removed from the order book and has been parked, this applies to pegged orders only"
    },
    "vegaOrderType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_LIMIT",
        "TYPE_MARKET",
        "TYPE_NETWORK"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_UNSPECIFIED: Default value, always invalid\n - TYPE_LIMIT: Used for Limit orders\n - TYPE_MARKET: Used for Market orders\n - TYPE_NETWORK: Used for orders where the initiating party is the network (with distressed parties)",
      "title": "Type values for an order"
    },
    "vegaParty": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "A unique identifier for the party, typically represented by a public key"
        }
      },
      "title": "A party represents an entity who wishes to trade on or query a Vega network"
    },
    "vegaPeggedOrder": {
      "type": "object",
      "properties": {
        "reference": {
          "$ref": "#/definitions/vegaPeggedReference",
          "title": "Which price point are we linked to"
        },
        "offset": {
          "type": "string",
          "title": "Offset from the price reference"
        }
      },
      "title": "Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET\nThey can be used for any limit order that is valid during continuous trading"
    },
    "vegaPeggedReference": {
      "type": "string",
      "enum": [
        "PEGGED_REFERENCE_UNSPECIFIED",
        "PEGGED_REFERENCE_MID",
        "PEGGED_REFERENCE_BEST_BID",
        "PEGGED_REFERENCE_BEST_ASK"
      ],
      "default": "PEGGED_REFERENCE_UNSPECIFIED",
      "description": "- PEGGED_REFERENCE_UNSPECIFIED: Default value for PeggedReference, no reference given\n - PEGGED_REFERENCE_MID: Mid price reference\n - PEGGED_REFERENCE_BEST_BID: Best bid price reference\n - PEGGED_REFERENCE_BEST_ASK: Best ask price reference",
      "title": "A pegged reference defines which price point a pegged order is linked to - meaning\nthe price for a pegged order is calculated from the value of the reference price point"
    },
    "vegaPosition": {
      "type": "object",
      "properties": {
        "market_id": {
          "type": "string",
          "title": "Market identifier"
        },
        "party_id": {
          "type": "string",
          "title": "Party identifier"
        },
        "open_volume": {
          "type": "string",
          "format": "int64",
          "title": "Open volume for the position, value is signed +ve for long and -ve for short"
        },
        "realised_pnl": {
          "type": "string",
          "title": "Realised profit and loss for the position, value is signed +ve for long and -ve for short"
        },
        "unrealised_pnl": {
          "type": "string",
          "title": "Unrealised profit and loss for the position, value is signed +ve for long and -ve for short"
        },
        "average_entry_price": {
          "type": "string",
          "title": "Average entry price for the position, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for the latest time the position was updated"
        }
      },
      "title": "Represents position data for a party on the specified market on Vega"
    },
    "vegaPrice": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "title": "Price value, given as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        }
      }
    },
    "vegaPriceLevel": {
      "type": "object",
      "properties": {
        "price": {
          "type": "string",
          "title": "Price for the price level, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        },
        "number_of_orders": {
          "type": "string",
          "format": "uint64",
          "title": "Number of orders at the price level"
        },
        "volume": {
          "type": "string",
          "format": "uint64",
          "title": "Volume at the price level"
        }
      },
      "title": "Represents a price level from market depth or order book data"
    },
    "vegaPriceMonitoringBounds": {
      "type": "object",
      "properties": {
        "min_valid_price": {
          "type": "string",
          "title": "Minimum price that isn't currently breaching the specified price monitoring trigger"
        },
        "max_valid_price": {
          "type": "string",
          "title": "Maximum price that isn't currently breaching the specified price monitoring trigger"
        },
        "trigger": {
          "$ref": "#/definitions/vegaPriceMonitoringTrigger",
          "title": "Price monitoring trigger associated with the bounds"
        },
        "reference_price": {
          "type": "number",
          "format": "double",
          "title": "Reference price used to calculate the valid price range"
        }
      },
      "title": "Represents a list of valid (at the current timestamp) price ranges per associated trigger"
    },
    "vegaPriceMonitoringParameters": {
      "type": "object",
      "properties": {
        "triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceMonitoringTrigger"
          }
        }
      },
      "title": "PriceMonitoringParameters contains a collection of triggers to be used for a given market"
    },
    "vegaPriceMonitoringSettings": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/vegaPriceMonitoringParameters",
          "title": "Specifies price monitoring parameters to be used for price monitoring purposes"
        },
        "update_frequency": {
          "type": "string",
          "format": "int64",
          "title": "Specifies how often (expressed in seconds) the price monitoring bounds should be updated"
        }
      },
      "title": "PriceMonitoringSettings contains the settings for price monitoring"
    },
    "vegaPriceMonitoringTrigger": {
      "type": "object",
      "properties": {
        "horizon": {
          "type": "string",
          "format": "int64",
          "title": "Price monitoring projection horizon τ in seconds"
        },
        "probability": {
          "type": "number",
          "format": "double",
          "title": "Price monitoring probability level p"
        },
        "auction_extension": {
          "type": "string",
          "format": "int64",
          "title": "Price monitoring auction extension duration in seconds should the price\nbreach it's theoretical level over the specified horizon at the specified\nprobability level"
        }
      },
      "title": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration"
    },
    "vegaProposal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique proposal identifier"
        },
        "reference": {
          "type": "string",
          "title": "Proposal reference"
        },
        "party_id": {
          "type": "string",
          "title": "Party identifier of the author (the party submitting the proposal)"
        },
        "state": {
          "$ref": "#/definitions/vegaProposalState",
          "title": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network"
        },
        "terms": {
          "$ref": "#/definitions/vegaProposalTerms",
          "title": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted"
        },
        "reason": {
          "$ref": "#/definitions/vegaProposalError",
          "title": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses"
        },
        "error_details": {
          "type": "string",
          "description": "The detailed error associated to the reason."
        }
      },
      "title": "Governance proposal"
    },
    "vegaProposalError": {
      "type": "string",
      "enum": [
        "PROPOSAL_ERROR_UNSPECIFIED",
        "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
        "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
        "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
        "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
        "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
        "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
        "PROPOSAL_ERROR_NO_PRODUCT",
        "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
        "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT_TIMESTAMP",
        "PROPOSAL_ERROR_PRODUCT_MATURITY_IS_PASSED",
        "PROPOSAL_ERROR_NO_TRADING_MODE",
        "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
        "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
        "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
        "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
        "PROPOSAL_ERROR_INVALID_ASSET",
        "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
        "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
        "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
        "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
        "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
        "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
        "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
        "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
        "PROPOSAL_ERROR_INVALID_SHAPE",
        "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
        "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
        "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
        "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
      ],
      "default": "PROPOSAL_ERROR_UNSPECIFIED",
      "description": "- PROPOSAL_ERROR_UNSPECIFIED: Default value\n - PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON: The specified close time is too early base on network parameters\n - PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE: The specified close time is too late based on network parameters\n - PROPOSAL_ERROR_ENACT_TIME_TOO_SOON: The specified enact time is too early based on network parameters\n - PROPOSAL_ERROR_ENACT_TIME_TOO_LATE: The specified enact time is too late based on network parameters\n - PROPOSAL_ERROR_INSUFFICIENT_TOKENS: The proposer for this proposal as insufficient tokens\n - PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY: The instrument quote name and base name were the same\n - PROPOSAL_ERROR_NO_PRODUCT: The proposal has no product\n - PROPOSAL_ERROR_UNSUPPORTED_PRODUCT: The specified product is not supported\n - PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT_TIMESTAMP: Invalid future maturity timestamp (expect RFC3339)\n - PROPOSAL_ERROR_PRODUCT_MATURITY_IS_PASSED: The product maturity is past\n - PROPOSAL_ERROR_NO_TRADING_MODE: The proposal has no trading mode\n - PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE: The proposal has an unsupported trading mode\n - PROPOSAL_ERROR_NODE_VALIDATION_FAILED: The proposal failed node validation\n - PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD: A field is missing in a builtin asset source\n - PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS: The contract address is missing in the ERC20 asset source\n - PROPOSAL_ERROR_INVALID_ASSET: The asset identifier is invalid or does not exist on the Vega network\n - PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS: Proposal terms timestamps are not compatible (Validation \u003c Closing \u003c Enactment)\n - PROPOSAL_ERROR_NO_RISK_PARAMETERS: No risk parameters were specified\n - PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY: Invalid key in update network parameter proposal\n - PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE: Invalid valid in update network parameter proposal\n - PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED: Validation failed for network parameter proposal\n - PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL: Opening auction duration is less than the network minimum opening auction time\n - PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE: Opening auction duration is more than the network minimum opening auction time\n - PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT: Market proposal is missing a liquidity commitment\n - PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET: Market proposal market could not be instantiate in execution\n - PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT: Market proposal market contained invalid product definition\n - PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT: Market proposal is missing commitment amount\n - PROPOSAL_ERROR_INVALID_FEE_AMOUNT: Market proposal have invalid fee\n - PROPOSAL_ERROR_INVALID_SHAPE: Market proposal have invalid shape\n - PROPOSAL_ERROR_INVALID_RISK_PARAMETER: Market proposal invalid risk parameter\n - PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED: Proposal was declined because vote didn't reach the majority thershold required\n - PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED: Proposal declined because the participation threshold was not reached\n - PROPOSAL_ERROR_INVALID_ASSET_DETAILS: Asset proposal invalid asset details",
      "title": "A list of possible errors that can cause a proposal to be in state rejected or failed"
    },
    "vegaProposalState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_FAILED",
        "STATE_OPEN",
        "STATE_PASSED",
        "STATE_REJECTED",
        "STATE_DECLINED",
        "STATE_ENACTED",
        "STATE_WAITING_FOR_NODE_VOTE"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "- STATE_UNSPECIFIED: Default value, always invalid\n - STATE_FAILED: Proposal enactment has failed - even though proposal has passed, its execution could not be performed\n - STATE_OPEN: Proposal is open for voting\n - STATE_PASSED: Proposal has gained enough support to be executed\n - STATE_REJECTED: Proposal wasn't accepted (proposal terms failed validation due to wrong configuration or failing to meet network requirements)\n - STATE_DECLINED: Proposal didn't get enough votes (either failing to gain required participation or majority level)\n - STATE_ENACTED: Proposal enacted\n - STATE_WAITING_FOR_NODE_VOTE: Waiting for node validation of the proposal",
      "title": "Proposal state transition:\nOpen -\u003e\n  - Passed -\u003e Enacted.\n  - Passed -\u003e Failed.\n  - Declined\nRejected\nProposal can enter Failed state from any other state"
    },
    "vegaProposalTerms": {
      "type": "object",
      "properties": {
        "closing_timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp (Unix time in seconds) when voting closes for this proposal,\nconstrained by `minClose` and `maxClose` network parameters"
        },
        "enactment_timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed),\nconstrained by `minEnact` and `maxEnact` network parameters"
        },
        "validation_timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Validation timestamp (Unix time in seconds)"
        },
        "update_market": {
          "$ref": "#/definitions/vegaUpdateMarket",
          "title": "Proposal change for modifying an existing market on Vega"
        },
        "new_market": {
          "$ref": "#/definitions/vegaNewMarket",
          "title": "Proposal change for creating new market on Vega"
        },
        "update_network_parameter": {
          "$ref": "#/definitions/vegaUpdateNetworkParameter",
          "title": "Proposal change for updating Vega network parameters"
        },
        "new_asset": {
          "$ref": "#/definitions/vegaNewAsset",
          "title": "Proposal change for creating new assets on Vega"
        },
        "new_freeform": {
          "$ref": "#/definitions/vegaNewFreeform",
          "title": "Proposal change for a freeform voting thing"
        }
      },
      "title": "Terms for a governance proposal on Vega"
    },
    "vegaReward": {
      "type": "object",
      "properties": {
        "asset_id": {
          "type": "string"
        },
        "party_id": {
          "type": "string"
        },
        "epoch": {
          "type": "string",
          "format": "uint64"
        },
        "amount": {
          "type": "string"
        },
        "percentage_of_total": {
          "type": "string"
        },
        "received_at": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Details for a single reward payment"
    },
    "vegaRewardSummary": {
      "type": "object",
      "properties": {
        "asset_id": {
          "type": "string"
        },
        "party_id": {
          "type": "string"
        },
        "amount": {
          "type": "string",
          "title": "Total amount of rewards for the asset"
        }
      },
      "title": "Details for rewards for a single asset"
    },
    "vegaRiskFactor": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string",
          "title": "Market ID that relates to this risk factor"
        },
        "short": {
          "type": "string",
          "title": "Short Risk factor value"
        },
        "long": {
          "type": "string",
          "title": "Long Risk factor value"
        }
      },
      "title": "Risk factors are used to calculate the current risk associated with orders trading on a given market"
    },
    "vegaScalingFactors": {
      "type": "object",
      "properties": {
        "search_level": {
          "type": "number",
          "format": "double",
          "title": "Search level"
        },
        "initial_margin": {
          "type": "number",
          "format": "double",
          "title": "Initial margin level"
        },
        "collateral_release": {
          "type": "number",
          "format": "double",
          "title": "Collateral release level"
        }
      },
      "title": "Scaling Factors (for use in margin calculation)"
    },
    "vegaSide": {
      "type": "string",
      "enum": [
        "SIDE_UNSPECIFIED",
        "SIDE_BUY",
        "SIDE_SELL"
      ],
      "default": "SIDE_UNSPECIFIED",
      "description": "- SIDE_UNSPECIFIED: Default value, always invalid\n - SIDE_BUY: Buy order\n - SIDE_SELL: Sell order",
      "title": "A side relates to the direction of an order, to Buy, or Sell"
    },
    "vegaSimpleModelParams": {
      "type": "object",
      "properties": {
        "factor_long": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined risk factor value for long"
        },
        "factor_short": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined risk factor value for short"
        },
        "max_move_up": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined maximum price move up that the model considers as valid"
        },
        "min_move_down": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined minimum price move down that the model considers as valid"
        },
        "probability_of_trading": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined constant probability of trading"
        }
      },
      "title": "Risk model parameters for simple modelling"
    },
    "vegaSimpleRiskModel": {
      "type": "object",
      "properties": {
        "params": {
          "$ref": "#/definitions/vegaSimpleModelParams",
          "title": "Risk model params for simple modelling"
        }
      },
      "title": "Risk model for simple modelling"
    },
    "vegaTargetStakeParameters": {
      "type": "object",
      "properties": {
        "time_window": {
          "type": "string",
          "format": "int64",
          "title": "Specifies length of time window expressed in seconds for target stake calculation"
        },
        "scaling_factor": {
          "type": "number",
          "format": "double",
          "title": "Specifies scaling factors used in target stake calculation"
        }
      },
      "title": "TargetStakeParameters contains parameters used in target stake calculation"
    },
    "vegaTimestamp": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp value"
        }
      },
      "title": "A timestamp in nanoseconds since epoch\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
    },
    "vegaTradableInstrument": {
      "type": "object",
      "properties": {
        "instrument": {
          "$ref": "#/definitions/vegaInstrument",
          "title": "Instrument details"
        },
        "margin_calculator": {
          "$ref": "#/definitions/vegaMarginCalculator",
          "title": "Margin calculator for the instrument"
        },
        "log_normal_risk_model": {
          "$ref": "#/definitions/vegaLogNormalRiskModel",
          "title": "Log normal"
        },
        "simple_risk_model": {
          "$ref": "#/definitions/vegaSimpleRiskModel",
          "title": "Simple"
        }
      },
      "title": "Tradable Instrument definition"
    },
    "vegaTrade": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier for the trade (generated by Vega)"
        },
        "market_id": {
          "type": "string",
          "title": "Market identifier (the market that the trade occurred on)"
        },
        "price": {
          "type": "string",
          "title": "Price for the trade, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        },
        "size": {
          "type": "string",
          "format": "uint64",
          "title": "Size filled for the trade"
        },
        "buyer": {
          "type": "string",
          "title": "Unique party identifier for the buyer"
        },
        "seller": {
          "type": "string",
          "title": "Unique party identifier for the seller"
        },
        "aggressor": {
          "$ref": "#/definitions/vegaSide",
          "title": "Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)"
        },
        "buy_order": {
          "type": "string",
          "title": "Identifier of the order from the buy side"
        },
        "sell_order": {
          "type": "string",
          "title": "Identifier of the order from the sell side"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the trade occurred, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "type": {
          "$ref": "#/definitions/vegaTradeType",
          "title": "Type for the trade - See [`Trade.Type`](#vega.Trade.Type)"
        },
        "buyer_fee": {
          "$ref": "#/definitions/vegaFee",
          "title": "Fee amount charged to the buyer party for the trade"
        },
        "seller_fee": {
          "$ref": "#/definitions/vegaFee",
          "title": "Fee amount charged to the seller party for the trade"
        },
        "buyer_auction_batch": {
          "type": "string",
          "format": "uint64",
          "title": "Auction batch number that the buy side order was placed in"
        },
        "seller_auction_batch": {
          "type": "string",
          "format": "uint64",
          "title": "Auction batch number that the sell side order was placed in"
        }
      },
      "title": "A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega"
    },
    "vegaTradeType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_DEFAULT",
        "TYPE_NETWORK_CLOSE_OUT_GOOD",
        "TYPE_NETWORK_CLOSE_OUT_BAD"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_UNSPECIFIED: Default value, always invalid\n - TYPE_DEFAULT: Normal trading between two parties\n - TYPE_NETWORK_CLOSE_OUT_GOOD: Trading initiated by the network with another party on the book,\nwhich helps to zero-out the positions of one or more distressed parties\n - TYPE_NETWORK_CLOSE_OUT_BAD: Trading initiated by the network with another party off the book,\nwith a distressed party in order to zero-out the position of the party",
      "title": "Type values for a trade"
    },
    "vegaTransferBalance": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/vegaAccount",
          "title": "The account relating to the transfer"
        },
        "balance": {
          "type": "string",
          "title": "The balance relating to the transfer"
        }
      },
      "title": "Represents the balance for an account during a transfer"
    },
    "vegaTransferResponse": {
      "type": "object",
      "properties": {
        "transfers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLedgerEntry"
          },
          "title": "One or more ledger entries representing the transfers"
        },
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTransferBalance"
          },
          "title": "One or more account balances"
        }
      },
      "title": "Represents the response from a transfer"
    },
    "vegaUpdateMarket": {
      "type": "object",
      "title": "Update an existing market on Vega"
    },
    "vegaUpdateNetworkParameter": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaNetworkParameter",
          "title": "The network parameter to update"
        }
      },
      "title": "Update network configuration on Vega"
    },
    "vegaVote": {
      "type": "object",
      "properties": {
        "party_id": {
          "type": "string",
          "title": "Voter's party identifier"
        },
        "value": {
          "$ref": "#/definitions/VoteValue",
          "title": "Actual vote"
        },
        "proposal_id": {
          "type": "string",
          "title": "Identifier of the proposal being voted on"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network"
        },
        "total_governance_token_balance": {
          "type": "string",
          "title": "Total number of governance token for the party that casted the vote"
        },
        "total_governance_token_weight": {
          "type": "string",
          "title": "The weight of this vote based on the total of governance token"
        }
      },
      "title": "Governance vote"
    },
    "vegaWithdrawExt": {
      "type": "object",
      "properties": {
        "erc20": {
          "$ref": "#/definitions/vegaErc20WithdrawExt",
          "title": "ERC20 withdrawal details"
        }
      },
      "title": "Withdrawal external details"
    },
    "vegaWithdrawal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier for the withdrawal"
        },
        "party_id": {
          "type": "string",
          "title": "Unique party identifier of the user initiating the withdrawal"
        },
        "amount": {
          "type": "string",
          "title": "The amount to be withdrawn"
        },
        "asset": {
          "type": "string",
          "title": "The asset we want to withdraw funds from"
        },
        "status": {
          "$ref": "#/definitions/vegaWithdrawalStatus",
          "title": "The status of the withdrawal"
        },
        "ref": {
          "type": "string",
          "title": "The reference which is used by the foreign chain\nto refer to this withdrawal"
        },
        "expiry": {
          "type": "string",
          "format": "int64",
          "title": "The time until when the withdrawal is valid"
        },
        "tx_hash": {
          "type": "string",
          "title": "The hash of the foreign chain for this transaction"
        },
        "created_timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the network started to process this withdrawal"
        },
        "withdrawn_timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the withdrawal was finalised by the network"
        },
        "ext": {
          "$ref": "#/definitions/vegaWithdrawExt",
          "title": "Foreign chain specifics"
        }
      },
      "title": "A withdrawal from the Vega network"
    },
    "vegaWithdrawalStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_OPEN",
        "STATUS_REJECTED",
        "STATUS_FINALIZED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "description": "- STATUS_UNSPECIFIED: Default value, always invalid\n - STATUS_OPEN: The withdrawal is open and being processed by the network\n - STATUS_REJECTED: The withdrawal have been cancelled\n - STATUS_FINALIZED: The withdrawal went through and is fully finalised, the funds are removed from the\nVega network and are unlocked on the foreign chain bridge, for example, on the Ethereum network",
      "title": "The status of the withdrawal"
    },
    "vegacommandsv1OneOffTransfer": {
      "type": "object",
      "properties": {
        "deliver_on": {
          "type": "string",
          "format": "int64",
          "title": "A unix timestamp in second. Time at which the\ntransfer should be delivered in the to account"
        }
      },
      "title": "Specific details for a one off transfer"
    },
    "vegacommandsv1RecurringTransfer": {
      "type": "object",
      "properties": {
        "start_epoch": {
          "type": "string",
          "format": "uint64",
          "title": "The first epoch from which this transfer shall be paid"
        },
        "end_epoch": {
          "type": "string",
          "format": "uint64"
        },
        "factor": {
          "type": "string",
          "title": "factor needs to be \u003e 0"
        }
      },
      "title": "Specific details for a recurring transfer"
    },
    "vegacommandsv1Transfer": {
      "type": "object",
      "properties": {
        "from_account_type": {
          "$ref": "#/definitions/vegaAccountType",
          "title": "The account type from which the funds of the party\nshould be taken"
        },
        "to": {
          "type": "string",
          "title": "The public key of the destination account"
        },
        "to_account_type": {
          "$ref": "#/definitions/vegaAccountType",
          "title": "The type of the destination account"
        },
        "asset": {
          "type": "string",
          "title": "The asset"
        },
        "amount": {
          "type": "string",
          "title": "The amount to be taken from the source account"
        },
        "reference": {
          "type": "string",
          "title": "The reference to be attached to the transfer"
        },
        "one_off": {
          "$ref": "#/definitions/vegacommandsv1OneOffTransfer"
        },
        "recurring": {
          "$ref": "#/definitions/vegacommandsv1RecurringTransfer"
        }
      },
      "title": "A transfer initiated by a party"
    },
    "vegaeventsv1KeyRotation": {
      "type": "object",
      "properties": {
        "node_id": {
          "type": "string",
          "title": "Node id of the node"
        },
        "old_pub_key": {
          "type": "string",
          "title": "Old Vega public key of validator node"
        },
        "new_pub_key": {
          "type": "string",
          "title": "New Vega public key of validator node"
        },
        "block_height": {
          "type": "string",
          "format": "uint64",
          "title": "Height of the block where key rotation took effect"
        }
      },
      "title": "A key rotation events contains information about Vega key rotation"
    },
    "vegaeventsv1OneOffTransfer": {
      "type": "object",
      "properties": {
        "deliver_on": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaeventsv1RecurringTransfer": {
      "type": "object",
      "properties": {
        "start_epoch": {
          "type": "string",
          "format": "uint64"
        },
        "end_epoch": {
          "type": "string",
          "format": "uint64"
        },
        "factor": {
          "type": "string"
        }
      }
    },
    "vegaeventsv1Transfer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "from_account_type": {
          "$ref": "#/definitions/vegaAccountType"
        },
        "to": {
          "type": "string"
        },
        "to_account_type": {
          "$ref": "#/definitions/vegaAccountType"
        },
        "asset": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1TransferStatus"
        },
        "one_off": {
          "$ref": "#/definitions/vegaeventsv1OneOffTransfer"
        },
        "recurring": {
          "$ref": "#/definitions/vegaeventsv1RecurringTransfer"
        }
      }
    }
  },
  "x-stream-definitions": {
    "v1AccountsSubscribeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1AccountsSubscribeResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1AccountsSubscribeResponse"
    },
    "v1CandlesSubscribeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1CandlesSubscribeResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1CandlesSubscribeResponse"
    },
    "v1MarginLevelsSubscribeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1MarginLevelsSubscribeResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1MarginLevelsSubscribeResponse"
    },
    "v1MarketDepthSubscribeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1MarketDepthSubscribeResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1MarketDepthSubscribeResponse"
    },
    "v1MarketDepthUpdatesSubscribeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1MarketDepthUpdatesSubscribeResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1MarketDepthUpdatesSubscribeResponse"
    },
    "v1MarketsDataSubscribeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1MarketsDataSubscribeResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1MarketsDataSubscribeResponse"
    },
    "v1ObserveDelegationsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1ObserveDelegationsResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1ObserveDelegationsResponse"
    },
    "v1ObserveEventBusResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1ObserveEventBusResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1ObserveEventBusResponse"
    },
    "v1ObserveGovernanceResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1ObserveGovernanceResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1ObserveGovernanceResponse"
    },
    "v1ObservePartyProposalsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1ObservePartyProposalsResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1ObservePartyProposalsResponse"
    },
    "v1ObservePartyVotesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1ObservePartyVotesResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1ObservePartyVotesResponse"
    },
    "v1ObserveProposalVotesResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1ObserveProposalVotesResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1ObserveProposalVotesResponse"
    },
    "v1ObserveRewardsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1ObserveRewardsResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1ObserveRewardsResponse"
    },
    "v1OrdersSubscribeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1OrdersSubscribeResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1OrdersSubscribeResponse"
    },
    "v1PositionsSubscribeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1PositionsSubscribeResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1PositionsSubscribeResponse"
    },
    "v1TradesSubscribeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1TradesSubscribeResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1TradesSubscribeResponse"
    },
    "v1TransferResponsesSubscribeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/v1TransferResponsesSubscribeResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of v1TransferResponsesSubscribeResponse"
    }
  }
}
