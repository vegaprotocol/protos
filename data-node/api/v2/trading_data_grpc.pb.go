// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: data-node/api/v2/trading_data.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradingDataServiceClient is the client API for TradingDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingDataServiceClient interface {
	// Get a list of Orders by Market
	OrdersByMarket(ctx context.Context, in *OrdersByMarketRequest, opts ...grpc.CallOption) (*OrdersByMarketResponse, error)
	// Get all versions of the order by its orderID
	OrderVersionsByID(ctx context.Context, in *OrderVersionsByIDRequest, opts ...grpc.CallOption) (*OrderVersionsByIDResponse, error)
	// Get an aggregated list of the changes in balances in a set of accounts over time
	QueryBalanceHistory(ctx context.Context, in *QueryBalanceHistoryRequest, opts ...grpc.CallOption) (*QueryBalanceHistoryResponse, error)
	// Get Market Data History for a Market ID between given dates
	GetMarketDataHistoryByID(ctx context.Context, in *GetMarketDataHistoryByIDRequest, opts ...grpc.CallOption) (*GetMarketDataHistoryByIDResponse, error)
	// Get the current network limits (is bootstrapping finished, are proposals enabled etc..)
	GetNetworkLimits(ctx context.Context, in *GetNetworkLimitsRequest, opts ...grpc.CallOption) (*GetNetworkLimitsResponse, error)
	// -- Candles --
	// Get candle data for a given candle id
	GetCandleData(ctx context.Context, in *GetCandleDataRequest, opts ...grpc.CallOption) (*GetCandleDataResponse, error)
	// Subscribe to a stream of Candle updates
	SubscribeToCandleData(ctx context.Context, in *SubscribeToCandleDataRequest, opts ...grpc.CallOption) (TradingDataService_SubscribeToCandleDataClient, error)
	// Gets all available intervals for a given market along with the corresponding candle id
	GetCandlesForMarket(ctx context.Context, in *GetCandlesForMarketRequest, opts ...grpc.CallOption) (*GetCandlesForMarketResponse, error)
	// Gets the signature bundles that add a particular validator to the multisig contract
	GetERC20MultiSigSignerAddedBundles(ctx context.Context, in *GetERC20MultiSigSignerAddedBundlesRequest, opts ...grpc.CallOption) (*GetERC20MultiSigSignerAddedBundlesResponse, error)
	// Gets the signature bundles that remove a particular validator to the multisig contract
	GetERC20MultiSigSignerRemovedBundles(ctx context.Context, in *GetERC20MultiSigSignerRemovedBundlesRequest, opts ...grpc.CallOption) (*GetERC20MultiSigSignerRemovedBundlesResponse, error)
	// Get trades by market using a cursor based pagination model
	TradesByMarket(ctx context.Context, in *TradesByMarketRequest, opts ...grpc.CallOption) (*TradesByMarketResponse, error)
	// Get trades by party using a cursor based pagination model
	TradesByParty(ctx context.Context, in *TradesByPartyRequest, opts ...grpc.CallOption) (*TradesByPartyResponse, error)
	// Get all markets using a cursor based pagination model
	Markets(ctx context.Context, in *MarketsRequest, opts ...grpc.CallOption) (*MarketsResponse, error)
	// Get Parties using a cursor based pagination model
	Parties(ctx context.Context, in *PartiesRequest, opts ...grpc.CallOption) (*PartiesResponse, error)
}

type tradingDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingDataServiceClient(cc grpc.ClientConnInterface) TradingDataServiceClient {
	return &tradingDataServiceClient{cc}
}

func (c *tradingDataServiceClient) OrdersByMarket(ctx context.Context, in *OrdersByMarketRequest, opts ...grpc.CallOption) (*OrdersByMarketResponse, error) {
	out := new(OrdersByMarketResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/OrdersByMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OrderVersionsByID(ctx context.Context, in *OrderVersionsByIDRequest, opts ...grpc.CallOption) (*OrderVersionsByIDResponse, error) {
	out := new(OrderVersionsByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/OrderVersionsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) QueryBalanceHistory(ctx context.Context, in *QueryBalanceHistoryRequest, opts ...grpc.CallOption) (*QueryBalanceHistoryResponse, error) {
	out := new(QueryBalanceHistoryResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/QueryBalanceHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetMarketDataHistoryByID(ctx context.Context, in *GetMarketDataHistoryByIDRequest, opts ...grpc.CallOption) (*GetMarketDataHistoryByIDResponse, error) {
	out := new(GetMarketDataHistoryByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNetworkLimits(ctx context.Context, in *GetNetworkLimitsRequest, opts ...grpc.CallOption) (*GetNetworkLimitsResponse, error) {
	out := new(GetNetworkLimitsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetNetworkLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetCandleData(ctx context.Context, in *GetCandleDataRequest, opts ...grpc.CallOption) (*GetCandleDataResponse, error) {
	out := new(GetCandleDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetCandleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) SubscribeToCandleData(ctx context.Context, in *SubscribeToCandleDataRequest, opts ...grpc.CallOption) (TradingDataService_SubscribeToCandleDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[0], "/datanode.api.v2.TradingDataService/SubscribeToCandleData", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceSubscribeToCandleDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_SubscribeToCandleDataClient interface {
	Recv() (*SubscribeToCandleDataResponse, error)
	grpc.ClientStream
}

type tradingDataServiceSubscribeToCandleDataClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceSubscribeToCandleDataClient) Recv() (*SubscribeToCandleDataResponse, error) {
	m := new(SubscribeToCandleDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) GetCandlesForMarket(ctx context.Context, in *GetCandlesForMarketRequest, opts ...grpc.CallOption) (*GetCandlesForMarketResponse, error) {
	out := new(GetCandlesForMarketResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetCandlesForMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetERC20MultiSigSignerAddedBundles(ctx context.Context, in *GetERC20MultiSigSignerAddedBundlesRequest, opts ...grpc.CallOption) (*GetERC20MultiSigSignerAddedBundlesResponse, error) {
	out := new(GetERC20MultiSigSignerAddedBundlesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerAddedBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetERC20MultiSigSignerRemovedBundles(ctx context.Context, in *GetERC20MultiSigSignerRemovedBundlesRequest, opts ...grpc.CallOption) (*GetERC20MultiSigSignerRemovedBundlesResponse, error) {
	out := new(GetERC20MultiSigSignerRemovedBundlesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerRemovedBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) TradesByMarket(ctx context.Context, in *TradesByMarketRequest, opts ...grpc.CallOption) (*TradesByMarketResponse, error) {
	out := new(TradesByMarketResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/TradesByMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) TradesByParty(ctx context.Context, in *TradesByPartyRequest, opts ...grpc.CallOption) (*TradesByPartyResponse, error) {
	out := new(TradesByPartyResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/TradesByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Markets(ctx context.Context, in *MarketsRequest, opts ...grpc.CallOption) (*MarketsResponse, error) {
	out := new(MarketsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/Markets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Parties(ctx context.Context, in *PartiesRequest, opts ...grpc.CallOption) (*PartiesResponse, error) {
	out := new(PartiesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/Parties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingDataServiceServer is the server API for TradingDataService service.
// All implementations must embed UnimplementedTradingDataServiceServer
// for forward compatibility
type TradingDataServiceServer interface {
	// Get a list of Orders by Market
	OrdersByMarket(context.Context, *OrdersByMarketRequest) (*OrdersByMarketResponse, error)
	// Get all versions of the order by its orderID
	OrderVersionsByID(context.Context, *OrderVersionsByIDRequest) (*OrderVersionsByIDResponse, error)
	// Get an aggregated list of the changes in balances in a set of accounts over time
	QueryBalanceHistory(context.Context, *QueryBalanceHistoryRequest) (*QueryBalanceHistoryResponse, error)
	// Get Market Data History for a Market ID between given dates
	GetMarketDataHistoryByID(context.Context, *GetMarketDataHistoryByIDRequest) (*GetMarketDataHistoryByIDResponse, error)
	// Get the current network limits (is bootstrapping finished, are proposals enabled etc..)
	GetNetworkLimits(context.Context, *GetNetworkLimitsRequest) (*GetNetworkLimitsResponse, error)
	// -- Candles --
	// Get candle data for a given candle id
	GetCandleData(context.Context, *GetCandleDataRequest) (*GetCandleDataResponse, error)
	// Subscribe to a stream of Candle updates
	SubscribeToCandleData(*SubscribeToCandleDataRequest, TradingDataService_SubscribeToCandleDataServer) error
	// Gets all available intervals for a given market along with the corresponding candle id
	GetCandlesForMarket(context.Context, *GetCandlesForMarketRequest) (*GetCandlesForMarketResponse, error)
	// Gets the signature bundles that add a particular validator to the multisig contract
	GetERC20MultiSigSignerAddedBundles(context.Context, *GetERC20MultiSigSignerAddedBundlesRequest) (*GetERC20MultiSigSignerAddedBundlesResponse, error)
	// Gets the signature bundles that remove a particular validator to the multisig contract
	GetERC20MultiSigSignerRemovedBundles(context.Context, *GetERC20MultiSigSignerRemovedBundlesRequest) (*GetERC20MultiSigSignerRemovedBundlesResponse, error)
	// Get trades by market using a cursor based pagination model
	TradesByMarket(context.Context, *TradesByMarketRequest) (*TradesByMarketResponse, error)
	// Get trades by party using a cursor based pagination model
	TradesByParty(context.Context, *TradesByPartyRequest) (*TradesByPartyResponse, error)
	// Get all markets using a cursor based pagination model
	Markets(context.Context, *MarketsRequest) (*MarketsResponse, error)
	// Get Parties using a cursor based pagination model
	Parties(context.Context, *PartiesRequest) (*PartiesResponse, error)
	mustEmbedUnimplementedTradingDataServiceServer()
}

// UnimplementedTradingDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradingDataServiceServer struct {
}

func (UnimplementedTradingDataServiceServer) OrdersByMarket(context.Context, *OrdersByMarketRequest) (*OrdersByMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersByMarket not implemented")
}
func (UnimplementedTradingDataServiceServer) OrderVersionsByID(context.Context, *OrderVersionsByIDRequest) (*OrderVersionsByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderVersionsByID not implemented")
}
func (UnimplementedTradingDataServiceServer) QueryBalanceHistory(context.Context, *QueryBalanceHistoryRequest) (*QueryBalanceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBalanceHistory not implemented")
}
func (UnimplementedTradingDataServiceServer) GetMarketDataHistoryByID(context.Context, *GetMarketDataHistoryByIDRequest) (*GetMarketDataHistoryByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketDataHistoryByID not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNetworkLimits(context.Context, *GetNetworkLimitsRequest) (*GetNetworkLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkLimits not implemented")
}
func (UnimplementedTradingDataServiceServer) GetCandleData(context.Context, *GetCandleDataRequest) (*GetCandleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandleData not implemented")
}
func (UnimplementedTradingDataServiceServer) SubscribeToCandleData(*SubscribeToCandleDataRequest, TradingDataService_SubscribeToCandleDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToCandleData not implemented")
}
func (UnimplementedTradingDataServiceServer) GetCandlesForMarket(context.Context, *GetCandlesForMarketRequest) (*GetCandlesForMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandlesForMarket not implemented")
}
func (UnimplementedTradingDataServiceServer) GetERC20MultiSigSignerAddedBundles(context.Context, *GetERC20MultiSigSignerAddedBundlesRequest) (*GetERC20MultiSigSignerAddedBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetERC20MultiSigSignerAddedBundles not implemented")
}
func (UnimplementedTradingDataServiceServer) GetERC20MultiSigSignerRemovedBundles(context.Context, *GetERC20MultiSigSignerRemovedBundlesRequest) (*GetERC20MultiSigSignerRemovedBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetERC20MultiSigSignerRemovedBundles not implemented")
}
func (UnimplementedTradingDataServiceServer) TradesByMarket(context.Context, *TradesByMarketRequest) (*TradesByMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradesByMarket not implemented")
}
func (UnimplementedTradingDataServiceServer) TradesByParty(context.Context, *TradesByPartyRequest) (*TradesByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradesByParty not implemented")
}
func (UnimplementedTradingDataServiceServer) Markets(context.Context, *MarketsRequest) (*MarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Markets not implemented")
}
func (UnimplementedTradingDataServiceServer) Parties(context.Context, *PartiesRequest) (*PartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parties not implemented")
}
func (UnimplementedTradingDataServiceServer) mustEmbedUnimplementedTradingDataServiceServer() {}

// UnsafeTradingDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingDataServiceServer will
// result in compilation errors.
type UnsafeTradingDataServiceServer interface {
	mustEmbedUnimplementedTradingDataServiceServer()
}

func RegisterTradingDataServiceServer(s grpc.ServiceRegistrar, srv TradingDataServiceServer) {
	s.RegisterService(&TradingDataService_ServiceDesc, srv)
}

func _TradingDataService_OrdersByMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersByMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OrdersByMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/OrdersByMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OrdersByMarket(ctx, req.(*OrdersByMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OrderVersionsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderVersionsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OrderVersionsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/OrderVersionsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OrderVersionsByID(ctx, req.(*OrderVersionsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_QueryBalanceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).QueryBalanceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/QueryBalanceHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).QueryBalanceHistory(ctx, req.(*QueryBalanceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetMarketDataHistoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketDataHistoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetMarketDataHistoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetMarketDataHistoryByID(ctx, req.(*GetMarketDataHistoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNetworkLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNetworkLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetNetworkLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNetworkLimits(ctx, req.(*GetNetworkLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetCandleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetCandleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetCandleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetCandleData(ctx, req.(*GetCandleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_SubscribeToCandleData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToCandleDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).SubscribeToCandleData(m, &tradingDataServiceSubscribeToCandleDataServer{stream})
}

type TradingDataService_SubscribeToCandleDataServer interface {
	Send(*SubscribeToCandleDataResponse) error
	grpc.ServerStream
}

type tradingDataServiceSubscribeToCandleDataServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceSubscribeToCandleDataServer) Send(m *SubscribeToCandleDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_GetCandlesForMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandlesForMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetCandlesForMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetCandlesForMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetCandlesForMarket(ctx, req.(*GetCandlesForMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetERC20MultiSigSignerAddedBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetERC20MultiSigSignerAddedBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetERC20MultiSigSignerAddedBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerAddedBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetERC20MultiSigSignerAddedBundles(ctx, req.(*GetERC20MultiSigSignerAddedBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetERC20MultiSigSignerRemovedBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetERC20MultiSigSignerRemovedBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetERC20MultiSigSignerRemovedBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerRemovedBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetERC20MultiSigSignerRemovedBundles(ctx, req.(*GetERC20MultiSigSignerRemovedBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_TradesByMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesByMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).TradesByMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/TradesByMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).TradesByMarket(ctx, req.(*TradesByMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_TradesByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).TradesByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/TradesByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).TradesByParty(ctx, req.(*TradesByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Markets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Markets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/Markets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Markets(ctx, req.(*MarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Parties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Parties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/Parties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Parties(ctx, req.(*PartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradingDataService_ServiceDesc is the grpc.ServiceDesc for TradingDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datanode.api.v2.TradingDataService",
	HandlerType: (*TradingDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrdersByMarket",
			Handler:    _TradingDataService_OrdersByMarket_Handler,
		},
		{
			MethodName: "OrderVersionsByID",
			Handler:    _TradingDataService_OrderVersionsByID_Handler,
		},
		{
			MethodName: "QueryBalanceHistory",
			Handler:    _TradingDataService_QueryBalanceHistory_Handler,
		},
		{
			MethodName: "GetMarketDataHistoryByID",
			Handler:    _TradingDataService_GetMarketDataHistoryByID_Handler,
		},
		{
			MethodName: "GetNetworkLimits",
			Handler:    _TradingDataService_GetNetworkLimits_Handler,
		},
		{
			MethodName: "GetCandleData",
			Handler:    _TradingDataService_GetCandleData_Handler,
		},
		{
			MethodName: "GetCandlesForMarket",
			Handler:    _TradingDataService_GetCandlesForMarket_Handler,
		},
		{
			MethodName: "GetERC20MultiSigSignerAddedBundles",
			Handler:    _TradingDataService_GetERC20MultiSigSignerAddedBundles_Handler,
		},
		{
			MethodName: "GetERC20MultiSigSignerRemovedBundles",
			Handler:    _TradingDataService_GetERC20MultiSigSignerRemovedBundles_Handler,
		},
		{
			MethodName: "TradesByMarket",
			Handler:    _TradingDataService_TradesByMarket_Handler,
		},
		{
			MethodName: "TradesByParty",
			Handler:    _TradingDataService_TradesByParty_Handler,
		},
		{
			MethodName: "Markets",
			Handler:    _TradingDataService_Markets_Handler,
		},
		{
			MethodName: "Parties",
			Handler:    _TradingDataService_Parties_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToCandleData",
			Handler:       _TradingDataService_SubscribeToCandleData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data-node/api/v2/trading_data.proto",
}
