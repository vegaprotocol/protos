// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: data-node/api/v2/trading_data.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradingDataServiceClient is the client API for TradingDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingDataServiceClient interface {
	// -- Orders --
	// Gets the current version of an order, or optionally provide a version id to retrieve a given version.
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	// Get a list of orders that match the given filters
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	// List all versions of an order in the order history
	ListOrderVersions(ctx context.Context, in *ListOrderVersionsRequest, opts ...grpc.CallOption) (*ListOrderVersionsResponse, error)
	// -- Positions --
	// Get a list of Positions by Party using cursor based pagination
	ListPositions(ctx context.Context, in *ListPositionsRequest, opts ...grpc.CallOption) (*ListPositionsResponse, error)
	// -- Balances --
	// Get an aggregated list of the changes in balances in a set of accounts over time
	GetBalanceHistory(ctx context.Context, in *GetBalanceHistoryRequest, opts ...grpc.CallOption) (*GetBalanceHistoryResponse, error)
	// -- Market Data --
	// Get Market Data History for a Market ID between given dates using a cursor based pagination model
	GetMarketDataHistoryByID(ctx context.Context, in *GetMarketDataHistoryByIDRequest, opts ...grpc.CallOption) (*GetMarketDataHistoryByIDResponse, error)
	// Subscribe to a stream of Markets Data
	MarketsDataSubscribe(ctx context.Context, in *MarketsDataSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketsDataSubscribeClient, error)
	// -- Transfers --
	// List Transfers to/from/either a public key using a cursor based pagination model
	ListTransfers(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error)
	// -- Network Limits --
	// Get the current network limits (is bootstrapping finished, are proposals enabled etc..)
	GetNetworkLimits(ctx context.Context, in *GetNetworkLimitsRequest, opts ...grpc.CallOption) (*GetNetworkLimitsResponse, error)
	// -- Candles --
	// Get candle data for a given candle id
	ListCandleData(ctx context.Context, in *ListCandleDataRequest, opts ...grpc.CallOption) (*ListCandleDataResponse, error)
	// Subscribe to a stream of Candle updates
	SubscribeToCandleData(ctx context.Context, in *SubscribeToCandleDataRequest, opts ...grpc.CallOption) (TradingDataService_SubscribeToCandleDataClient, error)
	// Gets all available intervals for a given market along with the corresponding candle id
	GetCandlesForMarket(ctx context.Context, in *GetCandlesForMarketRequest, opts ...grpc.CallOption) (*GetCandlesForMarketResponse, error)
	// -- Votes --
	// Get Votes for a Party ID using a cursor based pagination model
	ListVotes(ctx context.Context, in *ListVotesRequest, opts ...grpc.CallOption) (*ListVotesResponse, error)
	// Subscribe to a stream of votes
	ObserveVotes(ctx context.Context, in *ObserveVotesRequest, opts ...grpc.CallOption) (TradingDataService_ObserveVotesClient, error)
	// -- ERC20 Multi Sig --
	// Gets the signature bundles that add a particular validator to the multisig contract
	GetERC20MultiSigSignerAddedBundles(ctx context.Context, in *GetERC20MultiSigSignerAddedBundlesRequest, opts ...grpc.CallOption) (*GetERC20MultiSigSignerAddedBundlesResponse, error)
	// Gets the signature bundles that remove a particular validator to the multisig contract
	GetERC20MultiSigSignerRemovedBundles(ctx context.Context, in *GetERC20MultiSigSignerRemovedBundlesRequest, opts ...grpc.CallOption) (*GetERC20MultiSigSignerRemovedBundlesResponse, error)
	// Gets the signature bundles that remove a particular validator to the multisig contract
	GetERC20ListAssetBundle(ctx context.Context, in *GetERC20ListAssetBundleRequest, opts ...grpc.CallOption) (*GetERC20ListAssetBundleResponse, error)
	// -- Trades --
	// Get trades by market using a cursor based pagination model
	GetTradesByMarket(ctx context.Context, in *GetTradesByMarketRequest, opts ...grpc.CallOption) (*GetTradesByMarketResponse, error)
	// Get trades by party using a cursor based pagination model
	GetTradesByParty(ctx context.Context, in *GetTradesByPartyRequest, opts ...grpc.CallOption) (*GetTradesByPartyResponse, error)
	// Get trades by market with the corresponding orderID using a cursor based pagination model
	GetTradesByOrderID(ctx context.Context, in *GetTradesByOrderIDRequest, opts ...grpc.CallOption) (*GetTradesByOrderIDResponse, error)
	// -- Oracles --
	// Get an oracle spec by ID.
	GetOracleSpecByID(ctx context.Context, in *GetOracleSpecByIDRequest, opts ...grpc.CallOption) (*GetOracleSpecByIDResponse, error)
	// Get the oracle specs
	ListOracleSpecs(ctx context.Context, in *ListOracleSpecsRequest, opts ...grpc.CallOption) (*ListOracleSpecsResponse, error)
	// Get oracle data that matched the given spec
	GetOracleDataBySpecID(ctx context.Context, in *GetOracleDataBySpecIDRequest, opts ...grpc.CallOption) (*GetOracleDataBySpecIDResponse, error)
	// Get all oracle data
	ListOracleData(ctx context.Context, in *ListOracleDataRequest, opts ...grpc.CallOption) (*ListOracleDataResponse, error)
	// Get cursor based paginated oracle specs data
	GetOracleSpecsConnection(ctx context.Context, in *GetOracleSpecsConnectionRequest, opts ...grpc.CallOption) (*GetOracleSpecsConnectionResponse, error)
	// Get cursor based paginated oracle data
	GetOracleDataConnection(ctx context.Context, in *GetOracleDataConnectionRequest, opts ...grpc.CallOption) (*GetOracleDataConnectionResponse, error)
	// -- Markets --
	// Get all markets using a cursor based pagination model
	ListMarkets(ctx context.Context, in *ListMarketsRequest, opts ...grpc.CallOption) (*ListMarketsResponse, error)
	// -- Parties --
	// Get Parties using a cursor based pagination model
	ListParties(ctx context.Context, in *ListPartiesRequest, opts ...grpc.CallOption) (*ListPartiesResponse, error)
	// -- Margin Levels --
	// Get Margin Levels using a cursor based pagination model
	ListMarginLevels(ctx context.Context, in *ListMarginLevelsRequest, opts ...grpc.CallOption) (*ListMarginLevelsResponse, error)
	// Get rewards
	ListRewards(ctx context.Context, in *ListRewardsRequest, opts ...grpc.CallOption) (*ListRewardsResponse, error)
	// Get reward summaries
	ListRewardSummaries(ctx context.Context, in *ListRewardSummariesRequest, opts ...grpc.CallOption) (*ListRewardSummariesResponse, error)
	// -- Deposits --
	ListDeposits(ctx context.Context, in *ListDepositsRequest, opts ...grpc.CallOption) (*ListDepositsResponse, error)
	// -- Withdrawals --
	ListWithdrawals(ctx context.Context, in *ListWithdrawalsRequest, opts ...grpc.CallOption) (*ListWithdrawalsResponse, error)
	// -- Assets --
	ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error)
	// -- Liquidity Provisions --
	ListLiquidityProvisions(ctx context.Context, in *ListLiquidityProvisionsRequest, opts ...grpc.CallOption) (*ListLiquidityProvisionsResponse, error)
	// -- Governance --
	// List proposals using a cursor based pagination model
	ListGovernanceData(ctx context.Context, in *ListGovernanceDataRequest, opts ...grpc.CallOption) (*ListGovernanceDataResponse, error)
	// -- Delegation --
	// List delegations
	ListDelegations(ctx context.Context, in *ListDelegationsRequest, opts ...grpc.CallOption) (*ListDelegationsResponse, error)
}

type tradingDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingDataServiceClient(cc grpc.ClientConnInterface) TradingDataServiceClient {
	return &tradingDataServiceClient{cc}
}

func (c *tradingDataServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListOrderVersions(ctx context.Context, in *ListOrderVersionsRequest, opts ...grpc.CallOption) (*ListOrderVersionsResponse, error) {
	out := new(ListOrderVersionsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListOrderVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListPositions(ctx context.Context, in *ListPositionsRequest, opts ...grpc.CallOption) (*ListPositionsResponse, error) {
	out := new(ListPositionsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetBalanceHistory(ctx context.Context, in *GetBalanceHistoryRequest, opts ...grpc.CallOption) (*GetBalanceHistoryResponse, error) {
	out := new(GetBalanceHistoryResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetBalanceHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetMarketDataHistoryByID(ctx context.Context, in *GetMarketDataHistoryByIDRequest, opts ...grpc.CallOption) (*GetMarketDataHistoryByIDResponse, error) {
	out := new(GetMarketDataHistoryByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) MarketsDataSubscribe(ctx context.Context, in *MarketsDataSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketsDataSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[0], "/datanode.api.v2.TradingDataService/MarketsDataSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceMarketsDataSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_MarketsDataSubscribeClient interface {
	Recv() (*MarketsDataSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceMarketsDataSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceMarketsDataSubscribeClient) Recv() (*MarketsDataSubscribeResponse, error) {
	m := new(MarketsDataSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ListTransfers(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error) {
	out := new(ListTransfersResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNetworkLimits(ctx context.Context, in *GetNetworkLimitsRequest, opts ...grpc.CallOption) (*GetNetworkLimitsResponse, error) {
	out := new(GetNetworkLimitsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetNetworkLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListCandleData(ctx context.Context, in *ListCandleDataRequest, opts ...grpc.CallOption) (*ListCandleDataResponse, error) {
	out := new(ListCandleDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListCandleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) SubscribeToCandleData(ctx context.Context, in *SubscribeToCandleDataRequest, opts ...grpc.CallOption) (TradingDataService_SubscribeToCandleDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[1], "/datanode.api.v2.TradingDataService/SubscribeToCandleData", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceSubscribeToCandleDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_SubscribeToCandleDataClient interface {
	Recv() (*SubscribeToCandleDataResponse, error)
	grpc.ClientStream
}

type tradingDataServiceSubscribeToCandleDataClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceSubscribeToCandleDataClient) Recv() (*SubscribeToCandleDataResponse, error) {
	m := new(SubscribeToCandleDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) GetCandlesForMarket(ctx context.Context, in *GetCandlesForMarketRequest, opts ...grpc.CallOption) (*GetCandlesForMarketResponse, error) {
	out := new(GetCandlesForMarketResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetCandlesForMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListVotes(ctx context.Context, in *ListVotesRequest, opts ...grpc.CallOption) (*ListVotesResponse, error) {
	out := new(ListVotesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObserveVotes(ctx context.Context, in *ObserveVotesRequest, opts ...grpc.CallOption) (TradingDataService_ObserveVotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[2], "/datanode.api.v2.TradingDataService/ObserveVotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveVotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveVotesClient interface {
	Recv() (*ObserveVotesResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveVotesClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveVotesClient) Recv() (*ObserveVotesResponse, error) {
	m := new(ObserveVotesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) GetERC20MultiSigSignerAddedBundles(ctx context.Context, in *GetERC20MultiSigSignerAddedBundlesRequest, opts ...grpc.CallOption) (*GetERC20MultiSigSignerAddedBundlesResponse, error) {
	out := new(GetERC20MultiSigSignerAddedBundlesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerAddedBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetERC20MultiSigSignerRemovedBundles(ctx context.Context, in *GetERC20MultiSigSignerRemovedBundlesRequest, opts ...grpc.CallOption) (*GetERC20MultiSigSignerRemovedBundlesResponse, error) {
	out := new(GetERC20MultiSigSignerRemovedBundlesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerRemovedBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetERC20ListAssetBundle(ctx context.Context, in *GetERC20ListAssetBundleRequest, opts ...grpc.CallOption) (*GetERC20ListAssetBundleResponse, error) {
	out := new(GetERC20ListAssetBundleResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetERC20ListAssetBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetTradesByMarket(ctx context.Context, in *GetTradesByMarketRequest, opts ...grpc.CallOption) (*GetTradesByMarketResponse, error) {
	out := new(GetTradesByMarketResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetTradesByMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetTradesByParty(ctx context.Context, in *GetTradesByPartyRequest, opts ...grpc.CallOption) (*GetTradesByPartyResponse, error) {
	out := new(GetTradesByPartyResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetTradesByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetTradesByOrderID(ctx context.Context, in *GetTradesByOrderIDRequest, opts ...grpc.CallOption) (*GetTradesByOrderIDResponse, error) {
	out := new(GetTradesByOrderIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetTradesByOrderID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetOracleSpecByID(ctx context.Context, in *GetOracleSpecByIDRequest, opts ...grpc.CallOption) (*GetOracleSpecByIDResponse, error) {
	out := new(GetOracleSpecByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetOracleSpecByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListOracleSpecs(ctx context.Context, in *ListOracleSpecsRequest, opts ...grpc.CallOption) (*ListOracleSpecsResponse, error) {
	out := new(ListOracleSpecsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListOracleSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetOracleDataBySpecID(ctx context.Context, in *GetOracleDataBySpecIDRequest, opts ...grpc.CallOption) (*GetOracleDataBySpecIDResponse, error) {
	out := new(GetOracleDataBySpecIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetOracleDataBySpecID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListOracleData(ctx context.Context, in *ListOracleDataRequest, opts ...grpc.CallOption) (*ListOracleDataResponse, error) {
	out := new(ListOracleDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListOracleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetOracleSpecsConnection(ctx context.Context, in *GetOracleSpecsConnectionRequest, opts ...grpc.CallOption) (*GetOracleSpecsConnectionResponse, error) {
	out := new(GetOracleSpecsConnectionResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetOracleSpecsConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetOracleDataConnection(ctx context.Context, in *GetOracleDataConnectionRequest, opts ...grpc.CallOption) (*GetOracleDataConnectionResponse, error) {
	out := new(GetOracleDataConnectionResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetOracleDataConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListMarkets(ctx context.Context, in *ListMarketsRequest, opts ...grpc.CallOption) (*ListMarketsResponse, error) {
	out := new(ListMarketsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListParties(ctx context.Context, in *ListPartiesRequest, opts ...grpc.CallOption) (*ListPartiesResponse, error) {
	out := new(ListPartiesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListParties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListMarginLevels(ctx context.Context, in *ListMarginLevelsRequest, opts ...grpc.CallOption) (*ListMarginLevelsResponse, error) {
	out := new(ListMarginLevelsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListMarginLevels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListRewards(ctx context.Context, in *ListRewardsRequest, opts ...grpc.CallOption) (*ListRewardsResponse, error) {
	out := new(ListRewardsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListRewardSummaries(ctx context.Context, in *ListRewardSummariesRequest, opts ...grpc.CallOption) (*ListRewardSummariesResponse, error) {
	out := new(ListRewardSummariesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListRewardSummaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListDeposits(ctx context.Context, in *ListDepositsRequest, opts ...grpc.CallOption) (*ListDepositsResponse, error) {
	out := new(ListDepositsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListWithdrawals(ctx context.Context, in *ListWithdrawalsRequest, opts ...grpc.CallOption) (*ListWithdrawalsResponse, error) {
	out := new(ListWithdrawalsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListWithdrawals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error) {
	out := new(ListAssetsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListLiquidityProvisions(ctx context.Context, in *ListLiquidityProvisionsRequest, opts ...grpc.CallOption) (*ListLiquidityProvisionsResponse, error) {
	out := new(ListLiquidityProvisionsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListLiquidityProvisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListGovernanceData(ctx context.Context, in *ListGovernanceDataRequest, opts ...grpc.CallOption) (*ListGovernanceDataResponse, error) {
	out := new(ListGovernanceDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListGovernanceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListDelegations(ctx context.Context, in *ListDelegationsRequest, opts ...grpc.CallOption) (*ListDelegationsResponse, error) {
	out := new(ListDelegationsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingDataServiceServer is the server API for TradingDataService service.
// All implementations must embed UnimplementedTradingDataServiceServer
// for forward compatibility
type TradingDataServiceServer interface {
	// -- Orders --
	// Gets the current version of an order, or optionally provide a version id to retrieve a given version.
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	// Get a list of orders that match the given filters
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	// List all versions of an order in the order history
	ListOrderVersions(context.Context, *ListOrderVersionsRequest) (*ListOrderVersionsResponse, error)
	// -- Positions --
	// Get a list of Positions by Party using cursor based pagination
	ListPositions(context.Context, *ListPositionsRequest) (*ListPositionsResponse, error)
	// -- Balances --
	// Get an aggregated list of the changes in balances in a set of accounts over time
	GetBalanceHistory(context.Context, *GetBalanceHistoryRequest) (*GetBalanceHistoryResponse, error)
	// -- Market Data --
	// Get Market Data History for a Market ID between given dates using a cursor based pagination model
	GetMarketDataHistoryByID(context.Context, *GetMarketDataHistoryByIDRequest) (*GetMarketDataHistoryByIDResponse, error)
	// Subscribe to a stream of Markets Data
	MarketsDataSubscribe(*MarketsDataSubscribeRequest, TradingDataService_MarketsDataSubscribeServer) error
	// -- Transfers --
	// List Transfers to/from/either a public key using a cursor based pagination model
	ListTransfers(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error)
	// -- Network Limits --
	// Get the current network limits (is bootstrapping finished, are proposals enabled etc..)
	GetNetworkLimits(context.Context, *GetNetworkLimitsRequest) (*GetNetworkLimitsResponse, error)
	// -- Candles --
	// Get candle data for a given candle id
	ListCandleData(context.Context, *ListCandleDataRequest) (*ListCandleDataResponse, error)
	// Subscribe to a stream of Candle updates
	SubscribeToCandleData(*SubscribeToCandleDataRequest, TradingDataService_SubscribeToCandleDataServer) error
	// Gets all available intervals for a given market along with the corresponding candle id
	GetCandlesForMarket(context.Context, *GetCandlesForMarketRequest) (*GetCandlesForMarketResponse, error)
	// -- Votes --
	// Get Votes for a Party ID using a cursor based pagination model
	ListVotes(context.Context, *ListVotesRequest) (*ListVotesResponse, error)
	// Subscribe to a stream of votes
	ObserveVotes(*ObserveVotesRequest, TradingDataService_ObserveVotesServer) error
	// -- ERC20 Multi Sig --
	// Gets the signature bundles that add a particular validator to the multisig contract
	GetERC20MultiSigSignerAddedBundles(context.Context, *GetERC20MultiSigSignerAddedBundlesRequest) (*GetERC20MultiSigSignerAddedBundlesResponse, error)
	// Gets the signature bundles that remove a particular validator to the multisig contract
	GetERC20MultiSigSignerRemovedBundles(context.Context, *GetERC20MultiSigSignerRemovedBundlesRequest) (*GetERC20MultiSigSignerRemovedBundlesResponse, error)
	// Gets the signature bundles that remove a particular validator to the multisig contract
	GetERC20ListAssetBundle(context.Context, *GetERC20ListAssetBundleRequest) (*GetERC20ListAssetBundleResponse, error)
	// -- Trades --
	// Get trades by market using a cursor based pagination model
	GetTradesByMarket(context.Context, *GetTradesByMarketRequest) (*GetTradesByMarketResponse, error)
	// Get trades by party using a cursor based pagination model
	GetTradesByParty(context.Context, *GetTradesByPartyRequest) (*GetTradesByPartyResponse, error)
	// Get trades by market with the corresponding orderID using a cursor based pagination model
	GetTradesByOrderID(context.Context, *GetTradesByOrderIDRequest) (*GetTradesByOrderIDResponse, error)
	// -- Oracles --
	// Get an oracle spec by ID.
	GetOracleSpecByID(context.Context, *GetOracleSpecByIDRequest) (*GetOracleSpecByIDResponse, error)
	// Get the oracle specs
	ListOracleSpecs(context.Context, *ListOracleSpecsRequest) (*ListOracleSpecsResponse, error)
	// Get oracle data that matched the given spec
	GetOracleDataBySpecID(context.Context, *GetOracleDataBySpecIDRequest) (*GetOracleDataBySpecIDResponse, error)
	// Get all oracle data
	ListOracleData(context.Context, *ListOracleDataRequest) (*ListOracleDataResponse, error)
	// Get cursor based paginated oracle specs data
	GetOracleSpecsConnection(context.Context, *GetOracleSpecsConnectionRequest) (*GetOracleSpecsConnectionResponse, error)
	// Get cursor based paginated oracle data
	GetOracleDataConnection(context.Context, *GetOracleDataConnectionRequest) (*GetOracleDataConnectionResponse, error)
	// -- Markets --
	// Get all markets using a cursor based pagination model
	ListMarkets(context.Context, *ListMarketsRequest) (*ListMarketsResponse, error)
	// -- Parties --
	// Get Parties using a cursor based pagination model
	ListParties(context.Context, *ListPartiesRequest) (*ListPartiesResponse, error)
	// -- Margin Levels --
	// Get Margin Levels using a cursor based pagination model
	ListMarginLevels(context.Context, *ListMarginLevelsRequest) (*ListMarginLevelsResponse, error)
	// Get rewards
	ListRewards(context.Context, *ListRewardsRequest) (*ListRewardsResponse, error)
	// Get reward summaries
	ListRewardSummaries(context.Context, *ListRewardSummariesRequest) (*ListRewardSummariesResponse, error)
	// -- Deposits --
	ListDeposits(context.Context, *ListDepositsRequest) (*ListDepositsResponse, error)
	// -- Withdrawals --
	ListWithdrawals(context.Context, *ListWithdrawalsRequest) (*ListWithdrawalsResponse, error)
	// -- Assets --
	ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error)
	// -- Liquidity Provisions --
	ListLiquidityProvisions(context.Context, *ListLiquidityProvisionsRequest) (*ListLiquidityProvisionsResponse, error)
	// -- Governance --
	// List proposals using a cursor based pagination model
	ListGovernanceData(context.Context, *ListGovernanceDataRequest) (*ListGovernanceDataResponse, error)
	// -- Delegation --
	// List delegations
	ListDelegations(context.Context, *ListDelegationsRequest) (*ListDelegationsResponse, error)
	mustEmbedUnimplementedTradingDataServiceServer()
}

// UnimplementedTradingDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradingDataServiceServer struct {
}

func (UnimplementedTradingDataServiceServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedTradingDataServiceServer) ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedTradingDataServiceServer) ListOrderVersions(context.Context, *ListOrderVersionsRequest) (*ListOrderVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrderVersions not implemented")
}
func (UnimplementedTradingDataServiceServer) ListPositions(context.Context, *ListPositionsRequest) (*ListPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPositions not implemented")
}
func (UnimplementedTradingDataServiceServer) GetBalanceHistory(context.Context, *GetBalanceHistoryRequest) (*GetBalanceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceHistory not implemented")
}
func (UnimplementedTradingDataServiceServer) GetMarketDataHistoryByID(context.Context, *GetMarketDataHistoryByIDRequest) (*GetMarketDataHistoryByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketDataHistoryByID not implemented")
}
func (UnimplementedTradingDataServiceServer) MarketsDataSubscribe(*MarketsDataSubscribeRequest, TradingDataService_MarketsDataSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method MarketsDataSubscribe not implemented")
}
func (UnimplementedTradingDataServiceServer) ListTransfers(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfers not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNetworkLimits(context.Context, *GetNetworkLimitsRequest) (*GetNetworkLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkLimits not implemented")
}
func (UnimplementedTradingDataServiceServer) ListCandleData(context.Context, *ListCandleDataRequest) (*ListCandleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCandleData not implemented")
}
func (UnimplementedTradingDataServiceServer) SubscribeToCandleData(*SubscribeToCandleDataRequest, TradingDataService_SubscribeToCandleDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToCandleData not implemented")
}
func (UnimplementedTradingDataServiceServer) GetCandlesForMarket(context.Context, *GetCandlesForMarketRequest) (*GetCandlesForMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandlesForMarket not implemented")
}
func (UnimplementedTradingDataServiceServer) ListVotes(context.Context, *ListVotesRequest) (*ListVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVotes not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveVotes(*ObserveVotesRequest, TradingDataService_ObserveVotesServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveVotes not implemented")
}
func (UnimplementedTradingDataServiceServer) GetERC20MultiSigSignerAddedBundles(context.Context, *GetERC20MultiSigSignerAddedBundlesRequest) (*GetERC20MultiSigSignerAddedBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetERC20MultiSigSignerAddedBundles not implemented")
}
func (UnimplementedTradingDataServiceServer) GetERC20MultiSigSignerRemovedBundles(context.Context, *GetERC20MultiSigSignerRemovedBundlesRequest) (*GetERC20MultiSigSignerRemovedBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetERC20MultiSigSignerRemovedBundles not implemented")
}
func (UnimplementedTradingDataServiceServer) GetERC20ListAssetBundle(context.Context, *GetERC20ListAssetBundleRequest) (*GetERC20ListAssetBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetERC20ListAssetBundle not implemented")
}
func (UnimplementedTradingDataServiceServer) GetTradesByMarket(context.Context, *GetTradesByMarketRequest) (*GetTradesByMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradesByMarket not implemented")
}
func (UnimplementedTradingDataServiceServer) GetTradesByParty(context.Context, *GetTradesByPartyRequest) (*GetTradesByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradesByParty not implemented")
}
func (UnimplementedTradingDataServiceServer) GetTradesByOrderID(context.Context, *GetTradesByOrderIDRequest) (*GetTradesByOrderIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradesByOrderID not implemented")
}
func (UnimplementedTradingDataServiceServer) GetOracleSpecByID(context.Context, *GetOracleSpecByIDRequest) (*GetOracleSpecByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleSpecByID not implemented")
}
func (UnimplementedTradingDataServiceServer) ListOracleSpecs(context.Context, *ListOracleSpecsRequest) (*ListOracleSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOracleSpecs not implemented")
}
func (UnimplementedTradingDataServiceServer) GetOracleDataBySpecID(context.Context, *GetOracleDataBySpecIDRequest) (*GetOracleDataBySpecIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleDataBySpecID not implemented")
}
func (UnimplementedTradingDataServiceServer) ListOracleData(context.Context, *ListOracleDataRequest) (*ListOracleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOracleData not implemented")
}
func (UnimplementedTradingDataServiceServer) GetOracleSpecsConnection(context.Context, *GetOracleSpecsConnectionRequest) (*GetOracleSpecsConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleSpecsConnection not implemented")
}
func (UnimplementedTradingDataServiceServer) GetOracleDataConnection(context.Context, *GetOracleDataConnectionRequest) (*GetOracleDataConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleDataConnection not implemented")
}
func (UnimplementedTradingDataServiceServer) ListMarkets(context.Context, *ListMarketsRequest) (*ListMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMarkets not implemented")
}
func (UnimplementedTradingDataServiceServer) ListParties(context.Context, *ListPartiesRequest) (*ListPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParties not implemented")
}
func (UnimplementedTradingDataServiceServer) ListMarginLevels(context.Context, *ListMarginLevelsRequest) (*ListMarginLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMarginLevels not implemented")
}
func (UnimplementedTradingDataServiceServer) ListRewards(context.Context, *ListRewardsRequest) (*ListRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRewards not implemented")
}
func (UnimplementedTradingDataServiceServer) ListRewardSummaries(context.Context, *ListRewardSummariesRequest) (*ListRewardSummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRewardSummaries not implemented")
}
func (UnimplementedTradingDataServiceServer) ListDeposits(context.Context, *ListDepositsRequest) (*ListDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeposits not implemented")
}
func (UnimplementedTradingDataServiceServer) ListWithdrawals(context.Context, *ListWithdrawalsRequest) (*ListWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawals not implemented")
}
func (UnimplementedTradingDataServiceServer) ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedTradingDataServiceServer) ListLiquidityProvisions(context.Context, *ListLiquidityProvisionsRequest) (*ListLiquidityProvisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLiquidityProvisions not implemented")
}
func (UnimplementedTradingDataServiceServer) ListGovernanceData(context.Context, *ListGovernanceDataRequest) (*ListGovernanceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGovernanceData not implemented")
}
func (UnimplementedTradingDataServiceServer) ListDelegations(context.Context, *ListDelegationsRequest) (*ListDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDelegations not implemented")
}
func (UnimplementedTradingDataServiceServer) mustEmbedUnimplementedTradingDataServiceServer() {}

// UnsafeTradingDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingDataServiceServer will
// result in compilation errors.
type UnsafeTradingDataServiceServer interface {
	mustEmbedUnimplementedTradingDataServiceServer()
}

func RegisterTradingDataServiceServer(s grpc.ServiceRegistrar, srv TradingDataServiceServer) {
	s.RegisterService(&TradingDataService_ServiceDesc, srv)
}

func _TradingDataService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListOrderVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListOrderVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListOrderVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListOrderVersions(ctx, req.(*ListOrderVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListPositions(ctx, req.(*ListPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetBalanceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetBalanceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetBalanceHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetBalanceHistory(ctx, req.(*GetBalanceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetMarketDataHistoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketDataHistoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetMarketDataHistoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetMarketDataHistoryByID(ctx, req.(*GetMarketDataHistoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_MarketsDataSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketsDataSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).MarketsDataSubscribe(m, &tradingDataServiceMarketsDataSubscribeServer{stream})
}

type TradingDataService_MarketsDataSubscribeServer interface {
	Send(*MarketsDataSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceMarketsDataSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceMarketsDataSubscribeServer) Send(m *MarketsDataSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ListTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListTransfers(ctx, req.(*ListTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNetworkLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNetworkLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetNetworkLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNetworkLimits(ctx, req.(*GetNetworkLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListCandleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCandleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListCandleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListCandleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListCandleData(ctx, req.(*ListCandleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_SubscribeToCandleData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToCandleDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).SubscribeToCandleData(m, &tradingDataServiceSubscribeToCandleDataServer{stream})
}

type TradingDataService_SubscribeToCandleDataServer interface {
	Send(*SubscribeToCandleDataResponse) error
	grpc.ServerStream
}

type tradingDataServiceSubscribeToCandleDataServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceSubscribeToCandleDataServer) Send(m *SubscribeToCandleDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_GetCandlesForMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandlesForMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetCandlesForMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetCandlesForMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetCandlesForMarket(ctx, req.(*GetCandlesForMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListVotes(ctx, req.(*ListVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObserveVotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveVotesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveVotes(m, &tradingDataServiceObserveVotesServer{stream})
}

type TradingDataService_ObserveVotesServer interface {
	Send(*ObserveVotesResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveVotesServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveVotesServer) Send(m *ObserveVotesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_GetERC20MultiSigSignerAddedBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetERC20MultiSigSignerAddedBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetERC20MultiSigSignerAddedBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerAddedBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetERC20MultiSigSignerAddedBundles(ctx, req.(*GetERC20MultiSigSignerAddedBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetERC20MultiSigSignerRemovedBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetERC20MultiSigSignerRemovedBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetERC20MultiSigSignerRemovedBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerRemovedBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetERC20MultiSigSignerRemovedBundles(ctx, req.(*GetERC20MultiSigSignerRemovedBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetERC20ListAssetBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetERC20ListAssetBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetERC20ListAssetBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetERC20ListAssetBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetERC20ListAssetBundle(ctx, req.(*GetERC20ListAssetBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetTradesByMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradesByMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetTradesByMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetTradesByMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetTradesByMarket(ctx, req.(*GetTradesByMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetTradesByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradesByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetTradesByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetTradesByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetTradesByParty(ctx, req.(*GetTradesByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetTradesByOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradesByOrderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetTradesByOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetTradesByOrderID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetTradesByOrderID(ctx, req.(*GetTradesByOrderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetOracleSpecByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOracleSpecByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetOracleSpecByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetOracleSpecByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetOracleSpecByID(ctx, req.(*GetOracleSpecByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListOracleSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOracleSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListOracleSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListOracleSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListOracleSpecs(ctx, req.(*ListOracleSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetOracleDataBySpecID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOracleDataBySpecIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetOracleDataBySpecID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetOracleDataBySpecID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetOracleDataBySpecID(ctx, req.(*GetOracleDataBySpecIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListOracleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOracleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListOracleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListOracleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListOracleData(ctx, req.(*ListOracleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetOracleSpecsConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOracleSpecsConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetOracleSpecsConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetOracleSpecsConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetOracleSpecsConnection(ctx, req.(*GetOracleSpecsConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetOracleDataConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOracleDataConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetOracleDataConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetOracleDataConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetOracleDataConnection(ctx, req.(*GetOracleDataConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListMarkets(ctx, req.(*ListMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListParties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListParties(ctx, req.(*ListPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListMarginLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMarginLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListMarginLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListMarginLevels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListMarginLevels(ctx, req.(*ListMarginLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListRewards(ctx, req.(*ListRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListRewardSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRewardSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListRewardSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListRewardSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListRewardSummaries(ctx, req.(*ListRewardSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListDeposits(ctx, req.(*ListDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListWithdrawals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListWithdrawals(ctx, req.(*ListWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListAssets(ctx, req.(*ListAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListLiquidityProvisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLiquidityProvisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListLiquidityProvisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListLiquidityProvisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListLiquidityProvisions(ctx, req.(*ListLiquidityProvisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListGovernanceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGovernanceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListGovernanceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListGovernanceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListGovernanceData(ctx, req.(*ListGovernanceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListDelegations(ctx, req.(*ListDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradingDataService_ServiceDesc is the grpc.ServiceDesc for TradingDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datanode.api.v2.TradingDataService",
	HandlerType: (*TradingDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrder",
			Handler:    _TradingDataService_GetOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _TradingDataService_ListOrders_Handler,
		},
		{
			MethodName: "ListOrderVersions",
			Handler:    _TradingDataService_ListOrderVersions_Handler,
		},
		{
			MethodName: "ListPositions",
			Handler:    _TradingDataService_ListPositions_Handler,
		},
		{
			MethodName: "GetBalanceHistory",
			Handler:    _TradingDataService_GetBalanceHistory_Handler,
		},
		{
			MethodName: "GetMarketDataHistoryByID",
			Handler:    _TradingDataService_GetMarketDataHistoryByID_Handler,
		},
		{
			MethodName: "ListTransfers",
			Handler:    _TradingDataService_ListTransfers_Handler,
		},
		{
			MethodName: "GetNetworkLimits",
			Handler:    _TradingDataService_GetNetworkLimits_Handler,
		},
		{
			MethodName: "ListCandleData",
			Handler:    _TradingDataService_ListCandleData_Handler,
		},
		{
			MethodName: "GetCandlesForMarket",
			Handler:    _TradingDataService_GetCandlesForMarket_Handler,
		},
		{
			MethodName: "ListVotes",
			Handler:    _TradingDataService_ListVotes_Handler,
		},
		{
			MethodName: "GetERC20MultiSigSignerAddedBundles",
			Handler:    _TradingDataService_GetERC20MultiSigSignerAddedBundles_Handler,
		},
		{
			MethodName: "GetERC20MultiSigSignerRemovedBundles",
			Handler:    _TradingDataService_GetERC20MultiSigSignerRemovedBundles_Handler,
		},
		{
			MethodName: "GetERC20ListAssetBundle",
			Handler:    _TradingDataService_GetERC20ListAssetBundle_Handler,
		},
		{
			MethodName: "GetTradesByMarket",
			Handler:    _TradingDataService_GetTradesByMarket_Handler,
		},
		{
			MethodName: "GetTradesByParty",
			Handler:    _TradingDataService_GetTradesByParty_Handler,
		},
		{
			MethodName: "GetTradesByOrderID",
			Handler:    _TradingDataService_GetTradesByOrderID_Handler,
		},
		{
			MethodName: "GetOracleSpecByID",
			Handler:    _TradingDataService_GetOracleSpecByID_Handler,
		},
		{
			MethodName: "ListOracleSpecs",
			Handler:    _TradingDataService_ListOracleSpecs_Handler,
		},
		{
			MethodName: "GetOracleDataBySpecID",
			Handler:    _TradingDataService_GetOracleDataBySpecID_Handler,
		},
		{
			MethodName: "ListOracleData",
			Handler:    _TradingDataService_ListOracleData_Handler,
		},
		{
			MethodName: "GetOracleSpecsConnection",
			Handler:    _TradingDataService_GetOracleSpecsConnection_Handler,
		},
		{
			MethodName: "GetOracleDataConnection",
			Handler:    _TradingDataService_GetOracleDataConnection_Handler,
		},
		{
			MethodName: "ListMarkets",
			Handler:    _TradingDataService_ListMarkets_Handler,
		},
		{
			MethodName: "ListParties",
			Handler:    _TradingDataService_ListParties_Handler,
		},
		{
			MethodName: "ListMarginLevels",
			Handler:    _TradingDataService_ListMarginLevels_Handler,
		},
		{
			MethodName: "ListRewards",
			Handler:    _TradingDataService_ListRewards_Handler,
		},
		{
			MethodName: "ListRewardSummaries",
			Handler:    _TradingDataService_ListRewardSummaries_Handler,
		},
		{
			MethodName: "ListDeposits",
			Handler:    _TradingDataService_ListDeposits_Handler,
		},
		{
			MethodName: "ListWithdrawals",
			Handler:    _TradingDataService_ListWithdrawals_Handler,
		},
		{
			MethodName: "ListAssets",
			Handler:    _TradingDataService_ListAssets_Handler,
		},
		{
			MethodName: "ListLiquidityProvisions",
			Handler:    _TradingDataService_ListLiquidityProvisions_Handler,
		},
		{
			MethodName: "ListGovernanceData",
			Handler:    _TradingDataService_ListGovernanceData_Handler,
		},
		{
			MethodName: "ListDelegations",
			Handler:    _TradingDataService_ListDelegations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MarketsDataSubscribe",
			Handler:       _TradingDataService_MarketsDataSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToCandleData",
			Handler:       _TradingDataService_SubscribeToCandleData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveVotes",
			Handler:       _TradingDataService_ObserveVotes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data-node/api/v2/trading_data.proto",
}
