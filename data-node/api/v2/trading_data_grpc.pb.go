// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: data-node/api/v2/trading_data.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradingDataServiceClient is the client API for TradingDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingDataServiceClient interface {
	// -- Orders --
	// Get a list of Orders by Market
	GetOrdersByMarket(ctx context.Context, in *GetOrdersByMarketRequest, opts ...grpc.CallOption) (*GetOrdersByMarketResponse, error)
	// Get all versions of the order by its orderID
	GetOrderVersionsByID(ctx context.Context, in *GetOrderVersionsByIDRequest, opts ...grpc.CallOption) (*GetOrderVersionsByIDResponse, error)
	// Get a list of Orders by Market using cursor based pagination
	GetOrdersByMarketPaged(ctx context.Context, in *GetOrdersByMarketPagedRequest, opts ...grpc.CallOption) (*GetOrdersByMarketPagedResponse, error)
	// Get a list of Orders by Party using cursor based pagination
	GetOrdersByPartyPaged(ctx context.Context, in *GetOrdersByPartyPagedRequest, opts ...grpc.CallOption) (*GetOrdersByPartyPagedResponse, error)
	// Get all versions of the order by its orderID using cursor based pagination
	GetOrderVersionsByIDPaged(ctx context.Context, in *GetOrderVersionsByIDPagedRequest, opts ...grpc.CallOption) (*GetOrderVersionsByIDPagedResponse, error)
	// -- Positions --
	// Get a list of Positions by Party using cursor based pagination
	GetPositionsByPartyPaged(ctx context.Context, in *GetPositionsByPartyPagedRequest, opts ...grpc.CallOption) (*GetPositionsByPartyPagedResponse, error)
	// -- Balances --
	// Get an aggregated list of the changes in balances in a set of accounts over time
	GetBalanceHistory(ctx context.Context, in *GetBalanceHistoryRequest, opts ...grpc.CallOption) (*GetBalanceHistoryResponse, error)
	// -- Market Data --
	// Get Market Data History for a Market ID between given dates using a cursor based pagination model
	GetMarketDataHistoryByID(ctx context.Context, in *GetMarketDataHistoryByIDRequest, opts ...grpc.CallOption) (*GetMarketDataHistoryByIDResponse, error)
	// Subscribe to a stream of Markets Data
	MarketsDataSubscribe(ctx context.Context, in *MarketsDataSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketsDataSubscribeClient, error)
	// -- Transfers --
	// Get Transfersfor a Market ID for a public key using a cursor based pagination model
	GetTransfers(ctx context.Context, in *GetTransfersRequest, opts ...grpc.CallOption) (*GetTransfersResponse, error)
	// -- Network Limits --
	// Get the current network limits (is bootstrapping finished, are proposals enabled etc..)
	GetNetworkLimits(ctx context.Context, in *GetNetworkLimitsRequest, opts ...grpc.CallOption) (*GetNetworkLimitsResponse, error)
	// -- Candles --
	// Get candle data for a given candle id
	GetCandleData(ctx context.Context, in *GetCandleDataRequest, opts ...grpc.CallOption) (*GetCandleDataResponse, error)
	// Subscribe to a stream of Candle updates
	SubscribeToCandleData(ctx context.Context, in *SubscribeToCandleDataRequest, opts ...grpc.CallOption) (TradingDataService_SubscribeToCandleDataClient, error)
	// Gets all available intervals for a given market along with the corresponding candle id
	GetCandlesForMarket(ctx context.Context, in *GetCandlesForMarketRequest, opts ...grpc.CallOption) (*GetCandlesForMarketResponse, error)
	// -- Votes --
	// Get Votes for a Party ID using a cursor based pagination model
	GetVotes(ctx context.Context, in *GetVotesRequest, opts ...grpc.CallOption) (*GetVotesResponse, error)
	// -- ERC20 Multi Sig --
	// Gets the signature bundles that add a particular validator to the multisig contract
	GetERC20MultiSigSignerAddedBundles(ctx context.Context, in *GetERC20MultiSigSignerAddedBundlesRequest, opts ...grpc.CallOption) (*GetERC20MultiSigSignerAddedBundlesResponse, error)
	// Gets the signature bundles that remove a particular validator to the multisig contract
	GetERC20MultiSigSignerRemovedBundles(ctx context.Context, in *GetERC20MultiSigSignerRemovedBundlesRequest, opts ...grpc.CallOption) (*GetERC20MultiSigSignerRemovedBundlesResponse, error)
	// -- Trades --
	// Get trades by market using a cursor based pagination model
	GetTradesByMarket(ctx context.Context, in *GetTradesByMarketRequest, opts ...grpc.CallOption) (*GetTradesByMarketResponse, error)
	// Get trades by party using a cursor based pagination model
	GetTradesByParty(ctx context.Context, in *GetTradesByPartyRequest, opts ...grpc.CallOption) (*GetTradesByPartyResponse, error)
	// Get trades by market with the corresponding orderID using a cursor based pagination model
	GetTradesByOrderID(ctx context.Context, in *GetTradesByOrderIDRequest, opts ...grpc.CallOption) (*GetTradesByOrderIDResponse, error)
	// -- Oracles --
	// Get an oracle spec by ID.
	GetOracleSpecByID(ctx context.Context, in *GetOracleSpecByIDRequest, opts ...grpc.CallOption) (*GetOracleSpecByIDResponse, error)
	// Get the oracle specs
	ListOracleSpecs(ctx context.Context, in *ListOracleSpecsRequest, opts ...grpc.CallOption) (*ListOracleSpecsResponse, error)
	// Get oracle data that matched the given spec
	GetOracleDataBySpecID(ctx context.Context, in *GetOracleDataBySpecIDRequest, opts ...grpc.CallOption) (*GetOracleDataBySpecIDResponse, error)
	// Get all oracle data
	ListOracleData(ctx context.Context, in *ListOracleDataRequest, opts ...grpc.CallOption) (*ListOracleDataResponse, error)
	// -- Markets --
	// Get all markets using a cursor based pagination model
	GetMarkets(ctx context.Context, in *GetMarketsRequest, opts ...grpc.CallOption) (*GetMarketsResponse, error)
	// -- Parties --
	// Get Parties using a cursor based pagination model
	GetParties(ctx context.Context, in *GetPartiesRequest, opts ...grpc.CallOption) (*GetPartiesResponse, error)
	// -- Margin Levels --
	// Get Margin Levels using a cursor based pagination model
	GetMarginLevels(ctx context.Context, in *GetMarginLevelsRequest, opts ...grpc.CallOption) (*GetMarginLevelsResponse, error)
	// Get rewards
	GetRewards(ctx context.Context, in *GetRewardsRequest, opts ...grpc.CallOption) (*GetRewardsResponse, error)
	// Get reward summaries
	GetRewardSummaries(ctx context.Context, in *GetRewardSummariesRequest, opts ...grpc.CallOption) (*GetRewardSummariesResponse, error)
}

type tradingDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingDataServiceClient(cc grpc.ClientConnInterface) TradingDataServiceClient {
	return &tradingDataServiceClient{cc}
}

func (c *tradingDataServiceClient) GetOrdersByMarket(ctx context.Context, in *GetOrdersByMarketRequest, opts ...grpc.CallOption) (*GetOrdersByMarketResponse, error) {
	out := new(GetOrdersByMarketResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetOrdersByMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetOrderVersionsByID(ctx context.Context, in *GetOrderVersionsByIDRequest, opts ...grpc.CallOption) (*GetOrderVersionsByIDResponse, error) {
	out := new(GetOrderVersionsByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetOrderVersionsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetOrdersByMarketPaged(ctx context.Context, in *GetOrdersByMarketPagedRequest, opts ...grpc.CallOption) (*GetOrdersByMarketPagedResponse, error) {
	out := new(GetOrdersByMarketPagedResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetOrdersByMarketPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetOrdersByPartyPaged(ctx context.Context, in *GetOrdersByPartyPagedRequest, opts ...grpc.CallOption) (*GetOrdersByPartyPagedResponse, error) {
	out := new(GetOrdersByPartyPagedResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetOrdersByPartyPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetOrderVersionsByIDPaged(ctx context.Context, in *GetOrderVersionsByIDPagedRequest, opts ...grpc.CallOption) (*GetOrderVersionsByIDPagedResponse, error) {
	out := new(GetOrderVersionsByIDPagedResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetOrderVersionsByIDPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetPositionsByPartyPaged(ctx context.Context, in *GetPositionsByPartyPagedRequest, opts ...grpc.CallOption) (*GetPositionsByPartyPagedResponse, error) {
	out := new(GetPositionsByPartyPagedResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetPositionsByPartyPaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetBalanceHistory(ctx context.Context, in *GetBalanceHistoryRequest, opts ...grpc.CallOption) (*GetBalanceHistoryResponse, error) {
	out := new(GetBalanceHistoryResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetBalanceHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetMarketDataHistoryByID(ctx context.Context, in *GetMarketDataHistoryByIDRequest, opts ...grpc.CallOption) (*GetMarketDataHistoryByIDResponse, error) {
	out := new(GetMarketDataHistoryByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) MarketsDataSubscribe(ctx context.Context, in *MarketsDataSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketsDataSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[0], "/datanode.api.v2.TradingDataService/MarketsDataSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceMarketsDataSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_MarketsDataSubscribeClient interface {
	Recv() (*MarketsDataSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceMarketsDataSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceMarketsDataSubscribeClient) Recv() (*MarketsDataSubscribeResponse, error) {
	m := new(MarketsDataSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) GetTransfers(ctx context.Context, in *GetTransfersRequest, opts ...grpc.CallOption) (*GetTransfersResponse, error) {
	out := new(GetTransfersResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNetworkLimits(ctx context.Context, in *GetNetworkLimitsRequest, opts ...grpc.CallOption) (*GetNetworkLimitsResponse, error) {
	out := new(GetNetworkLimitsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetNetworkLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetCandleData(ctx context.Context, in *GetCandleDataRequest, opts ...grpc.CallOption) (*GetCandleDataResponse, error) {
	out := new(GetCandleDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetCandleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) SubscribeToCandleData(ctx context.Context, in *SubscribeToCandleDataRequest, opts ...grpc.CallOption) (TradingDataService_SubscribeToCandleDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[1], "/datanode.api.v2.TradingDataService/SubscribeToCandleData", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceSubscribeToCandleDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_SubscribeToCandleDataClient interface {
	Recv() (*SubscribeToCandleDataResponse, error)
	grpc.ClientStream
}

type tradingDataServiceSubscribeToCandleDataClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceSubscribeToCandleDataClient) Recv() (*SubscribeToCandleDataResponse, error) {
	m := new(SubscribeToCandleDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) GetCandlesForMarket(ctx context.Context, in *GetCandlesForMarketRequest, opts ...grpc.CallOption) (*GetCandlesForMarketResponse, error) {
	out := new(GetCandlesForMarketResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetCandlesForMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetVotes(ctx context.Context, in *GetVotesRequest, opts ...grpc.CallOption) (*GetVotesResponse, error) {
	out := new(GetVotesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetERC20MultiSigSignerAddedBundles(ctx context.Context, in *GetERC20MultiSigSignerAddedBundlesRequest, opts ...grpc.CallOption) (*GetERC20MultiSigSignerAddedBundlesResponse, error) {
	out := new(GetERC20MultiSigSignerAddedBundlesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerAddedBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetERC20MultiSigSignerRemovedBundles(ctx context.Context, in *GetERC20MultiSigSignerRemovedBundlesRequest, opts ...grpc.CallOption) (*GetERC20MultiSigSignerRemovedBundlesResponse, error) {
	out := new(GetERC20MultiSigSignerRemovedBundlesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerRemovedBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetTradesByMarket(ctx context.Context, in *GetTradesByMarketRequest, opts ...grpc.CallOption) (*GetTradesByMarketResponse, error) {
	out := new(GetTradesByMarketResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetTradesByMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetTradesByParty(ctx context.Context, in *GetTradesByPartyRequest, opts ...grpc.CallOption) (*GetTradesByPartyResponse, error) {
	out := new(GetTradesByPartyResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetTradesByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetTradesByOrderID(ctx context.Context, in *GetTradesByOrderIDRequest, opts ...grpc.CallOption) (*GetTradesByOrderIDResponse, error) {
	out := new(GetTradesByOrderIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetTradesByOrderID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetOracleSpecByID(ctx context.Context, in *GetOracleSpecByIDRequest, opts ...grpc.CallOption) (*GetOracleSpecByIDResponse, error) {
	out := new(GetOracleSpecByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetOracleSpecByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListOracleSpecs(ctx context.Context, in *ListOracleSpecsRequest, opts ...grpc.CallOption) (*ListOracleSpecsResponse, error) {
	out := new(ListOracleSpecsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListOracleSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetOracleDataBySpecID(ctx context.Context, in *GetOracleDataBySpecIDRequest, opts ...grpc.CallOption) (*GetOracleDataBySpecIDResponse, error) {
	out := new(GetOracleDataBySpecIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetOracleDataBySpecID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListOracleData(ctx context.Context, in *ListOracleDataRequest, opts ...grpc.CallOption) (*ListOracleDataResponse, error) {
	out := new(ListOracleDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListOracleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetMarkets(ctx context.Context, in *GetMarketsRequest, opts ...grpc.CallOption) (*GetMarketsResponse, error) {
	out := new(GetMarketsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetParties(ctx context.Context, in *GetPartiesRequest, opts ...grpc.CallOption) (*GetPartiesResponse, error) {
	out := new(GetPartiesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetParties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetMarginLevels(ctx context.Context, in *GetMarginLevelsRequest, opts ...grpc.CallOption) (*GetMarginLevelsResponse, error) {
	out := new(GetMarginLevelsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetMarginLevels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetRewards(ctx context.Context, in *GetRewardsRequest, opts ...grpc.CallOption) (*GetRewardsResponse, error) {
	out := new(GetRewardsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetRewardSummaries(ctx context.Context, in *GetRewardSummariesRequest, opts ...grpc.CallOption) (*GetRewardSummariesResponse, error) {
	out := new(GetRewardSummariesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetRewardSummaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingDataServiceServer is the server API for TradingDataService service.
// All implementations must embed UnimplementedTradingDataServiceServer
// for forward compatibility
type TradingDataServiceServer interface {
	// -- Orders --
	// Get a list of Orders by Market
	GetOrdersByMarket(context.Context, *GetOrdersByMarketRequest) (*GetOrdersByMarketResponse, error)
	// Get all versions of the order by its orderID
	GetOrderVersionsByID(context.Context, *GetOrderVersionsByIDRequest) (*GetOrderVersionsByIDResponse, error)
	// Get a list of Orders by Market using cursor based pagination
	GetOrdersByMarketPaged(context.Context, *GetOrdersByMarketPagedRequest) (*GetOrdersByMarketPagedResponse, error)
	// Get a list of Orders by Party using cursor based pagination
	GetOrdersByPartyPaged(context.Context, *GetOrdersByPartyPagedRequest) (*GetOrdersByPartyPagedResponse, error)
	// Get all versions of the order by its orderID using cursor based pagination
	GetOrderVersionsByIDPaged(context.Context, *GetOrderVersionsByIDPagedRequest) (*GetOrderVersionsByIDPagedResponse, error)
	// -- Positions --
	// Get a list of Positions by Party using cursor based pagination
	GetPositionsByPartyPaged(context.Context, *GetPositionsByPartyPagedRequest) (*GetPositionsByPartyPagedResponse, error)
	// -- Balances --
	// Get an aggregated list of the changes in balances in a set of accounts over time
	GetBalanceHistory(context.Context, *GetBalanceHistoryRequest) (*GetBalanceHistoryResponse, error)
	// -- Market Data --
	// Get Market Data History for a Market ID between given dates using a cursor based pagination model
	GetMarketDataHistoryByID(context.Context, *GetMarketDataHistoryByIDRequest) (*GetMarketDataHistoryByIDResponse, error)
	// Subscribe to a stream of Markets Data
	MarketsDataSubscribe(*MarketsDataSubscribeRequest, TradingDataService_MarketsDataSubscribeServer) error
	// -- Transfers --
	// Get Transfersfor a Market ID for a public key using a cursor based pagination model
	GetTransfers(context.Context, *GetTransfersRequest) (*GetTransfersResponse, error)
	// -- Network Limits --
	// Get the current network limits (is bootstrapping finished, are proposals enabled etc..)
	GetNetworkLimits(context.Context, *GetNetworkLimitsRequest) (*GetNetworkLimitsResponse, error)
	// -- Candles --
	// Get candle data for a given candle id
	GetCandleData(context.Context, *GetCandleDataRequest) (*GetCandleDataResponse, error)
	// Subscribe to a stream of Candle updates
	SubscribeToCandleData(*SubscribeToCandleDataRequest, TradingDataService_SubscribeToCandleDataServer) error
	// Gets all available intervals for a given market along with the corresponding candle id
	GetCandlesForMarket(context.Context, *GetCandlesForMarketRequest) (*GetCandlesForMarketResponse, error)
	// -- Votes --
	// Get Votes for a Party ID using a cursor based pagination model
	GetVotes(context.Context, *GetVotesRequest) (*GetVotesResponse, error)
	// -- ERC20 Multi Sig --
	// Gets the signature bundles that add a particular validator to the multisig contract
	GetERC20MultiSigSignerAddedBundles(context.Context, *GetERC20MultiSigSignerAddedBundlesRequest) (*GetERC20MultiSigSignerAddedBundlesResponse, error)
	// Gets the signature bundles that remove a particular validator to the multisig contract
	GetERC20MultiSigSignerRemovedBundles(context.Context, *GetERC20MultiSigSignerRemovedBundlesRequest) (*GetERC20MultiSigSignerRemovedBundlesResponse, error)
	// -- Trades --
	// Get trades by market using a cursor based pagination model
	GetTradesByMarket(context.Context, *GetTradesByMarketRequest) (*GetTradesByMarketResponse, error)
	// Get trades by party using a cursor based pagination model
	GetTradesByParty(context.Context, *GetTradesByPartyRequest) (*GetTradesByPartyResponse, error)
	// Get trades by market with the corresponding orderID using a cursor based pagination model
	GetTradesByOrderID(context.Context, *GetTradesByOrderIDRequest) (*GetTradesByOrderIDResponse, error)
	// -- Oracles --
	// Get an oracle spec by ID.
	GetOracleSpecByID(context.Context, *GetOracleSpecByIDRequest) (*GetOracleSpecByIDResponse, error)
	// Get the oracle specs
	ListOracleSpecs(context.Context, *ListOracleSpecsRequest) (*ListOracleSpecsResponse, error)
	// Get oracle data that matched the given spec
	GetOracleDataBySpecID(context.Context, *GetOracleDataBySpecIDRequest) (*GetOracleDataBySpecIDResponse, error)
	// Get all oracle data
	ListOracleData(context.Context, *ListOracleDataRequest) (*ListOracleDataResponse, error)
	// -- Markets --
	// Get all markets using a cursor based pagination model
	GetMarkets(context.Context, *GetMarketsRequest) (*GetMarketsResponse, error)
	// -- Parties --
	// Get Parties using a cursor based pagination model
	GetParties(context.Context, *GetPartiesRequest) (*GetPartiesResponse, error)
	// -- Margin Levels --
	// Get Margin Levels using a cursor based pagination model
	GetMarginLevels(context.Context, *GetMarginLevelsRequest) (*GetMarginLevelsResponse, error)
	// Get rewards
	GetRewards(context.Context, *GetRewardsRequest) (*GetRewardsResponse, error)
	// Get reward summaries
	GetRewardSummaries(context.Context, *GetRewardSummariesRequest) (*GetRewardSummariesResponse, error)
	mustEmbedUnimplementedTradingDataServiceServer()
}

// UnimplementedTradingDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradingDataServiceServer struct {
}

func (UnimplementedTradingDataServiceServer) GetOrdersByMarket(context.Context, *GetOrdersByMarketRequest) (*GetOrdersByMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByMarket not implemented")
}
func (UnimplementedTradingDataServiceServer) GetOrderVersionsByID(context.Context, *GetOrderVersionsByIDRequest) (*GetOrderVersionsByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderVersionsByID not implemented")
}
func (UnimplementedTradingDataServiceServer) GetOrdersByMarketPaged(context.Context, *GetOrdersByMarketPagedRequest) (*GetOrdersByMarketPagedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByMarketPaged not implemented")
}
func (UnimplementedTradingDataServiceServer) GetOrdersByPartyPaged(context.Context, *GetOrdersByPartyPagedRequest) (*GetOrdersByPartyPagedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByPartyPaged not implemented")
}
func (UnimplementedTradingDataServiceServer) GetOrderVersionsByIDPaged(context.Context, *GetOrderVersionsByIDPagedRequest) (*GetOrderVersionsByIDPagedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderVersionsByIDPaged not implemented")
}
func (UnimplementedTradingDataServiceServer) GetPositionsByPartyPaged(context.Context, *GetPositionsByPartyPagedRequest) (*GetPositionsByPartyPagedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionsByPartyPaged not implemented")
}
func (UnimplementedTradingDataServiceServer) GetBalanceHistory(context.Context, *GetBalanceHistoryRequest) (*GetBalanceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceHistory not implemented")
}
func (UnimplementedTradingDataServiceServer) GetMarketDataHistoryByID(context.Context, *GetMarketDataHistoryByIDRequest) (*GetMarketDataHistoryByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketDataHistoryByID not implemented")
}
func (UnimplementedTradingDataServiceServer) MarketsDataSubscribe(*MarketsDataSubscribeRequest, TradingDataService_MarketsDataSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method MarketsDataSubscribe not implemented")
}
func (UnimplementedTradingDataServiceServer) GetTransfers(context.Context, *GetTransfersRequest) (*GetTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransfers not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNetworkLimits(context.Context, *GetNetworkLimitsRequest) (*GetNetworkLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkLimits not implemented")
}
func (UnimplementedTradingDataServiceServer) GetCandleData(context.Context, *GetCandleDataRequest) (*GetCandleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandleData not implemented")
}
func (UnimplementedTradingDataServiceServer) SubscribeToCandleData(*SubscribeToCandleDataRequest, TradingDataService_SubscribeToCandleDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToCandleData not implemented")
}
func (UnimplementedTradingDataServiceServer) GetCandlesForMarket(context.Context, *GetCandlesForMarketRequest) (*GetCandlesForMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandlesForMarket not implemented")
}
func (UnimplementedTradingDataServiceServer) GetVotes(context.Context, *GetVotesRequest) (*GetVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVotes not implemented")
}
func (UnimplementedTradingDataServiceServer) GetERC20MultiSigSignerAddedBundles(context.Context, *GetERC20MultiSigSignerAddedBundlesRequest) (*GetERC20MultiSigSignerAddedBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetERC20MultiSigSignerAddedBundles not implemented")
}
func (UnimplementedTradingDataServiceServer) GetERC20MultiSigSignerRemovedBundles(context.Context, *GetERC20MultiSigSignerRemovedBundlesRequest) (*GetERC20MultiSigSignerRemovedBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetERC20MultiSigSignerRemovedBundles not implemented")
}
func (UnimplementedTradingDataServiceServer) GetTradesByMarket(context.Context, *GetTradesByMarketRequest) (*GetTradesByMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradesByMarket not implemented")
}
func (UnimplementedTradingDataServiceServer) GetTradesByParty(context.Context, *GetTradesByPartyRequest) (*GetTradesByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradesByParty not implemented")
}
func (UnimplementedTradingDataServiceServer) GetTradesByOrderID(context.Context, *GetTradesByOrderIDRequest) (*GetTradesByOrderIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradesByOrderID not implemented")
}
func (UnimplementedTradingDataServiceServer) GetOracleSpecByID(context.Context, *GetOracleSpecByIDRequest) (*GetOracleSpecByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleSpecByID not implemented")
}
func (UnimplementedTradingDataServiceServer) ListOracleSpecs(context.Context, *ListOracleSpecsRequest) (*ListOracleSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOracleSpecs not implemented")
}
func (UnimplementedTradingDataServiceServer) GetOracleDataBySpecID(context.Context, *GetOracleDataBySpecIDRequest) (*GetOracleDataBySpecIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleDataBySpecID not implemented")
}
func (UnimplementedTradingDataServiceServer) ListOracleData(context.Context, *ListOracleDataRequest) (*ListOracleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOracleData not implemented")
}
func (UnimplementedTradingDataServiceServer) GetMarkets(context.Context, *GetMarketsRequest) (*GetMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarkets not implemented")
}
func (UnimplementedTradingDataServiceServer) GetParties(context.Context, *GetPartiesRequest) (*GetPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParties not implemented")
}
func (UnimplementedTradingDataServiceServer) GetMarginLevels(context.Context, *GetMarginLevelsRequest) (*GetMarginLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarginLevels not implemented")
}
func (UnimplementedTradingDataServiceServer) GetRewards(context.Context, *GetRewardsRequest) (*GetRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewards not implemented")
}
func (UnimplementedTradingDataServiceServer) GetRewardSummaries(context.Context, *GetRewardSummariesRequest) (*GetRewardSummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardSummaries not implemented")
}
func (UnimplementedTradingDataServiceServer) mustEmbedUnimplementedTradingDataServiceServer() {}

// UnsafeTradingDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingDataServiceServer will
// result in compilation errors.
type UnsafeTradingDataServiceServer interface {
	mustEmbedUnimplementedTradingDataServiceServer()
}

func RegisterTradingDataServiceServer(s grpc.ServiceRegistrar, srv TradingDataServiceServer) {
	s.RegisterService(&TradingDataService_ServiceDesc, srv)
}

func _TradingDataService_GetOrdersByMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetOrdersByMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetOrdersByMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetOrdersByMarket(ctx, req.(*GetOrdersByMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetOrderVersionsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderVersionsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetOrderVersionsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetOrderVersionsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetOrderVersionsByID(ctx, req.(*GetOrderVersionsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetOrdersByMarketPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByMarketPagedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetOrdersByMarketPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetOrdersByMarketPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetOrdersByMarketPaged(ctx, req.(*GetOrdersByMarketPagedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetOrdersByPartyPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByPartyPagedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetOrdersByPartyPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetOrdersByPartyPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetOrdersByPartyPaged(ctx, req.(*GetOrdersByPartyPagedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetOrderVersionsByIDPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderVersionsByIDPagedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetOrderVersionsByIDPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetOrderVersionsByIDPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetOrderVersionsByIDPaged(ctx, req.(*GetOrderVersionsByIDPagedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetPositionsByPartyPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionsByPartyPagedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetPositionsByPartyPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetPositionsByPartyPaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetPositionsByPartyPaged(ctx, req.(*GetPositionsByPartyPagedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetBalanceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetBalanceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetBalanceHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetBalanceHistory(ctx, req.(*GetBalanceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetMarketDataHistoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketDataHistoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetMarketDataHistoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetMarketDataHistoryByID(ctx, req.(*GetMarketDataHistoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_MarketsDataSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketsDataSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).MarketsDataSubscribe(m, &tradingDataServiceMarketsDataSubscribeServer{stream})
}

type TradingDataService_MarketsDataSubscribeServer interface {
	Send(*MarketsDataSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceMarketsDataSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceMarketsDataSubscribeServer) Send(m *MarketsDataSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_GetTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetTransfers(ctx, req.(*GetTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNetworkLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNetworkLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetNetworkLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNetworkLimits(ctx, req.(*GetNetworkLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetCandleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetCandleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetCandleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetCandleData(ctx, req.(*GetCandleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_SubscribeToCandleData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToCandleDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).SubscribeToCandleData(m, &tradingDataServiceSubscribeToCandleDataServer{stream})
}

type TradingDataService_SubscribeToCandleDataServer interface {
	Send(*SubscribeToCandleDataResponse) error
	grpc.ServerStream
}

type tradingDataServiceSubscribeToCandleDataServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceSubscribeToCandleDataServer) Send(m *SubscribeToCandleDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_GetCandlesForMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandlesForMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetCandlesForMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetCandlesForMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetCandlesForMarket(ctx, req.(*GetCandlesForMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetVotes(ctx, req.(*GetVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetERC20MultiSigSignerAddedBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetERC20MultiSigSignerAddedBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetERC20MultiSigSignerAddedBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerAddedBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetERC20MultiSigSignerAddedBundles(ctx, req.(*GetERC20MultiSigSignerAddedBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetERC20MultiSigSignerRemovedBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetERC20MultiSigSignerRemovedBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetERC20MultiSigSignerRemovedBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetERC20MultiSigSignerRemovedBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetERC20MultiSigSignerRemovedBundles(ctx, req.(*GetERC20MultiSigSignerRemovedBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetTradesByMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradesByMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetTradesByMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetTradesByMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetTradesByMarket(ctx, req.(*GetTradesByMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetTradesByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradesByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetTradesByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetTradesByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetTradesByParty(ctx, req.(*GetTradesByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetTradesByOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradesByOrderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetTradesByOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetTradesByOrderID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetTradesByOrderID(ctx, req.(*GetTradesByOrderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetOracleSpecByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOracleSpecByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetOracleSpecByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetOracleSpecByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetOracleSpecByID(ctx, req.(*GetOracleSpecByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListOracleSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOracleSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListOracleSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListOracleSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListOracleSpecs(ctx, req.(*ListOracleSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetOracleDataBySpecID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOracleDataBySpecIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetOracleDataBySpecID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetOracleDataBySpecID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetOracleDataBySpecID(ctx, req.(*GetOracleDataBySpecIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListOracleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOracleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListOracleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListOracleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListOracleData(ctx, req.(*ListOracleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetMarkets(ctx, req.(*GetMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetParties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetParties(ctx, req.(*GetPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetMarginLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarginLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetMarginLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetMarginLevels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetMarginLevels(ctx, req.(*GetMarginLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetRewards(ctx, req.(*GetRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetRewardSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetRewardSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetRewardSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetRewardSummaries(ctx, req.(*GetRewardSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradingDataService_ServiceDesc is the grpc.ServiceDesc for TradingDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datanode.api.v2.TradingDataService",
	HandlerType: (*TradingDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrdersByMarket",
			Handler:    _TradingDataService_GetOrdersByMarket_Handler,
		},
		{
			MethodName: "GetOrderVersionsByID",
			Handler:    _TradingDataService_GetOrderVersionsByID_Handler,
		},
		{
			MethodName: "GetOrdersByMarketPaged",
			Handler:    _TradingDataService_GetOrdersByMarketPaged_Handler,
		},
		{
			MethodName: "GetOrdersByPartyPaged",
			Handler:    _TradingDataService_GetOrdersByPartyPaged_Handler,
		},
		{
			MethodName: "GetOrderVersionsByIDPaged",
			Handler:    _TradingDataService_GetOrderVersionsByIDPaged_Handler,
		},
		{
			MethodName: "GetPositionsByPartyPaged",
			Handler:    _TradingDataService_GetPositionsByPartyPaged_Handler,
		},
		{
			MethodName: "GetBalanceHistory",
			Handler:    _TradingDataService_GetBalanceHistory_Handler,
		},
		{
			MethodName: "GetMarketDataHistoryByID",
			Handler:    _TradingDataService_GetMarketDataHistoryByID_Handler,
		},
		{
			MethodName: "GetTransfers",
			Handler:    _TradingDataService_GetTransfers_Handler,
		},
		{
			MethodName: "GetNetworkLimits",
			Handler:    _TradingDataService_GetNetworkLimits_Handler,
		},
		{
			MethodName: "GetCandleData",
			Handler:    _TradingDataService_GetCandleData_Handler,
		},
		{
			MethodName: "GetCandlesForMarket",
			Handler:    _TradingDataService_GetCandlesForMarket_Handler,
		},
		{
			MethodName: "GetVotes",
			Handler:    _TradingDataService_GetVotes_Handler,
		},
		{
			MethodName: "GetERC20MultiSigSignerAddedBundles",
			Handler:    _TradingDataService_GetERC20MultiSigSignerAddedBundles_Handler,
		},
		{
			MethodName: "GetERC20MultiSigSignerRemovedBundles",
			Handler:    _TradingDataService_GetERC20MultiSigSignerRemovedBundles_Handler,
		},
		{
			MethodName: "GetTradesByMarket",
			Handler:    _TradingDataService_GetTradesByMarket_Handler,
		},
		{
			MethodName: "GetTradesByParty",
			Handler:    _TradingDataService_GetTradesByParty_Handler,
		},
		{
			MethodName: "GetTradesByOrderID",
			Handler:    _TradingDataService_GetTradesByOrderID_Handler,
		},
		{
			MethodName: "GetOracleSpecByID",
			Handler:    _TradingDataService_GetOracleSpecByID_Handler,
		},
		{
			MethodName: "ListOracleSpecs",
			Handler:    _TradingDataService_ListOracleSpecs_Handler,
		},
		{
			MethodName: "GetOracleDataBySpecID",
			Handler:    _TradingDataService_GetOracleDataBySpecID_Handler,
		},
		{
			MethodName: "ListOracleData",
			Handler:    _TradingDataService_ListOracleData_Handler,
		},
		{
			MethodName: "GetMarkets",
			Handler:    _TradingDataService_GetMarkets_Handler,
		},
		{
			MethodName: "GetParties",
			Handler:    _TradingDataService_GetParties_Handler,
		},
		{
			MethodName: "GetMarginLevels",
			Handler:    _TradingDataService_GetMarginLevels_Handler,
		},
		{
			MethodName: "GetRewards",
			Handler:    _TradingDataService_GetRewards_Handler,
		},
		{
			MethodName: "GetRewardSummaries",
			Handler:    _TradingDataService_GetRewardSummaries_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MarketsDataSubscribe",
			Handler:       _TradingDataService_MarketsDataSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToCandleData",
			Handler:       _TradingDataService_SubscribeToCandleData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data-node/api/v2/trading_data.proto",
}
