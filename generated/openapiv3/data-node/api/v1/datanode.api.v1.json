{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI Spec for Istio APIs.",
    "version": "v1"
  },
  "components": {
    "schemas": {
      "datanode.api.v1.AccountsSubscribeRequest": {
        "description": "Request to subscribe to a stream of (Accounts)[#vega.Account]",
        "properties": {
          "asset": {
            "description": "Asset identifier",
            "type": "string"
          },
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          },
          "party_id": {
            "description": "Party identifier",
            "type": "string"
          },
          "type": {
            "description": "Account type to subscribe to, required field",
            "enum": [
              [
                "ACCOUNT_TYPE_UNSPECIFIED",
                "ACCOUNT_TYPE_INSURANCE",
                "ACCOUNT_TYPE_SETTLEMENT",
                "ACCOUNT_TYPE_MARGIN",
                "ACCOUNT_TYPE_GENERAL",
                "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                "ACCOUNT_TYPE_FEES_LIQUIDITY",
                "ACCOUNT_TYPE_FEES_MAKER",
                "ACCOUNT_TYPE_LOCK_WITHDRAW",
                "ACCOUNT_TYPE_BOND",
                "ACCOUNT_TYPE_EXTERNAL",
                "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                "ACCOUNT_TYPE_GLOBAL_REWARD",
                "ACCOUNT_TYPE_PENDING_TRANSFERS",
                "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
              ]
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.AccountsSubscribeResponse": {
        "properties": {
          "account": {
            "properties": {
              "asset": {
                "description": "Asset identifier for the account",
                "type": "string"
              },
              "balance": {
                "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places and importantly balances cannot be negative",
                "type": "string"
              },
              "id": {
                "description": "Unique account identifier (used internally by Vega)",
                "type": "string"
              },
              "market_id": {
                "description": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty",
                "type": "string"
              },
              "owner": {
                "description": "The party that the account belongs to, special values include `network`, which represents the Vega network and is most commonly seen during liquidation of distressed trading positions",
                "type": "string"
              },
              "type": {
                "description": "The account type related to this account",
                "enum": [
                  [
                    "ACCOUNT_TYPE_UNSPECIFIED",
                    "ACCOUNT_TYPE_INSURANCE",
                    "ACCOUNT_TYPE_SETTLEMENT",
                    "ACCOUNT_TYPE_MARGIN",
                    "ACCOUNT_TYPE_GENERAL",
                    "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                    "ACCOUNT_TYPE_FEES_LIQUIDITY",
                    "ACCOUNT_TYPE_FEES_MAKER",
                    "ACCOUNT_TYPE_LOCK_WITHDRAW",
                    "ACCOUNT_TYPE_BOND",
                    "ACCOUNT_TYPE_EXTERNAL",
                    "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                    "ACCOUNT_TYPE_GLOBAL_REWARD",
                    "ACCOUNT_TYPE_PENDING_TRANSFERS",
                    "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                    "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                    "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                    "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.AssetByIDRequest": {
        "description": "Request for an asset given an asset identifier",
        "properties": {
          "id": {
            "description": "Asset identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.AssetByIDResponse": {
        "description": "Response for an asset given an asset identifier",
        "properties": {
          "asset": {
            "description": "An asset record, if found",
            "properties": {
              "details": {
                "description": "The definition of the external source for this asset",
                "properties": {
                  "decimals": {
                    "description": "Number of decimal / precision handled by this asset",
                    "format": "int64",
                    "type": "integer"
                  },
                  "name": {
                    "description": "Name of the asset (e.g: Great British Pound)",
                    "type": "string"
                  },
                  "quantum": {
                    "description": "The minimum economically meaningful amount in the asset",
                    "type": "string"
                  },
                  "source": {
                    "oneOf": [
                      {
                        "description": "A built-in asset",
                        "properties": {
                          "max_faucet_amount_mint": {
                            "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "description": "An Ethereum ERC20 asset",
                        "properties": {
                          "contract_address": {
                            "description": "The address of the contract for the token, on the ethereum network",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "symbol": {
                    "description": "Symbol of the asset (e.g: GBP)",
                    "type": "string"
                  },
                  "total_supply": {
                    "description": "Total circulating supply for the asset",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "Internal identifier of the asset",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.AssetsRequest": {
        "description": "Request for a list of all assets enabled on Vega",
        "type": "object"
      },
      "datanode.api.v1.AssetsResponse": {
        "description": "Response for a list of all assets enabled on Vega",
        "properties": {
          "assets": {
            "description": "A list of 0 or more assets",
            "items": {
              "description": "The Vega representation of an external asset",
              "properties": {
                "details": {
                  "description": "The definition of the external source for this asset",
                  "properties": {
                    "decimals": {
                      "description": "Number of decimal / precision handled by this asset",
                      "format": "int64",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Name of the asset (e.g: Great British Pound)",
                      "type": "string"
                    },
                    "quantum": {
                      "description": "The minimum economically meaningful amount in the asset",
                      "type": "string"
                    },
                    "source": {
                      "oneOf": [
                        {
                          "description": "A built-in asset",
                          "properties": {
                            "max_faucet_amount_mint": {
                              "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "description": "An Ethereum ERC20 asset",
                          "properties": {
                            "contract_address": {
                              "description": "The address of the contract for the token, on the ethereum network",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    },
                    "symbol": {
                      "description": "Symbol of the asset (e.g: GBP)",
                      "type": "string"
                    },
                    "total_supply": {
                      "description": "Total circulating supply for the asset",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Internal identifier of the asset",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.CandlesRequest": {
        "description": "Request for a list of candles for a market at an interval",
        "properties": {
          "interval": {
            "description": "Time interval for the candles, required field",
            "enum": [
              [
                "INTERVAL_UNSPECIFIED",
                "INTERVAL_I1M",
                "INTERVAL_I5M",
                "INTERVAL_I15M",
                "INTERVAL_I1H",
                "INTERVAL_I6H",
                "INTERVAL_I1D"
              ]
            ],
            "type": "string"
          },
          "market_id": {
            "description": "Market identifier, required field.",
            "type": "string"
          },
          "since_timestamp": {
            "description": "Timestamp to retrieve candles since, in nanoseconds since the epoch, required field - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.CandlesResponse": {
        "description": "Response for a list of candles for a market at an interval",
        "properties": {
          "candles": {
            "description": "A list of 0 or more candles",
            "items": {
              "description": "Represents the high, low, open, and closing prices for an interval of trading, referred to commonly as a candlestick or candle",
              "properties": {
                "close": {
                  "description": "Closing trade price",
                  "type": "string"
                },
                "datetime": {
                  "description": "An ISO-8601 datetime with nanosecond precision for when the candle was last updated",
                  "type": "string"
                },
                "high": {
                  "description": "Highest price for trading during the candle interval",
                  "type": "string"
                },
                "interval": {
                  "description": "Time interval for the candle - See [`Interval`](#vega.Interval)",
                  "enum": [
                    [
                      "INTERVAL_UNSPECIFIED",
                      "INTERVAL_I1M",
                      "INTERVAL_I5M",
                      "INTERVAL_I15M",
                      "INTERVAL_I1H",
                      "INTERVAL_I6H",
                      "INTERVAL_I1D"
                    ]
                  ],
                  "type": "string"
                },
                "low": {
                  "description": "Lowest price for trading during the candle interval",
                  "type": "string"
                },
                "open": {
                  "description": "Open trade price",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Timestamp for the point in time when the candle was initially created/opened, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "volume": {
                  "description": "Total trading volume during the candle interval",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.CandlesSubscribeRequest": {
        "description": "Request to subscribe to a stream of (Candles)[#vega.Candle]",
        "properties": {
          "interval": {
            "description": "Time interval for the candles, required field.",
            "enum": [
              [
                "INTERVAL_UNSPECIFIED",
                "INTERVAL_I1M",
                "INTERVAL_I5M",
                "INTERVAL_I15M",
                "INTERVAL_I1H",
                "INTERVAL_I6H",
                "INTERVAL_I1D"
              ]
            ],
            "type": "string"
          },
          "market_id": {
            "description": "Market identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.CandlesSubscribeResponse": {
        "properties": {
          "candle": {
            "properties": {
              "close": {
                "description": "Closing trade price",
                "type": "string"
              },
              "datetime": {
                "description": "An ISO-8601 datetime with nanosecond precision for when the candle was last updated",
                "type": "string"
              },
              "high": {
                "description": "Highest price for trading during the candle interval",
                "type": "string"
              },
              "interval": {
                "description": "Time interval for the candle - See [`Interval`](#vega.Interval)",
                "enum": [
                  [
                    "INTERVAL_UNSPECIFIED",
                    "INTERVAL_I1M",
                    "INTERVAL_I5M",
                    "INTERVAL_I15M",
                    "INTERVAL_I1H",
                    "INTERVAL_I6H",
                    "INTERVAL_I1D"
                  ]
                ],
                "type": "string"
              },
              "low": {
                "description": "Lowest price for trading during the candle interval",
                "type": "string"
              },
              "open": {
                "description": "Open trade price",
                "type": "string"
              },
              "timestamp": {
                "description": "Timestamp for the point in time when the candle was initially created/opened, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "volume": {
                "description": "Total trading volume during the candle interval",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.Checkpoint": {
        "description": "The actual data regarding a checkpoint",
        "properties": {
          "at_block": {
            "format": "int64",
            "type": "integer"
          },
          "block_hash": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.CheckpointsRequest": {
        "description": "Request to get all checkpoints. Currently no fields, probably will be expanded to allow filtering data",
        "type": "object"
      },
      "datanode.api.v1.CheckpointsResponse": {
        "description": "Response message containing all checkpoints requested",
        "properties": {
          "checkpoints": {
            "items": {
              "description": "The actual data regarding a checkpoint",
              "properties": {
                "at_block": {
                  "format": "int64",
                  "type": "integer"
                },
                "block_hash": {
                  "type": "string"
                },
                "hash": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.DelegationsRequest": {
        "description": "both fields optional but 1 of them required at least party = all delegation for a party node_id = all delegation for a node party_id + node_id = all delegation for a node for a given party",
        "properties": {
          "epoch_seq": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "pagination": {
            "description": "Pagination controls",
            "properties": {
              "descending": {
                "description": "Descending reverses the order of the records returned, default is true, if false the results will be returned in ascending order",
                "type": "boolean"
              },
              "limit": {
                "description": "Limit the number of returned records to the value specified, default is 50",
                "format": "int64",
                "type": "integer"
              },
              "skip": {
                "description": "Skip the number of records specified, default is 0",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "party": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.DelegationsResponse": {
        "properties": {
          "delegations": {
            "items": {
              "properties": {
                "amount": {
                  "description": "Amount delegated",
                  "type": "string"
                },
                "epoch_seq": {
                  "description": "Epoch of delegation",
                  "type": "string"
                },
                "node_id": {
                  "description": "Node ID",
                  "type": "string"
                },
                "party": {
                  "description": "Party which is delegating",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.DepositRequest": {
        "description": "A request to get a specific deposit by identifier",
        "properties": {
          "id": {
            "description": "The identifier of the deposit",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.DepositResponse": {
        "description": "A response for a deposit",
        "properties": {
          "deposit": {
            "description": "The deposit matching the identifier from the request",
            "properties": {
              "amount": {
                "description": "The amount to be deposited",
                "type": "string"
              },
              "asset": {
                "description": "The Vega asset targeted by this deposit",
                "type": "string"
              },
              "created_timestamp": {
                "description": "Timestamp for when the deposit was created on the Vega network",
                "format": "int64",
                "type": "integer"
              },
              "credited_timestamp": {
                "description": "Timestamp for when the Vega account was updated with the deposit",
                "format": "int64",
                "type": "integer"
              },
              "id": {
                "description": "Unique identifier for the deposit",
                "type": "string"
              },
              "party_id": {
                "description": "Party identifier of the user initiating the deposit",
                "type": "string"
              },
              "status": {
                "description": "Status of the deposit",
                "enum": [
                  [
                    "STATUS_UNSPECIFIED",
                    "STATUS_OPEN",
                    "STATUS_CANCELLED",
                    "STATUS_FINALIZED"
                  ]
                ],
                "type": "string"
              },
              "tx_hash": {
                "description": "The hash of the transaction from the foreign chain",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.DepositsRequest": {
        "description": "A request to get a list of deposit from a given party",
        "properties": {
          "party_id": {
            "description": "The party to get the deposits for",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.DepositsResponse": {
        "description": "The response for a list of deposits",
        "properties": {
          "deposits": {
            "description": "The list of deposits for the specified party",
            "items": {
              "description": "A deposit on to the Vega network",
              "properties": {
                "amount": {
                  "description": "The amount to be deposited",
                  "type": "string"
                },
                "asset": {
                  "description": "The Vega asset targeted by this deposit",
                  "type": "string"
                },
                "created_timestamp": {
                  "description": "Timestamp for when the deposit was created on the Vega network",
                  "format": "int64",
                  "type": "integer"
                },
                "credited_timestamp": {
                  "description": "Timestamp for when the Vega account was updated with the deposit",
                  "format": "int64",
                  "type": "integer"
                },
                "id": {
                  "description": "Unique identifier for the deposit",
                  "type": "string"
                },
                "party_id": {
                  "description": "Party identifier of the user initiating the deposit",
                  "type": "string"
                },
                "status": {
                  "description": "Status of the deposit",
                  "enum": [
                    [
                      "STATUS_UNSPECIFIED",
                      "STATUS_OPEN",
                      "STATUS_CANCELLED",
                      "STATUS_FINALIZED"
                    ]
                  ],
                  "type": "string"
                },
                "tx_hash": {
                  "description": "The hash of the transaction from the foreign chain",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.ERC20WithdrawalApprovalRequest": {
        "description": "The request to get all information required to bundle the call to finalise the withdrawal on the erc20 bridge",
        "properties": {
          "withdrawal_id": {
            "description": "The identifier of the withdrawal",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.ERC20WithdrawalApprovalResponse": {
        "description": "The response with all information required to bundle the call to finalise the withdrawal on the erc20 bridge function withdraw_asset(address asset_source, uint256 asset_id, uint256 amount, uint256 expiry, uint256 nonce, bytes memory signatures)",
        "properties": {
          "amount": {
            "description": "The amount to be withdrawn",
            "type": "string"
          },
          "asset_source": {
            "description": "The address of asset on ethereum",
            "type": "string"
          },
          "expiry": {
            "description": "The expiry / until what time the request is valid",
            "format": "int64",
            "type": "integer"
          },
          "nonce": {
            "description": "The nonce, which is actually the internal reference for the withdrawal",
            "type": "string"
          },
          "signatures": {
            "description": "The signatures bundle as hex encoded data, forward by 0x e.g: 0x + sig1 + sig2 + ... + sixN",
            "type": "string"
          },
          "target_address": {
            "description": "The ethereum address to withdraw the funds to, 0x prefixed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.EstimateFeeRequest": {
        "description": "Request to fetch the estimated fee if an order were to trade immediately",
        "properties": {
          "order": {
            "description": "Order to estimate fees for the following fields in the order are required: MarketID (used to specify the fee factors) Price (the price at which the order could trade) Size (the size at which the order could eventually trade)",
            "properties": {
              "batch_id": {
                "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)",
                "format": "int64",
                "type": "integer"
              },
              "created_at": {
                "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "expires_at": {
                "description": "Timestamp for when the order will expire, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`",
                "format": "int64",
                "type": "integer"
              },
              "id": {
                "description": "Unique identifier for the order (set by the system after consensus)",
                "type": "string"
              },
              "liquidity_provision_id": {
                "description": "Is this order created as part of a liquidity provision, will be empty if not.",
                "type": "string"
              },
              "market_id": {
                "description": "Market identifier for the order",
                "type": "string"
              },
              "party_id": {
                "description": "Party identifier for the order",
                "type": "string"
              },
              "pegged_order": {
                "description": "Pegged order details, used only if the order represents a pegged order.",
                "properties": {
                  "offset": {
                    "description": "Offset from the price reference",
                    "type": "string"
                  },
                  "reference": {
                    "description": "Which price point are we linked to",
                    "enum": [
                      [
                        "PEGGED_REFERENCE_UNSPECIFIED",
                        "PEGGED_REFERENCE_MID",
                        "PEGGED_REFERENCE_BEST_BID",
                        "PEGGED_REFERENCE_BEST_ASK"
                      ]
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "price": {
                "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "reason": {
                "description": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors",
                "enum": [
                  [
                    "ORDER_ERROR_UNSPECIFIED",
                    "ORDER_ERROR_INVALID_MARKET_ID",
                    "ORDER_ERROR_INVALID_ORDER_ID",
                    "ORDER_ERROR_OUT_OF_SEQUENCE",
                    "ORDER_ERROR_INVALID_REMAINING_SIZE",
                    "ORDER_ERROR_TIME_FAILURE",
                    "ORDER_ERROR_REMOVAL_FAILURE",
                    "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                    "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                    "ORDER_ERROR_EDIT_NOT_ALLOWED",
                    "ORDER_ERROR_AMEND_FAILURE",
                    "ORDER_ERROR_NOT_FOUND",
                    "ORDER_ERROR_INVALID_PARTY_ID",
                    "ORDER_ERROR_MARKET_CLOSED",
                    "ORDER_ERROR_MARGIN_CHECK_FAILED",
                    "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                    "ORDER_ERROR_INTERNAL_ERROR",
                    "ORDER_ERROR_INVALID_SIZE",
                    "ORDER_ERROR_INVALID_PERSISTENCE",
                    "ORDER_ERROR_INVALID_TYPE",
                    "ORDER_ERROR_SELF_TRADING",
                    "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                    "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                    "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                    "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                    "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                    "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                    "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                    "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                    "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                    "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                    "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                    "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                    "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                    "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                    "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                    "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                    "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                    "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                    "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                    "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                    "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                    "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                    "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                    "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                    "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
                  ]
                ],
                "type": "string"
              },
              "reference": {
                "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission",
                "type": "string"
              },
              "remaining": {
                "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED",
                "format": "int64",
                "type": "integer"
              },
              "side": {
                "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                "enum": [
                  [
                    "SIDE_UNSPECIFIED",
                    "SIDE_BUY",
                    "SIDE_SELL"
                  ]
                ],
                "type": "string"
              },
              "size": {
                "description": "Size for the order, for example, in a futures market the size equals the number of contracts",
                "format": "int64",
                "type": "integer"
              },
              "status": {
                "description": "The current status for the order. See [`Order.Status`](#vega.Order.Status) - For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field",
                "enum": [
                  [
                    "STATUS_UNSPECIFIED",
                    "STATUS_ACTIVE",
                    "STATUS_EXPIRED",
                    "STATUS_CANCELLED",
                    "STATUS_STOPPED",
                    "STATUS_FILLED",
                    "STATUS_REJECTED",
                    "STATUS_PARTIALLY_FILLED",
                    "STATUS_PARKED"
                  ]
                ],
                "type": "string"
              },
              "time_in_force": {
                "description": "Time in force indicates how long an order will remain active before it is executed or expires. - See [`Order.TimeInForce`](#vega.Order.TimeInForce)",
                "enum": [
                  [
                    "TIME_IN_FORCE_UNSPECIFIED",
                    "TIME_IN_FORCE_GTC",
                    "TIME_IN_FORCE_GTT",
                    "TIME_IN_FORCE_IOC",
                    "TIME_IN_FORCE_FOK",
                    "TIME_IN_FORCE_GFA",
                    "TIME_IN_FORCE_GFN"
                  ]
                ],
                "type": "string"
              },
              "type": {
                "description": "Type for the order - See [`Order.Type`](#vega.Order.Type)",
                "enum": [
                  [
                    "TYPE_UNSPECIFIED",
                    "TYPE_LIMIT",
                    "TYPE_MARKET",
                    "TYPE_NETWORK"
                  ]
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "version": {
                "description": "The version for the order, initial value is version 1 and is incremented after each successful amend",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.EstimateFeeResponse": {
        "description": "Response to a EstimateFeeRequest, containing the estimated fees for a given order",
        "properties": {
          "fee": {
            "description": "Summary of the estimated fees for this order if it were to trade now",
            "properties": {
              "infrastructure_fee": {
                "description": "Fee amount paid for maintaining the Vega infrastructure",
                "type": "string"
              },
              "liquidity_fee": {
                "description": "Fee amount paid to market makers",
                "type": "string"
              },
              "maker_fee": {
                "description": "Fee amount paid to the non-aggressive party of the trade",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.EstimateMarginRequest": {
        "description": "Request to fetch the estimated MarginLevels if an order were to trade immediately",
        "properties": {
          "order": {
            "description": "Order to estimate fees for",
            "properties": {
              "batch_id": {
                "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)",
                "format": "int64",
                "type": "integer"
              },
              "created_at": {
                "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "expires_at": {
                "description": "Timestamp for when the order will expire, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`",
                "format": "int64",
                "type": "integer"
              },
              "id": {
                "description": "Unique identifier for the order (set by the system after consensus)",
                "type": "string"
              },
              "liquidity_provision_id": {
                "description": "Is this order created as part of a liquidity provision, will be empty if not.",
                "type": "string"
              },
              "market_id": {
                "description": "Market identifier for the order",
                "type": "string"
              },
              "party_id": {
                "description": "Party identifier for the order",
                "type": "string"
              },
              "pegged_order": {
                "description": "Pegged order details, used only if the order represents a pegged order.",
                "properties": {
                  "offset": {
                    "description": "Offset from the price reference",
                    "type": "string"
                  },
                  "reference": {
                    "description": "Which price point are we linked to",
                    "enum": [
                      [
                        "PEGGED_REFERENCE_UNSPECIFIED",
                        "PEGGED_REFERENCE_MID",
                        "PEGGED_REFERENCE_BEST_BID",
                        "PEGGED_REFERENCE_BEST_ASK"
                      ]
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "price": {
                "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "reason": {
                "description": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors",
                "enum": [
                  [
                    "ORDER_ERROR_UNSPECIFIED",
                    "ORDER_ERROR_INVALID_MARKET_ID",
                    "ORDER_ERROR_INVALID_ORDER_ID",
                    "ORDER_ERROR_OUT_OF_SEQUENCE",
                    "ORDER_ERROR_INVALID_REMAINING_SIZE",
                    "ORDER_ERROR_TIME_FAILURE",
                    "ORDER_ERROR_REMOVAL_FAILURE",
                    "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                    "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                    "ORDER_ERROR_EDIT_NOT_ALLOWED",
                    "ORDER_ERROR_AMEND_FAILURE",
                    "ORDER_ERROR_NOT_FOUND",
                    "ORDER_ERROR_INVALID_PARTY_ID",
                    "ORDER_ERROR_MARKET_CLOSED",
                    "ORDER_ERROR_MARGIN_CHECK_FAILED",
                    "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                    "ORDER_ERROR_INTERNAL_ERROR",
                    "ORDER_ERROR_INVALID_SIZE",
                    "ORDER_ERROR_INVALID_PERSISTENCE",
                    "ORDER_ERROR_INVALID_TYPE",
                    "ORDER_ERROR_SELF_TRADING",
                    "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                    "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                    "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                    "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                    "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                    "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                    "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                    "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                    "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                    "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                    "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                    "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                    "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                    "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                    "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                    "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                    "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                    "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                    "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                    "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                    "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                    "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                    "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                    "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                    "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
                  ]
                ],
                "type": "string"
              },
              "reference": {
                "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission",
                "type": "string"
              },
              "remaining": {
                "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED",
                "format": "int64",
                "type": "integer"
              },
              "side": {
                "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                "enum": [
                  [
                    "SIDE_UNSPECIFIED",
                    "SIDE_BUY",
                    "SIDE_SELL"
                  ]
                ],
                "type": "string"
              },
              "size": {
                "description": "Size for the order, for example, in a futures market the size equals the number of contracts",
                "format": "int64",
                "type": "integer"
              },
              "status": {
                "description": "The current status for the order. See [`Order.Status`](#vega.Order.Status) - For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field",
                "enum": [
                  [
                    "STATUS_UNSPECIFIED",
                    "STATUS_ACTIVE",
                    "STATUS_EXPIRED",
                    "STATUS_CANCELLED",
                    "STATUS_STOPPED",
                    "STATUS_FILLED",
                    "STATUS_REJECTED",
                    "STATUS_PARTIALLY_FILLED",
                    "STATUS_PARKED"
                  ]
                ],
                "type": "string"
              },
              "time_in_force": {
                "description": "Time in force indicates how long an order will remain active before it is executed or expires. - See [`Order.TimeInForce`](#vega.Order.TimeInForce)",
                "enum": [
                  [
                    "TIME_IN_FORCE_UNSPECIFIED",
                    "TIME_IN_FORCE_GTC",
                    "TIME_IN_FORCE_GTT",
                    "TIME_IN_FORCE_IOC",
                    "TIME_IN_FORCE_FOK",
                    "TIME_IN_FORCE_GFA",
                    "TIME_IN_FORCE_GFN"
                  ]
                ],
                "type": "string"
              },
              "type": {
                "description": "Type for the order - See [`Order.Type`](#vega.Order.Type)",
                "enum": [
                  [
                    "TYPE_UNSPECIFIED",
                    "TYPE_LIMIT",
                    "TYPE_MARKET",
                    "TYPE_NETWORK"
                  ]
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "version": {
                "description": "The version for the order, initial value is version 1 and is incremented after each successful amend",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.EstimateMarginResponse": {
        "description": "Response to a EstimateMarginRequest, containing the estimated marginLevels for a given order",
        "properties": {
          "margin_levels": {
            "description": "Summary of the estimated margins for this order if it were to trade now",
            "properties": {
              "asset": {
                "description": "Asset identifier",
                "type": "string"
              },
              "collateral_release_level": {
                "description": "Collateral release level value",
                "type": "string"
              },
              "initial_margin": {
                "description": "Initial margin value",
                "type": "string"
              },
              "maintenance_margin": {
                "description": "Maintenance margin value",
                "type": "string"
              },
              "market_id": {
                "description": "Market identifier",
                "type": "string"
              },
              "party_id": {
                "description": "Party identifier",
                "type": "string"
              },
              "search_level": {
                "description": "Search level value",
                "type": "string"
              },
              "timestamp": {
                "description": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.FeeInfrastructureAccountsRequest": {
        "description": "Request for a list of infrastructure fee accounts",
        "properties": {
          "asset": {
            "description": "Asset identifier, required field - Set to an empty string to return all accounts - Set to an asset ID to return a single infrastructure fee account for a given asset",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.FeeInfrastructureAccountsResponse": {
        "description": "Response for a list of infrastructure fee accounts",
        "properties": {
          "accounts": {
            "description": "A list of 0 or more infrastructure fee accounts",
            "items": {
              "description": "Represents an account for an asset on Vega for a particular owner or party",
              "properties": {
                "asset": {
                  "description": "Asset identifier for the account",
                  "type": "string"
                },
                "balance": {
                  "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places and importantly balances cannot be negative",
                  "type": "string"
                },
                "id": {
                  "description": "Unique account identifier (used internally by Vega)",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty",
                  "type": "string"
                },
                "owner": {
                  "description": "The party that the account belongs to, special values include `network`, which represents the Vega network and is most commonly seen during liquidation of distressed trading positions",
                  "type": "string"
                },
                "type": {
                  "description": "The account type related to this account",
                  "enum": [
                    [
                      "ACCOUNT_TYPE_UNSPECIFIED",
                      "ACCOUNT_TYPE_INSURANCE",
                      "ACCOUNT_TYPE_SETTLEMENT",
                      "ACCOUNT_TYPE_MARGIN",
                      "ACCOUNT_TYPE_GENERAL",
                      "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                      "ACCOUNT_TYPE_FEES_LIQUIDITY",
                      "ACCOUNT_TYPE_FEES_MAKER",
                      "ACCOUNT_TYPE_LOCK_WITHDRAW",
                      "ACCOUNT_TYPE_BOND",
                      "ACCOUNT_TYPE_EXTERNAL",
                      "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                      "ACCOUNT_TYPE_GLOBAL_REWARD",
                      "ACCOUNT_TYPE_PENDING_TRANSFERS",
                      "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                      "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetEpochRequest": {
        "properties": {
          "id": {
            "description": "Optional - if id omitted it gets the current epoch",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetEpochResponse": {
        "properties": {
          "epoch": {
            "properties": {
              "delegations": {
                "description": "List of all delegations in epoch",
                "items": {
                  "properties": {
                    "amount": {
                      "description": "Amount delegated",
                      "type": "string"
                    },
                    "epoch_seq": {
                      "description": "Epoch of delegation",
                      "type": "string"
                    },
                    "node_id": {
                      "description": "Node ID",
                      "type": "string"
                    },
                    "party": {
                      "description": "Party which is delegating",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "seq": {
                "description": "Sequence is used as epoch identifier",
                "format": "int64",
                "type": "integer"
              },
              "timestamps": {
                "description": "Timestamps for start/end etc",
                "properties": {
                  "end_time": {
                    "description": "Timestamp of epoch end in nanoseconds, empty if not started - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                    "format": "int64",
                    "type": "integer"
                  },
                  "expiry_time": {
                    "description": "Timestamp of epoch expiry in nanoseconds - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                    "format": "int64",
                    "type": "integer"
                  },
                  "first_block": {
                    "description": "Height of first block in the epoch",
                    "format": "int64",
                    "type": "integer"
                  },
                  "last_block": {
                    "description": "Height of last block in the epoch, empty if not ended",
                    "format": "int64",
                    "type": "integer"
                  },
                  "start_time": {
                    "description": "Timestamp of epoch start in nanoseconds - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "validators": {
                "description": "Validators that participated in this epoch",
                "items": {
                  "properties": {
                    "avatar_url": {
                      "description": "Avatar url",
                      "type": "string"
                    },
                    "delegations": {
                      "description": "Node's delegations",
                      "items": {
                        "properties": {
                          "amount": {
                            "description": "Amount delegated",
                            "type": "string"
                          },
                          "epoch_seq": {
                            "description": "Epoch of delegation",
                            "type": "string"
                          },
                          "node_id": {
                            "description": "Node ID",
                            "type": "string"
                          },
                          "party": {
                            "description": "Party which is delegating",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "epoch_data": {
                      "description": "Informantion about epoch",
                      "properties": {
                        "offline": {
                          "description": "Total number of offline epochs since node was created",
                          "format": "int32",
                          "type": "integer"
                        },
                        "online": {
                          "description": "Total number of online epochs since node was created",
                          "format": "int32",
                          "type": "integer"
                        },
                        "total": {
                          "description": "Total number of epochs since node was created",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "ethereum_adddress": {
                      "description": "Ethereum public key of the node",
                      "type": "string"
                    },
                    "id": {
                      "description": "The node ID (wallet ID)",
                      "type": "string"
                    },
                    "info_url": {
                      "description": "URL where I can find out more info on the node",
                      "type": "string"
                    },
                    "location": {
                      "description": "Country code for the location of the node",
                      "type": "string"
                    },
                    "max_intended_stake": {
                      "description": "Max amount of (wanted) stake, is this a network param or a node param",
                      "type": "string"
                    },
                    "name": {
                      "description": "Node name",
                      "type": "string"
                    },
                    "normalised_score": {
                      "description": "Node normalised score",
                      "type": "string"
                    },
                    "pending_stake": {
                      "description": "Amount of stake on the next epoch",
                      "type": "string"
                    },
                    "performance": {
                      "description": "Performance",
                      "type": "string"
                    },
                    "pub_key": {
                      "description": "Pub key of the node operator",
                      "type": "string"
                    },
                    "raw_score": {
                      "description": "Raw Score",
                      "type": "string"
                    },
                    "score": {
                      "description": "Node score",
                      "type": "string"
                    },
                    "staked_by_delegates": {
                      "description": "The amount of stake that has been delegated by token holders",
                      "type": "string"
                    },
                    "staked_by_operator": {
                      "description": "The amount the node has put up themselves",
                      "type": "string"
                    },
                    "staked_total": {
                      "description": "Total amount staked on node",
                      "type": "string"
                    },
                    "status": {
                      "description": "Node status",
                      "enum": [
                        [
                          "NODE_STATUS_UNSPECIFIED",
                          "NODE_STATUS_VALIDATOR",
                          "NODE_STATUS_NON_VALIDATOR"
                        ]
                      ],
                      "type": "string"
                    },
                    "tm_pub_key": {
                      "description": "Public key of Tendermint",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetKeyRotationsByNodeRequest": {
        "description": "Request to list all key rotations per node",
        "properties": {
          "node_id": {
            "description": "Required id of node",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetKeyRotationsByNodeResponse": {
        "description": "Response with all key rotations per node",
        "properties": {
          "rotations": {
            "items": {
              "properties": {
                "block_height": {
                  "format": "int64",
                  "type": "integer"
                },
                "new_pub_key": {
                  "type": "string"
                },
                "node_id": {
                  "type": "string"
                },
                "old_pub_key": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetKeyRotationsRequest": {
        "description": "Request to list all key rotations",
        "type": "object"
      },
      "datanode.api.v1.GetKeyRotationsResponse": {
        "description": "Response with all key rotations",
        "properties": {
          "rotations": {
            "items": {
              "properties": {
                "block_height": {
                  "format": "int64",
                  "type": "integer"
                },
                "new_pub_key": {
                  "type": "string"
                },
                "node_id": {
                  "type": "string"
                },
                "old_pub_key": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetNetworkParametersProposalsRequest": {
        "description": "Request for a list of network parameter proposals",
        "properties": {
          "select_in_state": {
            "description": "Optional proposal state",
            "properties": {
              "value": {
                "description": "Proposal state value",
                "enum": [
                  [
                    "STATE_UNSPECIFIED",
                    "STATE_FAILED",
                    "STATE_OPEN",
                    "STATE_PASSED",
                    "STATE_REJECTED",
                    "STATE_DECLINED",
                    "STATE_ENACTED",
                    "STATE_WAITING_FOR_NODE_VOTE"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetNetworkParametersProposalsResponse": {
        "description": "Response for a list of network parameter proposals",
        "properties": {
          "data": {
            "description": "A list of 0 or more governance data",
            "items": {
              "description": "Governance data",
              "properties": {
                "no": {
                  "description": "All \"no\" votes against the proposal above",
                  "items": {
                    "description": "Governance vote",
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "no_party": {
                  "additionalProperties": {
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "All latest NO votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                  "type": "object"
                },
                "proposal": {
                  "description": "The governance proposal",
                  "properties": {
                    "error_details": {
                      "description": "The detailed error associated to the reason.",
                      "type": "string"
                    },
                    "id": {
                      "description": "Unique proposal identifier",
                      "type": "string"
                    },
                    "party_id": {
                      "description": "Party identifier of the author (the party submitting the proposal)",
                      "type": "string"
                    },
                    "reason": {
                      "description": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses",
                      "enum": [
                        [
                          "PROPOSAL_ERROR_UNSPECIFIED",
                          "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
                          "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
                          "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
                          "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
                          "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
                          "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
                          "PROPOSAL_ERROR_NO_PRODUCT",
                          "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
                          "PROPOSAL_ERROR_NO_TRADING_MODE",
                          "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
                          "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
                          "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
                          "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
                          "PROPOSAL_ERROR_INVALID_ASSET",
                          "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
                          "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
                          "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
                          "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
                          "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
                          "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
                          "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
                          "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
                          "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
                          "PROPOSAL_ERROR_INVALID_SHAPE",
                          "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
                          "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
                          "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
                          "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
                        ]
                      ],
                      "type": "string"
                    },
                    "reference": {
                      "description": "Proposal reference",
                      "type": "string"
                    },
                    "state": {
                      "description": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition",
                      "enum": [
                        [
                          "STATE_UNSPECIFIED",
                          "STATE_FAILED",
                          "STATE_OPEN",
                          "STATE_PASSED",
                          "STATE_REJECTED",
                          "STATE_DECLINED",
                          "STATE_ENACTED",
                          "STATE_WAITING_FOR_NODE_VOTE"
                        ]
                      ],
                      "type": "string"
                    },
                    "terms": {
                      "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted",
                      "properties": {
                        "change": {
                          "oneOf": [
                            {
                              "description": "Proposal change for modifying an existing market on Vega",
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for creating new market on Vega",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new market",
                                  "properties": {
                                    "decimal_places": {
                                      "description": "Decimal places used for the new market",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "instrument": {
                                      "description": "New market instrument configuration",
                                      "properties": {
                                        "code": {
                                          "description": "Instrument code",
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "Instrument name",
                                          "type": "string"
                                        },
                                        "product": {
                                          "oneOf": [
                                            {
                                              "description": "Future",
                                              "properties": {
                                                "oracle_spec_binding": {
                                                  "description": "The binding between the oracle spec and the settlement price",
                                                  "properties": {
                                                    "settlement_price_property": {
                                                      "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                                      "type": "string"
                                                    },
                                                    "trading_termination_property": {
                                                      "description": "the name of the property in the oracle data that signals termination of trading",
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "oracle_spec_for_settlement_price": {
                                                  "description": "The oracle spec describing the oracle data of settlement price",
                                                  "properties": {
                                                    "filters": {
                                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                      "items": {
                                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                        "properties": {
                                                          "conditions": {
                                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                            "items": {
                                                              "description": "Condition describes the condition that must be validated by the",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "comparator is the type of comparison to make on the value.",
                                                                  "enum": [
                                                                    [
                                                                      "OPERATOR_UNSPECIFIED",
                                                                      "OPERATOR_EQUALS",
                                                                      "OPERATOR_GREATER_THAN",
                                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                      "OPERATOR_LESS_THAN",
                                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                    ]
                                                                  ],
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "description": "value is used by the comparator.",
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "key": {
                                                            "description": "key is the oracle data property key targeted by the filter.",
                                                            "properties": {
                                                              "name": {
                                                                "description": "name is the name of the property.",
                                                                "type": "string"
                                                              },
                                                              "type": {
                                                                "description": "type is the type of the property.",
                                                                "enum": [
                                                                  [
                                                                    "TYPE_UNSPECIFIED",
                                                                    "TYPE_EMPTY",
                                                                    "TYPE_INTEGER",
                                                                    "TYPE_STRING",
                                                                    "TYPE_BOOLEAN",
                                                                    "TYPE_DECIMAL",
                                                                    "TYPE_TIMESTAMP"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pub_keys": {
                                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "oracle_spec_for_trading_termination": {
                                                  "description": "The oracle spec describing the oracle data of trading termination",
                                                  "properties": {
                                                    "filters": {
                                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                      "items": {
                                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                        "properties": {
                                                          "conditions": {
                                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                            "items": {
                                                              "description": "Condition describes the condition that must be validated by the",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "comparator is the type of comparison to make on the value.",
                                                                  "enum": [
                                                                    [
                                                                      "OPERATOR_UNSPECIFIED",
                                                                      "OPERATOR_EQUALS",
                                                                      "OPERATOR_GREATER_THAN",
                                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                      "OPERATOR_LESS_THAN",
                                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                    ]
                                                                  ],
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "description": "value is used by the comparator.",
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "key": {
                                                            "description": "key is the oracle data property key targeted by the filter.",
                                                            "properties": {
                                                              "name": {
                                                                "description": "name is the name of the property.",
                                                                "type": "string"
                                                              },
                                                              "type": {
                                                                "description": "type is the type of the property.",
                                                                "enum": [
                                                                  [
                                                                    "TYPE_UNSPECIFIED",
                                                                    "TYPE_EMPTY",
                                                                    "TYPE_INTEGER",
                                                                    "TYPE_STRING",
                                                                    "TYPE_BOOLEAN",
                                                                    "TYPE_DECIMAL",
                                                                    "TYPE_TIMESTAMP"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pub_keys": {
                                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "quote_name": {
                                                  "description": "Product quote name",
                                                  "type": "string"
                                                },
                                                "settlement_asset": {
                                                  "description": "Product settlement asset identifier",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "liquidity_monitoring_parameters": {
                                      "description": "Liquidity monitoring parameters",
                                      "properties": {
                                        "auction_extension": {
                                          "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "target_stake_parameters": {
                                          "description": "Specifies parameters related to target stake calculation",
                                          "properties": {
                                            "scaling_factor": {
                                              "description": "Specifies scaling factors used in target stake calculation",
                                              "type": "number"
                                            },
                                            "time_window": {
                                              "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                              "format": "int64",
                                              "type": "integer"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "triggering_ratio": {
                                          "description": "Specifies the triggering ratio for entering liquidity auction",
                                          "type": "number"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "metadata": {
                                      "description": "Optional new market meta data, tags",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "price_monitoring_parameters": {
                                      "description": "Price monitoring parameters",
                                      "properties": {
                                        "triggers": {
                                          "items": {
                                            "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                            "properties": {
                                              "auction_extension": {
                                                "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "horizon": {
                                                "description": "Price monitoring projection horizon τ in seconds",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "probability": {
                                                "description": "Price monitoring probability level p",
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "risk_parameters": {
                                      "oneOf": [
                                        {
                                          "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                                          "properties": {
                                            "factor_long": {
                                              "description": "Pre-defined risk factor value for long",
                                              "type": "number"
                                            },
                                            "factor_short": {
                                              "description": "Pre-defined risk factor value for short",
                                              "type": "number"
                                            },
                                            "max_move_up": {
                                              "description": "Pre-defined maximum price move up that the model considers as valid",
                                              "type": "number"
                                            },
                                            "min_move_down": {
                                              "description": "Pre-defined minimum price move down that the model considers as valid",
                                              "type": "number"
                                            },
                                            "probability_of_trading": {
                                              "description": "Pre-defined constant probability of trading",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                                          "properties": {
                                            "params": {
                                              "description": "Risk model parameters for log normal",
                                              "properties": {
                                                "mu": {
                                                  "description": "Mu param",
                                                  "type": "number"
                                                },
                                                "r": {
                                                  "description": "R param",
                                                  "type": "number"
                                                },
                                                "sigma": {
                                                  "description": "Sigma param",
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "risk_aversion_parameter": {
                                              "description": "Risk Aversion Parameter",
                                              "type": "number"
                                            },
                                            "tau": {
                                              "description": "Tau",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "liquidity_commitment": {
                                  "description": "The commitment from the party creating the NewMarket proposal",
                                  "properties": {
                                    "buys": {
                                      "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                                      "items": {
                                        "description": "Represents a liquidity order",
                                        "properties": {
                                          "offset": {
                                            "description": "The offset/amount of units away for the order",
                                            "type": "string"
                                          },
                                          "proportion": {
                                            "description": "The relative proportion of the commitment to be allocated at a price level",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "reference": {
                                            "description": "The pegged reference point for the order",
                                            "enum": [
                                              [
                                                "PEGGED_REFERENCE_UNSPECIFIED",
                                                "PEGGED_REFERENCE_MID",
                                                "PEGGED_REFERENCE_BEST_BID",
                                                "PEGGED_REFERENCE_BEST_ASK"
                                              ]
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "commitment_amount": {
                                      "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                                      "type": "string"
                                    },
                                    "fee": {
                                      "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                                      "type": "string"
                                    },
                                    "reference": {
                                      "description": "A reference to be associated to all orders created from this commitment",
                                      "type": "string"
                                    },
                                    "sells": {
                                      "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                                      "items": {
                                        "description": "Represents a liquidity order",
                                        "properties": {
                                          "offset": {
                                            "description": "The offset/amount of units away for the order",
                                            "type": "string"
                                          },
                                          "proportion": {
                                            "description": "The relative proportion of the commitment to be allocated at a price level",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "reference": {
                                            "description": "The pegged reference point for the order",
                                            "enum": [
                                              [
                                                "PEGGED_REFERENCE_UNSPECIFIED",
                                                "PEGGED_REFERENCE_MID",
                                                "PEGGED_REFERENCE_BEST_BID",
                                                "PEGGED_REFERENCE_BEST_ASK"
                                              ]
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for updating Vega network parameters",
                              "properties": {
                                "changes": {
                                  "description": "The network parameter to update",
                                  "properties": {
                                    "key": {
                                      "description": "The unique key",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value for the network parameter",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for creating new assets on Vega",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new asset",
                                  "properties": {
                                    "decimals": {
                                      "description": "Number of decimal / precision handled by this asset",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "Name of the asset (e.g: Great British Pound)",
                                      "type": "string"
                                    },
                                    "quantum": {
                                      "description": "The minimum economically meaningful amount in the asset",
                                      "type": "string"
                                    },
                                    "source": {
                                      "oneOf": [
                                        {
                                          "description": "A built-in asset",
                                          "properties": {
                                            "max_faucet_amount_mint": {
                                              "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "An Ethereum ERC20 asset",
                                          "properties": {
                                            "contract_address": {
                                              "description": "The address of the contract for the token, on the ethereum network",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    },
                                    "symbol": {
                                      "description": "Symbol of the asset (e.g: GBP)",
                                      "type": "string"
                                    },
                                    "total_supply": {
                                      "description": "Total circulating supply for the asset",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for a freeform voting thing",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new freeform",
                                  "properties": {
                                    "description": {
                                      "description": "A short description of what is being proposed",
                                      "type": "string"
                                    },
                                    "hash": {
                                      "description": "The hash on the content of the URL",
                                      "type": "string"
                                    },
                                    "url": {
                                      "description": "The URL containing content that describes the proposal",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "closing_timestamp": {
                          "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
                          "format": "int64",
                          "type": "integer"
                        },
                        "enactment_timestamp": {
                          "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
                          "format": "int64",
                          "type": "integer"
                        },
                        "validation_timestamp": {
                          "description": "Validation timestamp (Unix time in seconds)",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "timestamp": {
                      "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "yes": {
                  "description": "All \"yes\" votes in favour of the proposal above",
                  "items": {
                    "description": "Governance vote",
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "yes_party": {
                  "additionalProperties": {
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "All latest YES votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetNewAssetProposalsRequest": {
        "description": "Request for a list of new asset proposals",
        "properties": {
          "select_in_state": {
            "description": "Optional proposal state",
            "properties": {
              "value": {
                "description": "Proposal state value",
                "enum": [
                  [
                    "STATE_UNSPECIFIED",
                    "STATE_FAILED",
                    "STATE_OPEN",
                    "STATE_PASSED",
                    "STATE_REJECTED",
                    "STATE_DECLINED",
                    "STATE_ENACTED",
                    "STATE_WAITING_FOR_NODE_VOTE"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetNewAssetProposalsResponse": {
        "description": "Response for a list of new asset proposals",
        "properties": {
          "data": {
            "description": "A list of 0 or more governance data",
            "items": {
              "description": "Governance data",
              "properties": {
                "no": {
                  "description": "All \"no\" votes against the proposal above",
                  "items": {
                    "description": "Governance vote",
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "no_party": {
                  "additionalProperties": {
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "All latest NO votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                  "type": "object"
                },
                "proposal": {
                  "description": "The governance proposal",
                  "properties": {
                    "error_details": {
                      "description": "The detailed error associated to the reason.",
                      "type": "string"
                    },
                    "id": {
                      "description": "Unique proposal identifier",
                      "type": "string"
                    },
                    "party_id": {
                      "description": "Party identifier of the author (the party submitting the proposal)",
                      "type": "string"
                    },
                    "reason": {
                      "description": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses",
                      "enum": [
                        [
                          "PROPOSAL_ERROR_UNSPECIFIED",
                          "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
                          "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
                          "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
                          "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
                          "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
                          "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
                          "PROPOSAL_ERROR_NO_PRODUCT",
                          "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
                          "PROPOSAL_ERROR_NO_TRADING_MODE",
                          "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
                          "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
                          "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
                          "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
                          "PROPOSAL_ERROR_INVALID_ASSET",
                          "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
                          "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
                          "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
                          "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
                          "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
                          "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
                          "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
                          "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
                          "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
                          "PROPOSAL_ERROR_INVALID_SHAPE",
                          "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
                          "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
                          "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
                          "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
                        ]
                      ],
                      "type": "string"
                    },
                    "reference": {
                      "description": "Proposal reference",
                      "type": "string"
                    },
                    "state": {
                      "description": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition",
                      "enum": [
                        [
                          "STATE_UNSPECIFIED",
                          "STATE_FAILED",
                          "STATE_OPEN",
                          "STATE_PASSED",
                          "STATE_REJECTED",
                          "STATE_DECLINED",
                          "STATE_ENACTED",
                          "STATE_WAITING_FOR_NODE_VOTE"
                        ]
                      ],
                      "type": "string"
                    },
                    "terms": {
                      "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted",
                      "properties": {
                        "change": {
                          "oneOf": [
                            {
                              "description": "Proposal change for modifying an existing market on Vega",
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for creating new market on Vega",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new market",
                                  "properties": {
                                    "decimal_places": {
                                      "description": "Decimal places used for the new market",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "instrument": {
                                      "description": "New market instrument configuration",
                                      "properties": {
                                        "code": {
                                          "description": "Instrument code",
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "Instrument name",
                                          "type": "string"
                                        },
                                        "product": {
                                          "oneOf": [
                                            {
                                              "description": "Future",
                                              "properties": {
                                                "oracle_spec_binding": {
                                                  "description": "The binding between the oracle spec and the settlement price",
                                                  "properties": {
                                                    "settlement_price_property": {
                                                      "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                                      "type": "string"
                                                    },
                                                    "trading_termination_property": {
                                                      "description": "the name of the property in the oracle data that signals termination of trading",
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "oracle_spec_for_settlement_price": {
                                                  "description": "The oracle spec describing the oracle data of settlement price",
                                                  "properties": {
                                                    "filters": {
                                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                      "items": {
                                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                        "properties": {
                                                          "conditions": {
                                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                            "items": {
                                                              "description": "Condition describes the condition that must be validated by the",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "comparator is the type of comparison to make on the value.",
                                                                  "enum": [
                                                                    [
                                                                      "OPERATOR_UNSPECIFIED",
                                                                      "OPERATOR_EQUALS",
                                                                      "OPERATOR_GREATER_THAN",
                                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                      "OPERATOR_LESS_THAN",
                                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                    ]
                                                                  ],
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "description": "value is used by the comparator.",
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "key": {
                                                            "description": "key is the oracle data property key targeted by the filter.",
                                                            "properties": {
                                                              "name": {
                                                                "description": "name is the name of the property.",
                                                                "type": "string"
                                                              },
                                                              "type": {
                                                                "description": "type is the type of the property.",
                                                                "enum": [
                                                                  [
                                                                    "TYPE_UNSPECIFIED",
                                                                    "TYPE_EMPTY",
                                                                    "TYPE_INTEGER",
                                                                    "TYPE_STRING",
                                                                    "TYPE_BOOLEAN",
                                                                    "TYPE_DECIMAL",
                                                                    "TYPE_TIMESTAMP"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pub_keys": {
                                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "oracle_spec_for_trading_termination": {
                                                  "description": "The oracle spec describing the oracle data of trading termination",
                                                  "properties": {
                                                    "filters": {
                                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                      "items": {
                                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                        "properties": {
                                                          "conditions": {
                                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                            "items": {
                                                              "description": "Condition describes the condition that must be validated by the",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "comparator is the type of comparison to make on the value.",
                                                                  "enum": [
                                                                    [
                                                                      "OPERATOR_UNSPECIFIED",
                                                                      "OPERATOR_EQUALS",
                                                                      "OPERATOR_GREATER_THAN",
                                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                      "OPERATOR_LESS_THAN",
                                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                    ]
                                                                  ],
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "description": "value is used by the comparator.",
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "key": {
                                                            "description": "key is the oracle data property key targeted by the filter.",
                                                            "properties": {
                                                              "name": {
                                                                "description": "name is the name of the property.",
                                                                "type": "string"
                                                              },
                                                              "type": {
                                                                "description": "type is the type of the property.",
                                                                "enum": [
                                                                  [
                                                                    "TYPE_UNSPECIFIED",
                                                                    "TYPE_EMPTY",
                                                                    "TYPE_INTEGER",
                                                                    "TYPE_STRING",
                                                                    "TYPE_BOOLEAN",
                                                                    "TYPE_DECIMAL",
                                                                    "TYPE_TIMESTAMP"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pub_keys": {
                                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "quote_name": {
                                                  "description": "Product quote name",
                                                  "type": "string"
                                                },
                                                "settlement_asset": {
                                                  "description": "Product settlement asset identifier",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "liquidity_monitoring_parameters": {
                                      "description": "Liquidity monitoring parameters",
                                      "properties": {
                                        "auction_extension": {
                                          "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "target_stake_parameters": {
                                          "description": "Specifies parameters related to target stake calculation",
                                          "properties": {
                                            "scaling_factor": {
                                              "description": "Specifies scaling factors used in target stake calculation",
                                              "type": "number"
                                            },
                                            "time_window": {
                                              "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                              "format": "int64",
                                              "type": "integer"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "triggering_ratio": {
                                          "description": "Specifies the triggering ratio for entering liquidity auction",
                                          "type": "number"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "metadata": {
                                      "description": "Optional new market meta data, tags",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "price_monitoring_parameters": {
                                      "description": "Price monitoring parameters",
                                      "properties": {
                                        "triggers": {
                                          "items": {
                                            "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                            "properties": {
                                              "auction_extension": {
                                                "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "horizon": {
                                                "description": "Price monitoring projection horizon τ in seconds",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "probability": {
                                                "description": "Price monitoring probability level p",
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "risk_parameters": {
                                      "oneOf": [
                                        {
                                          "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                                          "properties": {
                                            "factor_long": {
                                              "description": "Pre-defined risk factor value for long",
                                              "type": "number"
                                            },
                                            "factor_short": {
                                              "description": "Pre-defined risk factor value for short",
                                              "type": "number"
                                            },
                                            "max_move_up": {
                                              "description": "Pre-defined maximum price move up that the model considers as valid",
                                              "type": "number"
                                            },
                                            "min_move_down": {
                                              "description": "Pre-defined minimum price move down that the model considers as valid",
                                              "type": "number"
                                            },
                                            "probability_of_trading": {
                                              "description": "Pre-defined constant probability of trading",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                                          "properties": {
                                            "params": {
                                              "description": "Risk model parameters for log normal",
                                              "properties": {
                                                "mu": {
                                                  "description": "Mu param",
                                                  "type": "number"
                                                },
                                                "r": {
                                                  "description": "R param",
                                                  "type": "number"
                                                },
                                                "sigma": {
                                                  "description": "Sigma param",
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "risk_aversion_parameter": {
                                              "description": "Risk Aversion Parameter",
                                              "type": "number"
                                            },
                                            "tau": {
                                              "description": "Tau",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "liquidity_commitment": {
                                  "description": "The commitment from the party creating the NewMarket proposal",
                                  "properties": {
                                    "buys": {
                                      "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                                      "items": {
                                        "description": "Represents a liquidity order",
                                        "properties": {
                                          "offset": {
                                            "description": "The offset/amount of units away for the order",
                                            "type": "string"
                                          },
                                          "proportion": {
                                            "description": "The relative proportion of the commitment to be allocated at a price level",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "reference": {
                                            "description": "The pegged reference point for the order",
                                            "enum": [
                                              [
                                                "PEGGED_REFERENCE_UNSPECIFIED",
                                                "PEGGED_REFERENCE_MID",
                                                "PEGGED_REFERENCE_BEST_BID",
                                                "PEGGED_REFERENCE_BEST_ASK"
                                              ]
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "commitment_amount": {
                                      "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                                      "type": "string"
                                    },
                                    "fee": {
                                      "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                                      "type": "string"
                                    },
                                    "reference": {
                                      "description": "A reference to be associated to all orders created from this commitment",
                                      "type": "string"
                                    },
                                    "sells": {
                                      "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                                      "items": {
                                        "description": "Represents a liquidity order",
                                        "properties": {
                                          "offset": {
                                            "description": "The offset/amount of units away for the order",
                                            "type": "string"
                                          },
                                          "proportion": {
                                            "description": "The relative proportion of the commitment to be allocated at a price level",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "reference": {
                                            "description": "The pegged reference point for the order",
                                            "enum": [
                                              [
                                                "PEGGED_REFERENCE_UNSPECIFIED",
                                                "PEGGED_REFERENCE_MID",
                                                "PEGGED_REFERENCE_BEST_BID",
                                                "PEGGED_REFERENCE_BEST_ASK"
                                              ]
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for updating Vega network parameters",
                              "properties": {
                                "changes": {
                                  "description": "The network parameter to update",
                                  "properties": {
                                    "key": {
                                      "description": "The unique key",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value for the network parameter",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for creating new assets on Vega",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new asset",
                                  "properties": {
                                    "decimals": {
                                      "description": "Number of decimal / precision handled by this asset",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "Name of the asset (e.g: Great British Pound)",
                                      "type": "string"
                                    },
                                    "quantum": {
                                      "description": "The minimum economically meaningful amount in the asset",
                                      "type": "string"
                                    },
                                    "source": {
                                      "oneOf": [
                                        {
                                          "description": "A built-in asset",
                                          "properties": {
                                            "max_faucet_amount_mint": {
                                              "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "An Ethereum ERC20 asset",
                                          "properties": {
                                            "contract_address": {
                                              "description": "The address of the contract for the token, on the ethereum network",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    },
                                    "symbol": {
                                      "description": "Symbol of the asset (e.g: GBP)",
                                      "type": "string"
                                    },
                                    "total_supply": {
                                      "description": "Total circulating supply for the asset",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for a freeform voting thing",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new freeform",
                                  "properties": {
                                    "description": {
                                      "description": "A short description of what is being proposed",
                                      "type": "string"
                                    },
                                    "hash": {
                                      "description": "The hash on the content of the URL",
                                      "type": "string"
                                    },
                                    "url": {
                                      "description": "The URL containing content that describes the proposal",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "closing_timestamp": {
                          "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
                          "format": "int64",
                          "type": "integer"
                        },
                        "enactment_timestamp": {
                          "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
                          "format": "int64",
                          "type": "integer"
                        },
                        "validation_timestamp": {
                          "description": "Validation timestamp (Unix time in seconds)",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "timestamp": {
                      "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "yes": {
                  "description": "All \"yes\" votes in favour of the proposal above",
                  "items": {
                    "description": "Governance vote",
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "yes_party": {
                  "additionalProperties": {
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "All latest YES votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetNewFreeformProposalsRequest": {
        "description": "Request for a list of new freeform proposals",
        "properties": {
          "select_in_state": {
            "description": "Optional proposal state",
            "properties": {
              "value": {
                "description": "Proposal state value",
                "enum": [
                  [
                    "STATE_UNSPECIFIED",
                    "STATE_FAILED",
                    "STATE_OPEN",
                    "STATE_PASSED",
                    "STATE_REJECTED",
                    "STATE_DECLINED",
                    "STATE_ENACTED",
                    "STATE_WAITING_FOR_NODE_VOTE"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetNewFreeformProposalsResponse": {
        "description": "Response for a list of new freeform proposals",
        "properties": {
          "data": {
            "description": "A list of 0 or more governance data",
            "items": {
              "description": "Governance data",
              "properties": {
                "no": {
                  "description": "All \"no\" votes against the proposal above",
                  "items": {
                    "description": "Governance vote",
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "no_party": {
                  "additionalProperties": {
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "All latest NO votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                  "type": "object"
                },
                "proposal": {
                  "description": "The governance proposal",
                  "properties": {
                    "error_details": {
                      "description": "The detailed error associated to the reason.",
                      "type": "string"
                    },
                    "id": {
                      "description": "Unique proposal identifier",
                      "type": "string"
                    },
                    "party_id": {
                      "description": "Party identifier of the author (the party submitting the proposal)",
                      "type": "string"
                    },
                    "reason": {
                      "description": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses",
                      "enum": [
                        [
                          "PROPOSAL_ERROR_UNSPECIFIED",
                          "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
                          "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
                          "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
                          "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
                          "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
                          "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
                          "PROPOSAL_ERROR_NO_PRODUCT",
                          "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
                          "PROPOSAL_ERROR_NO_TRADING_MODE",
                          "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
                          "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
                          "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
                          "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
                          "PROPOSAL_ERROR_INVALID_ASSET",
                          "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
                          "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
                          "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
                          "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
                          "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
                          "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
                          "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
                          "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
                          "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
                          "PROPOSAL_ERROR_INVALID_SHAPE",
                          "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
                          "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
                          "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
                          "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
                        ]
                      ],
                      "type": "string"
                    },
                    "reference": {
                      "description": "Proposal reference",
                      "type": "string"
                    },
                    "state": {
                      "description": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition",
                      "enum": [
                        [
                          "STATE_UNSPECIFIED",
                          "STATE_FAILED",
                          "STATE_OPEN",
                          "STATE_PASSED",
                          "STATE_REJECTED",
                          "STATE_DECLINED",
                          "STATE_ENACTED",
                          "STATE_WAITING_FOR_NODE_VOTE"
                        ]
                      ],
                      "type": "string"
                    },
                    "terms": {
                      "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted",
                      "properties": {
                        "change": {
                          "oneOf": [
                            {
                              "description": "Proposal change for modifying an existing market on Vega",
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for creating new market on Vega",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new market",
                                  "properties": {
                                    "decimal_places": {
                                      "description": "Decimal places used for the new market",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "instrument": {
                                      "description": "New market instrument configuration",
                                      "properties": {
                                        "code": {
                                          "description": "Instrument code",
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "Instrument name",
                                          "type": "string"
                                        },
                                        "product": {
                                          "oneOf": [
                                            {
                                              "description": "Future",
                                              "properties": {
                                                "oracle_spec_binding": {
                                                  "description": "The binding between the oracle spec and the settlement price",
                                                  "properties": {
                                                    "settlement_price_property": {
                                                      "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                                      "type": "string"
                                                    },
                                                    "trading_termination_property": {
                                                      "description": "the name of the property in the oracle data that signals termination of trading",
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "oracle_spec_for_settlement_price": {
                                                  "description": "The oracle spec describing the oracle data of settlement price",
                                                  "properties": {
                                                    "filters": {
                                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                      "items": {
                                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                        "properties": {
                                                          "conditions": {
                                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                            "items": {
                                                              "description": "Condition describes the condition that must be validated by the",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "comparator is the type of comparison to make on the value.",
                                                                  "enum": [
                                                                    [
                                                                      "OPERATOR_UNSPECIFIED",
                                                                      "OPERATOR_EQUALS",
                                                                      "OPERATOR_GREATER_THAN",
                                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                      "OPERATOR_LESS_THAN",
                                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                    ]
                                                                  ],
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "description": "value is used by the comparator.",
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "key": {
                                                            "description": "key is the oracle data property key targeted by the filter.",
                                                            "properties": {
                                                              "name": {
                                                                "description": "name is the name of the property.",
                                                                "type": "string"
                                                              },
                                                              "type": {
                                                                "description": "type is the type of the property.",
                                                                "enum": [
                                                                  [
                                                                    "TYPE_UNSPECIFIED",
                                                                    "TYPE_EMPTY",
                                                                    "TYPE_INTEGER",
                                                                    "TYPE_STRING",
                                                                    "TYPE_BOOLEAN",
                                                                    "TYPE_DECIMAL",
                                                                    "TYPE_TIMESTAMP"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pub_keys": {
                                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "oracle_spec_for_trading_termination": {
                                                  "description": "The oracle spec describing the oracle data of trading termination",
                                                  "properties": {
                                                    "filters": {
                                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                      "items": {
                                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                        "properties": {
                                                          "conditions": {
                                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                            "items": {
                                                              "description": "Condition describes the condition that must be validated by the",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "comparator is the type of comparison to make on the value.",
                                                                  "enum": [
                                                                    [
                                                                      "OPERATOR_UNSPECIFIED",
                                                                      "OPERATOR_EQUALS",
                                                                      "OPERATOR_GREATER_THAN",
                                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                      "OPERATOR_LESS_THAN",
                                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                    ]
                                                                  ],
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "description": "value is used by the comparator.",
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "key": {
                                                            "description": "key is the oracle data property key targeted by the filter.",
                                                            "properties": {
                                                              "name": {
                                                                "description": "name is the name of the property.",
                                                                "type": "string"
                                                              },
                                                              "type": {
                                                                "description": "type is the type of the property.",
                                                                "enum": [
                                                                  [
                                                                    "TYPE_UNSPECIFIED",
                                                                    "TYPE_EMPTY",
                                                                    "TYPE_INTEGER",
                                                                    "TYPE_STRING",
                                                                    "TYPE_BOOLEAN",
                                                                    "TYPE_DECIMAL",
                                                                    "TYPE_TIMESTAMP"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pub_keys": {
                                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "quote_name": {
                                                  "description": "Product quote name",
                                                  "type": "string"
                                                },
                                                "settlement_asset": {
                                                  "description": "Product settlement asset identifier",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "liquidity_monitoring_parameters": {
                                      "description": "Liquidity monitoring parameters",
                                      "properties": {
                                        "auction_extension": {
                                          "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "target_stake_parameters": {
                                          "description": "Specifies parameters related to target stake calculation",
                                          "properties": {
                                            "scaling_factor": {
                                              "description": "Specifies scaling factors used in target stake calculation",
                                              "type": "number"
                                            },
                                            "time_window": {
                                              "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                              "format": "int64",
                                              "type": "integer"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "triggering_ratio": {
                                          "description": "Specifies the triggering ratio for entering liquidity auction",
                                          "type": "number"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "metadata": {
                                      "description": "Optional new market meta data, tags",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "price_monitoring_parameters": {
                                      "description": "Price monitoring parameters",
                                      "properties": {
                                        "triggers": {
                                          "items": {
                                            "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                            "properties": {
                                              "auction_extension": {
                                                "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "horizon": {
                                                "description": "Price monitoring projection horizon τ in seconds",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "probability": {
                                                "description": "Price monitoring probability level p",
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "risk_parameters": {
                                      "oneOf": [
                                        {
                                          "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                                          "properties": {
                                            "factor_long": {
                                              "description": "Pre-defined risk factor value for long",
                                              "type": "number"
                                            },
                                            "factor_short": {
                                              "description": "Pre-defined risk factor value for short",
                                              "type": "number"
                                            },
                                            "max_move_up": {
                                              "description": "Pre-defined maximum price move up that the model considers as valid",
                                              "type": "number"
                                            },
                                            "min_move_down": {
                                              "description": "Pre-defined minimum price move down that the model considers as valid",
                                              "type": "number"
                                            },
                                            "probability_of_trading": {
                                              "description": "Pre-defined constant probability of trading",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                                          "properties": {
                                            "params": {
                                              "description": "Risk model parameters for log normal",
                                              "properties": {
                                                "mu": {
                                                  "description": "Mu param",
                                                  "type": "number"
                                                },
                                                "r": {
                                                  "description": "R param",
                                                  "type": "number"
                                                },
                                                "sigma": {
                                                  "description": "Sigma param",
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "risk_aversion_parameter": {
                                              "description": "Risk Aversion Parameter",
                                              "type": "number"
                                            },
                                            "tau": {
                                              "description": "Tau",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "liquidity_commitment": {
                                  "description": "The commitment from the party creating the NewMarket proposal",
                                  "properties": {
                                    "buys": {
                                      "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                                      "items": {
                                        "description": "Represents a liquidity order",
                                        "properties": {
                                          "offset": {
                                            "description": "The offset/amount of units away for the order",
                                            "type": "string"
                                          },
                                          "proportion": {
                                            "description": "The relative proportion of the commitment to be allocated at a price level",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "reference": {
                                            "description": "The pegged reference point for the order",
                                            "enum": [
                                              [
                                                "PEGGED_REFERENCE_UNSPECIFIED",
                                                "PEGGED_REFERENCE_MID",
                                                "PEGGED_REFERENCE_BEST_BID",
                                                "PEGGED_REFERENCE_BEST_ASK"
                                              ]
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "commitment_amount": {
                                      "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                                      "type": "string"
                                    },
                                    "fee": {
                                      "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                                      "type": "string"
                                    },
                                    "reference": {
                                      "description": "A reference to be associated to all orders created from this commitment",
                                      "type": "string"
                                    },
                                    "sells": {
                                      "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                                      "items": {
                                        "description": "Represents a liquidity order",
                                        "properties": {
                                          "offset": {
                                            "description": "The offset/amount of units away for the order",
                                            "type": "string"
                                          },
                                          "proportion": {
                                            "description": "The relative proportion of the commitment to be allocated at a price level",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "reference": {
                                            "description": "The pegged reference point for the order",
                                            "enum": [
                                              [
                                                "PEGGED_REFERENCE_UNSPECIFIED",
                                                "PEGGED_REFERENCE_MID",
                                                "PEGGED_REFERENCE_BEST_BID",
                                                "PEGGED_REFERENCE_BEST_ASK"
                                              ]
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for updating Vega network parameters",
                              "properties": {
                                "changes": {
                                  "description": "The network parameter to update",
                                  "properties": {
                                    "key": {
                                      "description": "The unique key",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value for the network parameter",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for creating new assets on Vega",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new asset",
                                  "properties": {
                                    "decimals": {
                                      "description": "Number of decimal / precision handled by this asset",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "Name of the asset (e.g: Great British Pound)",
                                      "type": "string"
                                    },
                                    "quantum": {
                                      "description": "The minimum economically meaningful amount in the asset",
                                      "type": "string"
                                    },
                                    "source": {
                                      "oneOf": [
                                        {
                                          "description": "A built-in asset",
                                          "properties": {
                                            "max_faucet_amount_mint": {
                                              "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "An Ethereum ERC20 asset",
                                          "properties": {
                                            "contract_address": {
                                              "description": "The address of the contract for the token, on the ethereum network",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    },
                                    "symbol": {
                                      "description": "Symbol of the asset (e.g: GBP)",
                                      "type": "string"
                                    },
                                    "total_supply": {
                                      "description": "Total circulating supply for the asset",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for a freeform voting thing",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new freeform",
                                  "properties": {
                                    "description": {
                                      "description": "A short description of what is being proposed",
                                      "type": "string"
                                    },
                                    "hash": {
                                      "description": "The hash on the content of the URL",
                                      "type": "string"
                                    },
                                    "url": {
                                      "description": "The URL containing content that describes the proposal",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "closing_timestamp": {
                          "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
                          "format": "int64",
                          "type": "integer"
                        },
                        "enactment_timestamp": {
                          "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
                          "format": "int64",
                          "type": "integer"
                        },
                        "validation_timestamp": {
                          "description": "Validation timestamp (Unix time in seconds)",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "timestamp": {
                      "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "yes": {
                  "description": "All \"yes\" votes in favour of the proposal above",
                  "items": {
                    "description": "Governance vote",
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "yes_party": {
                  "additionalProperties": {
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "All latest YES votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetNewMarketProposalsRequest": {
        "description": "Request for a list of new market proposals",
        "properties": {
          "select_in_state": {
            "description": "Optional proposal state",
            "properties": {
              "value": {
                "description": "Proposal state value",
                "enum": [
                  [
                    "STATE_UNSPECIFIED",
                    "STATE_FAILED",
                    "STATE_OPEN",
                    "STATE_PASSED",
                    "STATE_REJECTED",
                    "STATE_DECLINED",
                    "STATE_ENACTED",
                    "STATE_WAITING_FOR_NODE_VOTE"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetNewMarketProposalsResponse": {
        "description": "Response for a list of new market proposals",
        "properties": {
          "data": {
            "description": "A list of 0 or more governance data",
            "items": {
              "description": "Governance data",
              "properties": {
                "no": {
                  "description": "All \"no\" votes against the proposal above",
                  "items": {
                    "description": "Governance vote",
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "no_party": {
                  "additionalProperties": {
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "All latest NO votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                  "type": "object"
                },
                "proposal": {
                  "description": "The governance proposal",
                  "properties": {
                    "error_details": {
                      "description": "The detailed error associated to the reason.",
                      "type": "string"
                    },
                    "id": {
                      "description": "Unique proposal identifier",
                      "type": "string"
                    },
                    "party_id": {
                      "description": "Party identifier of the author (the party submitting the proposal)",
                      "type": "string"
                    },
                    "reason": {
                      "description": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses",
                      "enum": [
                        [
                          "PROPOSAL_ERROR_UNSPECIFIED",
                          "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
                          "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
                          "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
                          "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
                          "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
                          "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
                          "PROPOSAL_ERROR_NO_PRODUCT",
                          "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
                          "PROPOSAL_ERROR_NO_TRADING_MODE",
                          "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
                          "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
                          "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
                          "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
                          "PROPOSAL_ERROR_INVALID_ASSET",
                          "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
                          "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
                          "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
                          "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
                          "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
                          "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
                          "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
                          "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
                          "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
                          "PROPOSAL_ERROR_INVALID_SHAPE",
                          "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
                          "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
                          "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
                          "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
                        ]
                      ],
                      "type": "string"
                    },
                    "reference": {
                      "description": "Proposal reference",
                      "type": "string"
                    },
                    "state": {
                      "description": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition",
                      "enum": [
                        [
                          "STATE_UNSPECIFIED",
                          "STATE_FAILED",
                          "STATE_OPEN",
                          "STATE_PASSED",
                          "STATE_REJECTED",
                          "STATE_DECLINED",
                          "STATE_ENACTED",
                          "STATE_WAITING_FOR_NODE_VOTE"
                        ]
                      ],
                      "type": "string"
                    },
                    "terms": {
                      "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted",
                      "properties": {
                        "change": {
                          "oneOf": [
                            {
                              "description": "Proposal change for modifying an existing market on Vega",
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for creating new market on Vega",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new market",
                                  "properties": {
                                    "decimal_places": {
                                      "description": "Decimal places used for the new market",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "instrument": {
                                      "description": "New market instrument configuration",
                                      "properties": {
                                        "code": {
                                          "description": "Instrument code",
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "Instrument name",
                                          "type": "string"
                                        },
                                        "product": {
                                          "oneOf": [
                                            {
                                              "description": "Future",
                                              "properties": {
                                                "oracle_spec_binding": {
                                                  "description": "The binding between the oracle spec and the settlement price",
                                                  "properties": {
                                                    "settlement_price_property": {
                                                      "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                                      "type": "string"
                                                    },
                                                    "trading_termination_property": {
                                                      "description": "the name of the property in the oracle data that signals termination of trading",
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "oracle_spec_for_settlement_price": {
                                                  "description": "The oracle spec describing the oracle data of settlement price",
                                                  "properties": {
                                                    "filters": {
                                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                      "items": {
                                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                        "properties": {
                                                          "conditions": {
                                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                            "items": {
                                                              "description": "Condition describes the condition that must be validated by the",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "comparator is the type of comparison to make on the value.",
                                                                  "enum": [
                                                                    [
                                                                      "OPERATOR_UNSPECIFIED",
                                                                      "OPERATOR_EQUALS",
                                                                      "OPERATOR_GREATER_THAN",
                                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                      "OPERATOR_LESS_THAN",
                                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                    ]
                                                                  ],
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "description": "value is used by the comparator.",
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "key": {
                                                            "description": "key is the oracle data property key targeted by the filter.",
                                                            "properties": {
                                                              "name": {
                                                                "description": "name is the name of the property.",
                                                                "type": "string"
                                                              },
                                                              "type": {
                                                                "description": "type is the type of the property.",
                                                                "enum": [
                                                                  [
                                                                    "TYPE_UNSPECIFIED",
                                                                    "TYPE_EMPTY",
                                                                    "TYPE_INTEGER",
                                                                    "TYPE_STRING",
                                                                    "TYPE_BOOLEAN",
                                                                    "TYPE_DECIMAL",
                                                                    "TYPE_TIMESTAMP"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pub_keys": {
                                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "oracle_spec_for_trading_termination": {
                                                  "description": "The oracle spec describing the oracle data of trading termination",
                                                  "properties": {
                                                    "filters": {
                                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                      "items": {
                                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                        "properties": {
                                                          "conditions": {
                                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                            "items": {
                                                              "description": "Condition describes the condition that must be validated by the",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "comparator is the type of comparison to make on the value.",
                                                                  "enum": [
                                                                    [
                                                                      "OPERATOR_UNSPECIFIED",
                                                                      "OPERATOR_EQUALS",
                                                                      "OPERATOR_GREATER_THAN",
                                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                      "OPERATOR_LESS_THAN",
                                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                    ]
                                                                  ],
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "description": "value is used by the comparator.",
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "key": {
                                                            "description": "key is the oracle data property key targeted by the filter.",
                                                            "properties": {
                                                              "name": {
                                                                "description": "name is the name of the property.",
                                                                "type": "string"
                                                              },
                                                              "type": {
                                                                "description": "type is the type of the property.",
                                                                "enum": [
                                                                  [
                                                                    "TYPE_UNSPECIFIED",
                                                                    "TYPE_EMPTY",
                                                                    "TYPE_INTEGER",
                                                                    "TYPE_STRING",
                                                                    "TYPE_BOOLEAN",
                                                                    "TYPE_DECIMAL",
                                                                    "TYPE_TIMESTAMP"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pub_keys": {
                                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "quote_name": {
                                                  "description": "Product quote name",
                                                  "type": "string"
                                                },
                                                "settlement_asset": {
                                                  "description": "Product settlement asset identifier",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "liquidity_monitoring_parameters": {
                                      "description": "Liquidity monitoring parameters",
                                      "properties": {
                                        "auction_extension": {
                                          "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "target_stake_parameters": {
                                          "description": "Specifies parameters related to target stake calculation",
                                          "properties": {
                                            "scaling_factor": {
                                              "description": "Specifies scaling factors used in target stake calculation",
                                              "type": "number"
                                            },
                                            "time_window": {
                                              "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                              "format": "int64",
                                              "type": "integer"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "triggering_ratio": {
                                          "description": "Specifies the triggering ratio for entering liquidity auction",
                                          "type": "number"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "metadata": {
                                      "description": "Optional new market meta data, tags",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "price_monitoring_parameters": {
                                      "description": "Price monitoring parameters",
                                      "properties": {
                                        "triggers": {
                                          "items": {
                                            "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                            "properties": {
                                              "auction_extension": {
                                                "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "horizon": {
                                                "description": "Price monitoring projection horizon τ in seconds",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "probability": {
                                                "description": "Price monitoring probability level p",
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "risk_parameters": {
                                      "oneOf": [
                                        {
                                          "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                                          "properties": {
                                            "factor_long": {
                                              "description": "Pre-defined risk factor value for long",
                                              "type": "number"
                                            },
                                            "factor_short": {
                                              "description": "Pre-defined risk factor value for short",
                                              "type": "number"
                                            },
                                            "max_move_up": {
                                              "description": "Pre-defined maximum price move up that the model considers as valid",
                                              "type": "number"
                                            },
                                            "min_move_down": {
                                              "description": "Pre-defined minimum price move down that the model considers as valid",
                                              "type": "number"
                                            },
                                            "probability_of_trading": {
                                              "description": "Pre-defined constant probability of trading",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                                          "properties": {
                                            "params": {
                                              "description": "Risk model parameters for log normal",
                                              "properties": {
                                                "mu": {
                                                  "description": "Mu param",
                                                  "type": "number"
                                                },
                                                "r": {
                                                  "description": "R param",
                                                  "type": "number"
                                                },
                                                "sigma": {
                                                  "description": "Sigma param",
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "risk_aversion_parameter": {
                                              "description": "Risk Aversion Parameter",
                                              "type": "number"
                                            },
                                            "tau": {
                                              "description": "Tau",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "liquidity_commitment": {
                                  "description": "The commitment from the party creating the NewMarket proposal",
                                  "properties": {
                                    "buys": {
                                      "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                                      "items": {
                                        "description": "Represents a liquidity order",
                                        "properties": {
                                          "offset": {
                                            "description": "The offset/amount of units away for the order",
                                            "type": "string"
                                          },
                                          "proportion": {
                                            "description": "The relative proportion of the commitment to be allocated at a price level",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "reference": {
                                            "description": "The pegged reference point for the order",
                                            "enum": [
                                              [
                                                "PEGGED_REFERENCE_UNSPECIFIED",
                                                "PEGGED_REFERENCE_MID",
                                                "PEGGED_REFERENCE_BEST_BID",
                                                "PEGGED_REFERENCE_BEST_ASK"
                                              ]
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "commitment_amount": {
                                      "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                                      "type": "string"
                                    },
                                    "fee": {
                                      "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                                      "type": "string"
                                    },
                                    "reference": {
                                      "description": "A reference to be associated to all orders created from this commitment",
                                      "type": "string"
                                    },
                                    "sells": {
                                      "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                                      "items": {
                                        "description": "Represents a liquidity order",
                                        "properties": {
                                          "offset": {
                                            "description": "The offset/amount of units away for the order",
                                            "type": "string"
                                          },
                                          "proportion": {
                                            "description": "The relative proportion of the commitment to be allocated at a price level",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "reference": {
                                            "description": "The pegged reference point for the order",
                                            "enum": [
                                              [
                                                "PEGGED_REFERENCE_UNSPECIFIED",
                                                "PEGGED_REFERENCE_MID",
                                                "PEGGED_REFERENCE_BEST_BID",
                                                "PEGGED_REFERENCE_BEST_ASK"
                                              ]
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for updating Vega network parameters",
                              "properties": {
                                "changes": {
                                  "description": "The network parameter to update",
                                  "properties": {
                                    "key": {
                                      "description": "The unique key",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value for the network parameter",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for creating new assets on Vega",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new asset",
                                  "properties": {
                                    "decimals": {
                                      "description": "Number of decimal / precision handled by this asset",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "Name of the asset (e.g: Great British Pound)",
                                      "type": "string"
                                    },
                                    "quantum": {
                                      "description": "The minimum economically meaningful amount in the asset",
                                      "type": "string"
                                    },
                                    "source": {
                                      "oneOf": [
                                        {
                                          "description": "A built-in asset",
                                          "properties": {
                                            "max_faucet_amount_mint": {
                                              "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "An Ethereum ERC20 asset",
                                          "properties": {
                                            "contract_address": {
                                              "description": "The address of the contract for the token, on the ethereum network",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    },
                                    "symbol": {
                                      "description": "Symbol of the asset (e.g: GBP)",
                                      "type": "string"
                                    },
                                    "total_supply": {
                                      "description": "Total circulating supply for the asset",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for a freeform voting thing",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new freeform",
                                  "properties": {
                                    "description": {
                                      "description": "A short description of what is being proposed",
                                      "type": "string"
                                    },
                                    "hash": {
                                      "description": "The hash on the content of the URL",
                                      "type": "string"
                                    },
                                    "url": {
                                      "description": "The URL containing content that describes the proposal",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "closing_timestamp": {
                          "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
                          "format": "int64",
                          "type": "integer"
                        },
                        "enactment_timestamp": {
                          "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
                          "format": "int64",
                          "type": "integer"
                        },
                        "validation_timestamp": {
                          "description": "Validation timestamp (Unix time in seconds)",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "timestamp": {
                      "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "yes": {
                  "description": "All \"yes\" votes in favour of the proposal above",
                  "items": {
                    "description": "Governance vote",
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "yes_party": {
                  "additionalProperties": {
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "All latest YES votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetNodeByIDRequest": {
        "description": "Request to list all nodes",
        "properties": {
          "id": {
            "description": "Required id of node",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetNodeByIDResponse": {
        "description": "Response with all nodes",
        "properties": {
          "node": {
            "properties": {
              "avatar_url": {
                "description": "Avatar url",
                "type": "string"
              },
              "delegations": {
                "description": "Node's delegations",
                "items": {
                  "properties": {
                    "amount": {
                      "description": "Amount delegated",
                      "type": "string"
                    },
                    "epoch_seq": {
                      "description": "Epoch of delegation",
                      "type": "string"
                    },
                    "node_id": {
                      "description": "Node ID",
                      "type": "string"
                    },
                    "party": {
                      "description": "Party which is delegating",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "epoch_data": {
                "description": "Informantion about epoch",
                "properties": {
                  "offline": {
                    "description": "Total number of offline epochs since node was created",
                    "format": "int32",
                    "type": "integer"
                  },
                  "online": {
                    "description": "Total number of online epochs since node was created",
                    "format": "int32",
                    "type": "integer"
                  },
                  "total": {
                    "description": "Total number of epochs since node was created",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "ethereum_adddress": {
                "description": "Ethereum public key of the node",
                "type": "string"
              },
              "id": {
                "description": "The node ID (wallet ID)",
                "type": "string"
              },
              "info_url": {
                "description": "URL where I can find out more info on the node",
                "type": "string"
              },
              "location": {
                "description": "Country code for the location of the node",
                "type": "string"
              },
              "max_intended_stake": {
                "description": "Max amount of (wanted) stake, is this a network param or a node param",
                "type": "string"
              },
              "name": {
                "description": "Node name",
                "type": "string"
              },
              "normalised_score": {
                "description": "Node normalised score",
                "type": "string"
              },
              "pending_stake": {
                "description": "Amount of stake on the next epoch",
                "type": "string"
              },
              "performance": {
                "description": "Performance",
                "type": "string"
              },
              "pub_key": {
                "description": "Pub key of the node operator",
                "type": "string"
              },
              "raw_score": {
                "description": "Raw Score",
                "type": "string"
              },
              "score": {
                "description": "Node score",
                "type": "string"
              },
              "staked_by_delegates": {
                "description": "The amount of stake that has been delegated by token holders",
                "type": "string"
              },
              "staked_by_operator": {
                "description": "The amount the node has put up themselves",
                "type": "string"
              },
              "staked_total": {
                "description": "Total amount staked on node",
                "type": "string"
              },
              "status": {
                "description": "Node status",
                "enum": [
                  [
                    "NODE_STATUS_UNSPECIFIED",
                    "NODE_STATUS_VALIDATOR",
                    "NODE_STATUS_NON_VALIDATOR"
                  ]
                ],
                "type": "string"
              },
              "tm_pub_key": {
                "description": "Public key of Tendermint",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetNodeDataRequest": {
        "description": "Request for current Node data",
        "type": "object"
      },
      "datanode.api.v1.GetNodeDataResponse": {
        "description": "Response with node data",
        "properties": {
          "node_data": {
            "properties": {
              "inactive_nodes": {
                "description": "Number of inactive nodes",
                "format": "int32",
                "type": "integer"
              },
              "staked_total": {
                "description": "Total staked amount across all nodes",
                "type": "string"
              },
              "total_nodes": {
                "description": "Total number of nodes",
                "format": "int32",
                "type": "integer"
              },
              "uptime": {
                "description": "Total uptime for all epochs across all nodes",
                "type": "number"
              },
              "validating_nodes": {
                "description": "Number of nodes validating",
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetNodeSignaturesAggregateRequest": {
        "description": "Request to specify the identifier of the resource we want to retrieve aggregated signatures for",
        "properties": {
          "id": {
            "description": "Resource identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetNodeSignaturesAggregateResponse": {
        "description": "Response to specify the identifier of the resource we want to retrieve aggregated signatures for",
        "properties": {
          "signatures": {
            "description": "A list of 0 or more signatures",
            "items": {
              "description": "Represents a signature from a validator, to be used by a foreign chain in order to recognise a decision taken by the Vega network",
              "properties": {
                "id": {
                  "description": "The identifier of the resource being signed",
                  "type": "string"
                },
                "kind": {
                  "description": "The kind of resource being signed",
                  "enum": [
                    [
                      "NODE_SIGNATURE_KIND_UNSPECIFIED",
                      "NODE_SIGNATURE_KIND_ASSET_NEW",
                      "NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL"
                    ]
                  ],
                  "type": "string"
                },
                "sig": {
                  "description": "The signature",
                  "format": "byte",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetNodesRequest": {
        "description": "Request to list all nodes",
        "type": "object"
      },
      "datanode.api.v1.GetNodesResponse": {
        "description": "Response with all nodes",
        "properties": {
          "nodes": {
            "items": {
              "properties": {
                "avatar_url": {
                  "description": "Avatar url",
                  "type": "string"
                },
                "delegations": {
                  "description": "Node's delegations",
                  "items": {
                    "properties": {
                      "amount": {
                        "description": "Amount delegated",
                        "type": "string"
                      },
                      "epoch_seq": {
                        "description": "Epoch of delegation",
                        "type": "string"
                      },
                      "node_id": {
                        "description": "Node ID",
                        "type": "string"
                      },
                      "party": {
                        "description": "Party which is delegating",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "epoch_data": {
                  "description": "Informantion about epoch",
                  "properties": {
                    "offline": {
                      "description": "Total number of offline epochs since node was created",
                      "format": "int32",
                      "type": "integer"
                    },
                    "online": {
                      "description": "Total number of online epochs since node was created",
                      "format": "int32",
                      "type": "integer"
                    },
                    "total": {
                      "description": "Total number of epochs since node was created",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "ethereum_adddress": {
                  "description": "Ethereum public key of the node",
                  "type": "string"
                },
                "id": {
                  "description": "The node ID (wallet ID)",
                  "type": "string"
                },
                "info_url": {
                  "description": "URL where I can find out more info on the node",
                  "type": "string"
                },
                "location": {
                  "description": "Country code for the location of the node",
                  "type": "string"
                },
                "max_intended_stake": {
                  "description": "Max amount of (wanted) stake, is this a network param or a node param",
                  "type": "string"
                },
                "name": {
                  "description": "Node name",
                  "type": "string"
                },
                "normalised_score": {
                  "description": "Node normalised score",
                  "type": "string"
                },
                "pending_stake": {
                  "description": "Amount of stake on the next epoch",
                  "type": "string"
                },
                "performance": {
                  "description": "Performance",
                  "type": "string"
                },
                "pub_key": {
                  "description": "Pub key of the node operator",
                  "type": "string"
                },
                "raw_score": {
                  "description": "Raw Score",
                  "type": "string"
                },
                "score": {
                  "description": "Node score",
                  "type": "string"
                },
                "staked_by_delegates": {
                  "description": "The amount of stake that has been delegated by token holders",
                  "type": "string"
                },
                "staked_by_operator": {
                  "description": "The amount the node has put up themselves",
                  "type": "string"
                },
                "staked_total": {
                  "description": "Total amount staked on node",
                  "type": "string"
                },
                "status": {
                  "description": "Node status",
                  "enum": [
                    [
                      "NODE_STATUS_UNSPECIFIED",
                      "NODE_STATUS_VALIDATOR",
                      "NODE_STATUS_NON_VALIDATOR"
                    ]
                  ],
                  "type": "string"
                },
                "tm_pub_key": {
                  "description": "Public key of Tendermint",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetProposalByIDRequest": {
        "description": "Request for a governance proposal given a proposal identifier",
        "properties": {
          "proposal_id": {
            "description": "Proposal identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetProposalByIDResponse": {
        "description": "Response for a governance proposal given a proposal identifier",
        "properties": {
          "data": {
            "description": "Governance data, if found",
            "properties": {
              "no": {
                "description": "All \"no\" votes against the proposal above",
                "items": {
                  "description": "Governance vote",
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "no_party": {
                "additionalProperties": {
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "description": "All latest NO votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                "type": "object"
              },
              "proposal": {
                "description": "The governance proposal",
                "properties": {
                  "error_details": {
                    "description": "The detailed error associated to the reason.",
                    "type": "string"
                  },
                  "id": {
                    "description": "Unique proposal identifier",
                    "type": "string"
                  },
                  "party_id": {
                    "description": "Party identifier of the author (the party submitting the proposal)",
                    "type": "string"
                  },
                  "reason": {
                    "description": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses",
                    "enum": [
                      [
                        "PROPOSAL_ERROR_UNSPECIFIED",
                        "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
                        "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
                        "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
                        "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
                        "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
                        "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
                        "PROPOSAL_ERROR_NO_PRODUCT",
                        "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
                        "PROPOSAL_ERROR_NO_TRADING_MODE",
                        "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
                        "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
                        "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
                        "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
                        "PROPOSAL_ERROR_INVALID_ASSET",
                        "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
                        "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
                        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
                        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
                        "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
                        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
                        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
                        "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
                        "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
                        "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
                        "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
                        "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
                        "PROPOSAL_ERROR_INVALID_SHAPE",
                        "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
                        "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
                        "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
                        "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
                      ]
                    ],
                    "type": "string"
                  },
                  "reference": {
                    "description": "Proposal reference",
                    "type": "string"
                  },
                  "state": {
                    "description": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition",
                    "enum": [
                      [
                        "STATE_UNSPECIFIED",
                        "STATE_FAILED",
                        "STATE_OPEN",
                        "STATE_PASSED",
                        "STATE_REJECTED",
                        "STATE_DECLINED",
                        "STATE_ENACTED",
                        "STATE_WAITING_FOR_NODE_VOTE"
                      ]
                    ],
                    "type": "string"
                  },
                  "terms": {
                    "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted",
                    "properties": {
                      "change": {
                        "oneOf": [
                          {
                            "description": "Proposal change for modifying an existing market on Vega",
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for creating new market on Vega",
                            "properties": {
                              "changes": {
                                "description": "The configuration of the new market",
                                "properties": {
                                  "decimal_places": {
                                    "description": "Decimal places used for the new market",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "instrument": {
                                    "description": "New market instrument configuration",
                                    "properties": {
                                      "code": {
                                        "description": "Instrument code",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Instrument name",
                                        "type": "string"
                                      },
                                      "product": {
                                        "oneOf": [
                                          {
                                            "description": "Future",
                                            "properties": {
                                              "oracle_spec_binding": {
                                                "description": "The binding between the oracle spec and the settlement price",
                                                "properties": {
                                                  "settlement_price_property": {
                                                    "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                                    "type": "string"
                                                  },
                                                  "trading_termination_property": {
                                                    "description": "the name of the property in the oracle data that signals termination of trading",
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "oracle_spec_for_settlement_price": {
                                                "description": "The oracle spec describing the oracle data of settlement price",
                                                "properties": {
                                                  "filters": {
                                                    "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                    "items": {
                                                      "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                      "properties": {
                                                        "conditions": {
                                                          "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                          "items": {
                                                            "description": "Condition describes the condition that must be validated by the",
                                                            "properties": {
                                                              "operator": {
                                                                "description": "comparator is the type of comparison to make on the value.",
                                                                "enum": [
                                                                  [
                                                                    "OPERATOR_UNSPECIFIED",
                                                                    "OPERATOR_EQUALS",
                                                                    "OPERATOR_GREATER_THAN",
                                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                    "OPERATOR_LESS_THAN",
                                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              },
                                                              "value": {
                                                                "description": "value is used by the comparator.",
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          },
                                                          "type": "array"
                                                        },
                                                        "key": {
                                                          "description": "key is the oracle data property key targeted by the filter.",
                                                          "properties": {
                                                            "name": {
                                                              "description": "name is the name of the property.",
                                                              "type": "string"
                                                            },
                                                            "type": {
                                                              "description": "type is the type of the property.",
                                                              "enum": [
                                                                [
                                                                  "TYPE_UNSPECIFIED",
                                                                  "TYPE_EMPTY",
                                                                  "TYPE_INTEGER",
                                                                  "TYPE_STRING",
                                                                  "TYPE_BOOLEAN",
                                                                  "TYPE_DECIMAL",
                                                                  "TYPE_TIMESTAMP"
                                                                ]
                                                              ],
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "pub_keys": {
                                                    "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "oracle_spec_for_trading_termination": {
                                                "description": "The oracle spec describing the oracle data of trading termination",
                                                "properties": {
                                                  "filters": {
                                                    "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                    "items": {
                                                      "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                      "properties": {
                                                        "conditions": {
                                                          "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                          "items": {
                                                            "description": "Condition describes the condition that must be validated by the",
                                                            "properties": {
                                                              "operator": {
                                                                "description": "comparator is the type of comparison to make on the value.",
                                                                "enum": [
                                                                  [
                                                                    "OPERATOR_UNSPECIFIED",
                                                                    "OPERATOR_EQUALS",
                                                                    "OPERATOR_GREATER_THAN",
                                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                    "OPERATOR_LESS_THAN",
                                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              },
                                                              "value": {
                                                                "description": "value is used by the comparator.",
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          },
                                                          "type": "array"
                                                        },
                                                        "key": {
                                                          "description": "key is the oracle data property key targeted by the filter.",
                                                          "properties": {
                                                            "name": {
                                                              "description": "name is the name of the property.",
                                                              "type": "string"
                                                            },
                                                            "type": {
                                                              "description": "type is the type of the property.",
                                                              "enum": [
                                                                [
                                                                  "TYPE_UNSPECIFIED",
                                                                  "TYPE_EMPTY",
                                                                  "TYPE_INTEGER",
                                                                  "TYPE_STRING",
                                                                  "TYPE_BOOLEAN",
                                                                  "TYPE_DECIMAL",
                                                                  "TYPE_TIMESTAMP"
                                                                ]
                                                              ],
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "pub_keys": {
                                                    "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "quote_name": {
                                                "description": "Product quote name",
                                                "type": "string"
                                              },
                                              "settlement_asset": {
                                                "description": "Product settlement asset identifier",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "liquidity_monitoring_parameters": {
                                    "description": "Liquidity monitoring parameters",
                                    "properties": {
                                      "auction_extension": {
                                        "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "target_stake_parameters": {
                                        "description": "Specifies parameters related to target stake calculation",
                                        "properties": {
                                          "scaling_factor": {
                                            "description": "Specifies scaling factors used in target stake calculation",
                                            "type": "number"
                                          },
                                          "time_window": {
                                            "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                            "format": "int64",
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "triggering_ratio": {
                                        "description": "Specifies the triggering ratio for entering liquidity auction",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "metadata": {
                                    "description": "Optional new market meta data, tags",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "price_monitoring_parameters": {
                                    "description": "Price monitoring parameters",
                                    "properties": {
                                      "triggers": {
                                        "items": {
                                          "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                          "properties": {
                                            "auction_extension": {
                                              "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                              "format": "int64",
                                              "type": "integer"
                                            },
                                            "horizon": {
                                              "description": "Price monitoring projection horizon τ in seconds",
                                              "format": "int64",
                                              "type": "integer"
                                            },
                                            "probability": {
                                              "description": "Price monitoring probability level p",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "risk_parameters": {
                                    "oneOf": [
                                      {
                                        "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                                        "properties": {
                                          "factor_long": {
                                            "description": "Pre-defined risk factor value for long",
                                            "type": "number"
                                          },
                                          "factor_short": {
                                            "description": "Pre-defined risk factor value for short",
                                            "type": "number"
                                          },
                                          "max_move_up": {
                                            "description": "Pre-defined maximum price move up that the model considers as valid",
                                            "type": "number"
                                          },
                                          "min_move_down": {
                                            "description": "Pre-defined minimum price move down that the model considers as valid",
                                            "type": "number"
                                          },
                                          "probability_of_trading": {
                                            "description": "Pre-defined constant probability of trading",
                                            "type": "number"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      {
                                        "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                                        "properties": {
                                          "params": {
                                            "description": "Risk model parameters for log normal",
                                            "properties": {
                                              "mu": {
                                                "description": "Mu param",
                                                "type": "number"
                                              },
                                              "r": {
                                                "description": "R param",
                                                "type": "number"
                                              },
                                              "sigma": {
                                                "description": "Sigma param",
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "risk_aversion_parameter": {
                                            "description": "Risk Aversion Parameter",
                                            "type": "number"
                                          },
                                          "tau": {
                                            "description": "Tau",
                                            "type": "number"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "liquidity_commitment": {
                                "description": "The commitment from the party creating the NewMarket proposal",
                                "properties": {
                                  "buys": {
                                    "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                                    "items": {
                                      "description": "Represents a liquidity order",
                                      "properties": {
                                        "offset": {
                                          "description": "The offset/amount of units away for the order",
                                          "type": "string"
                                        },
                                        "proportion": {
                                          "description": "The relative proportion of the commitment to be allocated at a price level",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "reference": {
                                          "description": "The pegged reference point for the order",
                                          "enum": [
                                            [
                                              "PEGGED_REFERENCE_UNSPECIFIED",
                                              "PEGGED_REFERENCE_MID",
                                              "PEGGED_REFERENCE_BEST_BID",
                                              "PEGGED_REFERENCE_BEST_ASK"
                                            ]
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "commitment_amount": {
                                    "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                                    "type": "string"
                                  },
                                  "fee": {
                                    "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                                    "type": "string"
                                  },
                                  "reference": {
                                    "description": "A reference to be associated to all orders created from this commitment",
                                    "type": "string"
                                  },
                                  "sells": {
                                    "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                                    "items": {
                                      "description": "Represents a liquidity order",
                                      "properties": {
                                        "offset": {
                                          "description": "The offset/amount of units away for the order",
                                          "type": "string"
                                        },
                                        "proportion": {
                                          "description": "The relative proportion of the commitment to be allocated at a price level",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "reference": {
                                          "description": "The pegged reference point for the order",
                                          "enum": [
                                            [
                                              "PEGGED_REFERENCE_UNSPECIFIED",
                                              "PEGGED_REFERENCE_MID",
                                              "PEGGED_REFERENCE_BEST_BID",
                                              "PEGGED_REFERENCE_BEST_ASK"
                                            ]
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for updating Vega network parameters",
                            "properties": {
                              "changes": {
                                "description": "The network parameter to update",
                                "properties": {
                                  "key": {
                                    "description": "The unique key",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "The value for the network parameter",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for creating new assets on Vega",
                            "properties": {
                              "changes": {
                                "description": "The configuration of the new asset",
                                "properties": {
                                  "decimals": {
                                    "description": "Number of decimal / precision handled by this asset",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "Name of the asset (e.g: Great British Pound)",
                                    "type": "string"
                                  },
                                  "quantum": {
                                    "description": "The minimum economically meaningful amount in the asset",
                                    "type": "string"
                                  },
                                  "source": {
                                    "oneOf": [
                                      {
                                        "description": "A built-in asset",
                                        "properties": {
                                          "max_faucet_amount_mint": {
                                            "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      {
                                        "description": "An Ethereum ERC20 asset",
                                        "properties": {
                                          "contract_address": {
                                            "description": "The address of the contract for the token, on the ethereum network",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  "symbol": {
                                    "description": "Symbol of the asset (e.g: GBP)",
                                    "type": "string"
                                  },
                                  "total_supply": {
                                    "description": "Total circulating supply for the asset",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for a freeform voting thing",
                            "properties": {
                              "changes": {
                                "description": "The configuration of the new freeform",
                                "properties": {
                                  "description": {
                                    "description": "A short description of what is being proposed",
                                    "type": "string"
                                  },
                                  "hash": {
                                    "description": "The hash on the content of the URL",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "The URL containing content that describes the proposal",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "closing_timestamp": {
                        "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
                        "format": "int64",
                        "type": "integer"
                      },
                      "enactment_timestamp": {
                        "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
                        "format": "int64",
                        "type": "integer"
                      },
                      "validation_timestamp": {
                        "description": "Validation timestamp (Unix time in seconds)",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "timestamp": {
                    "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "yes": {
                "description": "All \"yes\" votes in favour of the proposal above",
                "items": {
                  "description": "Governance vote",
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "yes_party": {
                "additionalProperties": {
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "description": "All latest YES votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetProposalByReferenceRequest": {
        "description": "Request for a governance proposal given a proposal reference",
        "properties": {
          "reference": {
            "description": "Proposal reference. Required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetProposalByReferenceResponse": {
        "description": "Response for a governance proposal given a proposal reference",
        "properties": {
          "data": {
            "description": "Governance data, if found",
            "properties": {
              "no": {
                "description": "All \"no\" votes against the proposal above",
                "items": {
                  "description": "Governance vote",
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "no_party": {
                "additionalProperties": {
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "description": "All latest NO votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                "type": "object"
              },
              "proposal": {
                "description": "The governance proposal",
                "properties": {
                  "error_details": {
                    "description": "The detailed error associated to the reason.",
                    "type": "string"
                  },
                  "id": {
                    "description": "Unique proposal identifier",
                    "type": "string"
                  },
                  "party_id": {
                    "description": "Party identifier of the author (the party submitting the proposal)",
                    "type": "string"
                  },
                  "reason": {
                    "description": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses",
                    "enum": [
                      [
                        "PROPOSAL_ERROR_UNSPECIFIED",
                        "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
                        "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
                        "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
                        "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
                        "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
                        "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
                        "PROPOSAL_ERROR_NO_PRODUCT",
                        "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
                        "PROPOSAL_ERROR_NO_TRADING_MODE",
                        "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
                        "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
                        "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
                        "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
                        "PROPOSAL_ERROR_INVALID_ASSET",
                        "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
                        "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
                        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
                        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
                        "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
                        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
                        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
                        "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
                        "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
                        "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
                        "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
                        "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
                        "PROPOSAL_ERROR_INVALID_SHAPE",
                        "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
                        "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
                        "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
                        "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
                      ]
                    ],
                    "type": "string"
                  },
                  "reference": {
                    "description": "Proposal reference",
                    "type": "string"
                  },
                  "state": {
                    "description": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition",
                    "enum": [
                      [
                        "STATE_UNSPECIFIED",
                        "STATE_FAILED",
                        "STATE_OPEN",
                        "STATE_PASSED",
                        "STATE_REJECTED",
                        "STATE_DECLINED",
                        "STATE_ENACTED",
                        "STATE_WAITING_FOR_NODE_VOTE"
                      ]
                    ],
                    "type": "string"
                  },
                  "terms": {
                    "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted",
                    "properties": {
                      "change": {
                        "oneOf": [
                          {
                            "description": "Proposal change for modifying an existing market on Vega",
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for creating new market on Vega",
                            "properties": {
                              "changes": {
                                "description": "The configuration of the new market",
                                "properties": {
                                  "decimal_places": {
                                    "description": "Decimal places used for the new market",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "instrument": {
                                    "description": "New market instrument configuration",
                                    "properties": {
                                      "code": {
                                        "description": "Instrument code",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Instrument name",
                                        "type": "string"
                                      },
                                      "product": {
                                        "oneOf": [
                                          {
                                            "description": "Future",
                                            "properties": {
                                              "oracle_spec_binding": {
                                                "description": "The binding between the oracle spec and the settlement price",
                                                "properties": {
                                                  "settlement_price_property": {
                                                    "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                                    "type": "string"
                                                  },
                                                  "trading_termination_property": {
                                                    "description": "the name of the property in the oracle data that signals termination of trading",
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "oracle_spec_for_settlement_price": {
                                                "description": "The oracle spec describing the oracle data of settlement price",
                                                "properties": {
                                                  "filters": {
                                                    "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                    "items": {
                                                      "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                      "properties": {
                                                        "conditions": {
                                                          "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                          "items": {
                                                            "description": "Condition describes the condition that must be validated by the",
                                                            "properties": {
                                                              "operator": {
                                                                "description": "comparator is the type of comparison to make on the value.",
                                                                "enum": [
                                                                  [
                                                                    "OPERATOR_UNSPECIFIED",
                                                                    "OPERATOR_EQUALS",
                                                                    "OPERATOR_GREATER_THAN",
                                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                    "OPERATOR_LESS_THAN",
                                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              },
                                                              "value": {
                                                                "description": "value is used by the comparator.",
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          },
                                                          "type": "array"
                                                        },
                                                        "key": {
                                                          "description": "key is the oracle data property key targeted by the filter.",
                                                          "properties": {
                                                            "name": {
                                                              "description": "name is the name of the property.",
                                                              "type": "string"
                                                            },
                                                            "type": {
                                                              "description": "type is the type of the property.",
                                                              "enum": [
                                                                [
                                                                  "TYPE_UNSPECIFIED",
                                                                  "TYPE_EMPTY",
                                                                  "TYPE_INTEGER",
                                                                  "TYPE_STRING",
                                                                  "TYPE_BOOLEAN",
                                                                  "TYPE_DECIMAL",
                                                                  "TYPE_TIMESTAMP"
                                                                ]
                                                              ],
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "pub_keys": {
                                                    "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "oracle_spec_for_trading_termination": {
                                                "description": "The oracle spec describing the oracle data of trading termination",
                                                "properties": {
                                                  "filters": {
                                                    "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                    "items": {
                                                      "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                      "properties": {
                                                        "conditions": {
                                                          "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                          "items": {
                                                            "description": "Condition describes the condition that must be validated by the",
                                                            "properties": {
                                                              "operator": {
                                                                "description": "comparator is the type of comparison to make on the value.",
                                                                "enum": [
                                                                  [
                                                                    "OPERATOR_UNSPECIFIED",
                                                                    "OPERATOR_EQUALS",
                                                                    "OPERATOR_GREATER_THAN",
                                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                    "OPERATOR_LESS_THAN",
                                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              },
                                                              "value": {
                                                                "description": "value is used by the comparator.",
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          },
                                                          "type": "array"
                                                        },
                                                        "key": {
                                                          "description": "key is the oracle data property key targeted by the filter.",
                                                          "properties": {
                                                            "name": {
                                                              "description": "name is the name of the property.",
                                                              "type": "string"
                                                            },
                                                            "type": {
                                                              "description": "type is the type of the property.",
                                                              "enum": [
                                                                [
                                                                  "TYPE_UNSPECIFIED",
                                                                  "TYPE_EMPTY",
                                                                  "TYPE_INTEGER",
                                                                  "TYPE_STRING",
                                                                  "TYPE_BOOLEAN",
                                                                  "TYPE_DECIMAL",
                                                                  "TYPE_TIMESTAMP"
                                                                ]
                                                              ],
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "pub_keys": {
                                                    "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "quote_name": {
                                                "description": "Product quote name",
                                                "type": "string"
                                              },
                                              "settlement_asset": {
                                                "description": "Product settlement asset identifier",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "liquidity_monitoring_parameters": {
                                    "description": "Liquidity monitoring parameters",
                                    "properties": {
                                      "auction_extension": {
                                        "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "target_stake_parameters": {
                                        "description": "Specifies parameters related to target stake calculation",
                                        "properties": {
                                          "scaling_factor": {
                                            "description": "Specifies scaling factors used in target stake calculation",
                                            "type": "number"
                                          },
                                          "time_window": {
                                            "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                            "format": "int64",
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "triggering_ratio": {
                                        "description": "Specifies the triggering ratio for entering liquidity auction",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "metadata": {
                                    "description": "Optional new market meta data, tags",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "price_monitoring_parameters": {
                                    "description": "Price monitoring parameters",
                                    "properties": {
                                      "triggers": {
                                        "items": {
                                          "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                          "properties": {
                                            "auction_extension": {
                                              "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                              "format": "int64",
                                              "type": "integer"
                                            },
                                            "horizon": {
                                              "description": "Price monitoring projection horizon τ in seconds",
                                              "format": "int64",
                                              "type": "integer"
                                            },
                                            "probability": {
                                              "description": "Price monitoring probability level p",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "risk_parameters": {
                                    "oneOf": [
                                      {
                                        "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                                        "properties": {
                                          "factor_long": {
                                            "description": "Pre-defined risk factor value for long",
                                            "type": "number"
                                          },
                                          "factor_short": {
                                            "description": "Pre-defined risk factor value for short",
                                            "type": "number"
                                          },
                                          "max_move_up": {
                                            "description": "Pre-defined maximum price move up that the model considers as valid",
                                            "type": "number"
                                          },
                                          "min_move_down": {
                                            "description": "Pre-defined minimum price move down that the model considers as valid",
                                            "type": "number"
                                          },
                                          "probability_of_trading": {
                                            "description": "Pre-defined constant probability of trading",
                                            "type": "number"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      {
                                        "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                                        "properties": {
                                          "params": {
                                            "description": "Risk model parameters for log normal",
                                            "properties": {
                                              "mu": {
                                                "description": "Mu param",
                                                "type": "number"
                                              },
                                              "r": {
                                                "description": "R param",
                                                "type": "number"
                                              },
                                              "sigma": {
                                                "description": "Sigma param",
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "risk_aversion_parameter": {
                                            "description": "Risk Aversion Parameter",
                                            "type": "number"
                                          },
                                          "tau": {
                                            "description": "Tau",
                                            "type": "number"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "liquidity_commitment": {
                                "description": "The commitment from the party creating the NewMarket proposal",
                                "properties": {
                                  "buys": {
                                    "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                                    "items": {
                                      "description": "Represents a liquidity order",
                                      "properties": {
                                        "offset": {
                                          "description": "The offset/amount of units away for the order",
                                          "type": "string"
                                        },
                                        "proportion": {
                                          "description": "The relative proportion of the commitment to be allocated at a price level",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "reference": {
                                          "description": "The pegged reference point for the order",
                                          "enum": [
                                            [
                                              "PEGGED_REFERENCE_UNSPECIFIED",
                                              "PEGGED_REFERENCE_MID",
                                              "PEGGED_REFERENCE_BEST_BID",
                                              "PEGGED_REFERENCE_BEST_ASK"
                                            ]
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "commitment_amount": {
                                    "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                                    "type": "string"
                                  },
                                  "fee": {
                                    "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                                    "type": "string"
                                  },
                                  "reference": {
                                    "description": "A reference to be associated to all orders created from this commitment",
                                    "type": "string"
                                  },
                                  "sells": {
                                    "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                                    "items": {
                                      "description": "Represents a liquidity order",
                                      "properties": {
                                        "offset": {
                                          "description": "The offset/amount of units away for the order",
                                          "type": "string"
                                        },
                                        "proportion": {
                                          "description": "The relative proportion of the commitment to be allocated at a price level",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "reference": {
                                          "description": "The pegged reference point for the order",
                                          "enum": [
                                            [
                                              "PEGGED_REFERENCE_UNSPECIFIED",
                                              "PEGGED_REFERENCE_MID",
                                              "PEGGED_REFERENCE_BEST_BID",
                                              "PEGGED_REFERENCE_BEST_ASK"
                                            ]
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for updating Vega network parameters",
                            "properties": {
                              "changes": {
                                "description": "The network parameter to update",
                                "properties": {
                                  "key": {
                                    "description": "The unique key",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "The value for the network parameter",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for creating new assets on Vega",
                            "properties": {
                              "changes": {
                                "description": "The configuration of the new asset",
                                "properties": {
                                  "decimals": {
                                    "description": "Number of decimal / precision handled by this asset",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "Name of the asset (e.g: Great British Pound)",
                                    "type": "string"
                                  },
                                  "quantum": {
                                    "description": "The minimum economically meaningful amount in the asset",
                                    "type": "string"
                                  },
                                  "source": {
                                    "oneOf": [
                                      {
                                        "description": "A built-in asset",
                                        "properties": {
                                          "max_faucet_amount_mint": {
                                            "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      {
                                        "description": "An Ethereum ERC20 asset",
                                        "properties": {
                                          "contract_address": {
                                            "description": "The address of the contract for the token, on the ethereum network",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  "symbol": {
                                    "description": "Symbol of the asset (e.g: GBP)",
                                    "type": "string"
                                  },
                                  "total_supply": {
                                    "description": "Total circulating supply for the asset",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for a freeform voting thing",
                            "properties": {
                              "changes": {
                                "description": "The configuration of the new freeform",
                                "properties": {
                                  "description": {
                                    "description": "A short description of what is being proposed",
                                    "type": "string"
                                  },
                                  "hash": {
                                    "description": "The hash on the content of the URL",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "The URL containing content that describes the proposal",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "closing_timestamp": {
                        "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
                        "format": "int64",
                        "type": "integer"
                      },
                      "enactment_timestamp": {
                        "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
                        "format": "int64",
                        "type": "integer"
                      },
                      "validation_timestamp": {
                        "description": "Validation timestamp (Unix time in seconds)",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "timestamp": {
                    "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "yes": {
                "description": "All \"yes\" votes in favour of the proposal above",
                "items": {
                  "description": "Governance vote",
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "yes_party": {
                "additionalProperties": {
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "description": "All latest YES votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetProposalsByPartyRequest": {
        "description": "Request for a list of proposals for a party",
        "properties": {
          "party_id": {
            "description": "Party identifier, required field",
            "type": "string"
          },
          "select_in_state": {
            "description": "Optional proposal state",
            "properties": {
              "value": {
                "description": "Proposal state value",
                "enum": [
                  [
                    "STATE_UNSPECIFIED",
                    "STATE_FAILED",
                    "STATE_OPEN",
                    "STATE_PASSED",
                    "STATE_REJECTED",
                    "STATE_DECLINED",
                    "STATE_ENACTED",
                    "STATE_WAITING_FOR_NODE_VOTE"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetProposalsByPartyResponse": {
        "description": "Response for a list of proposals for a party",
        "properties": {
          "data": {
            "description": "A list of 0 or more governance data",
            "items": {
              "description": "Governance data",
              "properties": {
                "no": {
                  "description": "All \"no\" votes against the proposal above",
                  "items": {
                    "description": "Governance vote",
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "no_party": {
                  "additionalProperties": {
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "All latest NO votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                  "type": "object"
                },
                "proposal": {
                  "description": "The governance proposal",
                  "properties": {
                    "error_details": {
                      "description": "The detailed error associated to the reason.",
                      "type": "string"
                    },
                    "id": {
                      "description": "Unique proposal identifier",
                      "type": "string"
                    },
                    "party_id": {
                      "description": "Party identifier of the author (the party submitting the proposal)",
                      "type": "string"
                    },
                    "reason": {
                      "description": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses",
                      "enum": [
                        [
                          "PROPOSAL_ERROR_UNSPECIFIED",
                          "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
                          "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
                          "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
                          "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
                          "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
                          "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
                          "PROPOSAL_ERROR_NO_PRODUCT",
                          "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
                          "PROPOSAL_ERROR_NO_TRADING_MODE",
                          "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
                          "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
                          "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
                          "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
                          "PROPOSAL_ERROR_INVALID_ASSET",
                          "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
                          "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
                          "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
                          "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
                          "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
                          "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
                          "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
                          "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
                          "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
                          "PROPOSAL_ERROR_INVALID_SHAPE",
                          "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
                          "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
                          "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
                          "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
                        ]
                      ],
                      "type": "string"
                    },
                    "reference": {
                      "description": "Proposal reference",
                      "type": "string"
                    },
                    "state": {
                      "description": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition",
                      "enum": [
                        [
                          "STATE_UNSPECIFIED",
                          "STATE_FAILED",
                          "STATE_OPEN",
                          "STATE_PASSED",
                          "STATE_REJECTED",
                          "STATE_DECLINED",
                          "STATE_ENACTED",
                          "STATE_WAITING_FOR_NODE_VOTE"
                        ]
                      ],
                      "type": "string"
                    },
                    "terms": {
                      "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted",
                      "properties": {
                        "change": {
                          "oneOf": [
                            {
                              "description": "Proposal change for modifying an existing market on Vega",
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for creating new market on Vega",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new market",
                                  "properties": {
                                    "decimal_places": {
                                      "description": "Decimal places used for the new market",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "instrument": {
                                      "description": "New market instrument configuration",
                                      "properties": {
                                        "code": {
                                          "description": "Instrument code",
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "Instrument name",
                                          "type": "string"
                                        },
                                        "product": {
                                          "oneOf": [
                                            {
                                              "description": "Future",
                                              "properties": {
                                                "oracle_spec_binding": {
                                                  "description": "The binding between the oracle spec and the settlement price",
                                                  "properties": {
                                                    "settlement_price_property": {
                                                      "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                                      "type": "string"
                                                    },
                                                    "trading_termination_property": {
                                                      "description": "the name of the property in the oracle data that signals termination of trading",
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "oracle_spec_for_settlement_price": {
                                                  "description": "The oracle spec describing the oracle data of settlement price",
                                                  "properties": {
                                                    "filters": {
                                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                      "items": {
                                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                        "properties": {
                                                          "conditions": {
                                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                            "items": {
                                                              "description": "Condition describes the condition that must be validated by the",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "comparator is the type of comparison to make on the value.",
                                                                  "enum": [
                                                                    [
                                                                      "OPERATOR_UNSPECIFIED",
                                                                      "OPERATOR_EQUALS",
                                                                      "OPERATOR_GREATER_THAN",
                                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                      "OPERATOR_LESS_THAN",
                                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                    ]
                                                                  ],
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "description": "value is used by the comparator.",
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "key": {
                                                            "description": "key is the oracle data property key targeted by the filter.",
                                                            "properties": {
                                                              "name": {
                                                                "description": "name is the name of the property.",
                                                                "type": "string"
                                                              },
                                                              "type": {
                                                                "description": "type is the type of the property.",
                                                                "enum": [
                                                                  [
                                                                    "TYPE_UNSPECIFIED",
                                                                    "TYPE_EMPTY",
                                                                    "TYPE_INTEGER",
                                                                    "TYPE_STRING",
                                                                    "TYPE_BOOLEAN",
                                                                    "TYPE_DECIMAL",
                                                                    "TYPE_TIMESTAMP"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pub_keys": {
                                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "oracle_spec_for_trading_termination": {
                                                  "description": "The oracle spec describing the oracle data of trading termination",
                                                  "properties": {
                                                    "filters": {
                                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                      "items": {
                                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                        "properties": {
                                                          "conditions": {
                                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                            "items": {
                                                              "description": "Condition describes the condition that must be validated by the",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "comparator is the type of comparison to make on the value.",
                                                                  "enum": [
                                                                    [
                                                                      "OPERATOR_UNSPECIFIED",
                                                                      "OPERATOR_EQUALS",
                                                                      "OPERATOR_GREATER_THAN",
                                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                      "OPERATOR_LESS_THAN",
                                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                    ]
                                                                  ],
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "description": "value is used by the comparator.",
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "key": {
                                                            "description": "key is the oracle data property key targeted by the filter.",
                                                            "properties": {
                                                              "name": {
                                                                "description": "name is the name of the property.",
                                                                "type": "string"
                                                              },
                                                              "type": {
                                                                "description": "type is the type of the property.",
                                                                "enum": [
                                                                  [
                                                                    "TYPE_UNSPECIFIED",
                                                                    "TYPE_EMPTY",
                                                                    "TYPE_INTEGER",
                                                                    "TYPE_STRING",
                                                                    "TYPE_BOOLEAN",
                                                                    "TYPE_DECIMAL",
                                                                    "TYPE_TIMESTAMP"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pub_keys": {
                                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "quote_name": {
                                                  "description": "Product quote name",
                                                  "type": "string"
                                                },
                                                "settlement_asset": {
                                                  "description": "Product settlement asset identifier",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "liquidity_monitoring_parameters": {
                                      "description": "Liquidity monitoring parameters",
                                      "properties": {
                                        "auction_extension": {
                                          "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "target_stake_parameters": {
                                          "description": "Specifies parameters related to target stake calculation",
                                          "properties": {
                                            "scaling_factor": {
                                              "description": "Specifies scaling factors used in target stake calculation",
                                              "type": "number"
                                            },
                                            "time_window": {
                                              "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                              "format": "int64",
                                              "type": "integer"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "triggering_ratio": {
                                          "description": "Specifies the triggering ratio for entering liquidity auction",
                                          "type": "number"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "metadata": {
                                      "description": "Optional new market meta data, tags",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "price_monitoring_parameters": {
                                      "description": "Price monitoring parameters",
                                      "properties": {
                                        "triggers": {
                                          "items": {
                                            "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                            "properties": {
                                              "auction_extension": {
                                                "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "horizon": {
                                                "description": "Price monitoring projection horizon τ in seconds",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "probability": {
                                                "description": "Price monitoring probability level p",
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "risk_parameters": {
                                      "oneOf": [
                                        {
                                          "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                                          "properties": {
                                            "factor_long": {
                                              "description": "Pre-defined risk factor value for long",
                                              "type": "number"
                                            },
                                            "factor_short": {
                                              "description": "Pre-defined risk factor value for short",
                                              "type": "number"
                                            },
                                            "max_move_up": {
                                              "description": "Pre-defined maximum price move up that the model considers as valid",
                                              "type": "number"
                                            },
                                            "min_move_down": {
                                              "description": "Pre-defined minimum price move down that the model considers as valid",
                                              "type": "number"
                                            },
                                            "probability_of_trading": {
                                              "description": "Pre-defined constant probability of trading",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                                          "properties": {
                                            "params": {
                                              "description": "Risk model parameters for log normal",
                                              "properties": {
                                                "mu": {
                                                  "description": "Mu param",
                                                  "type": "number"
                                                },
                                                "r": {
                                                  "description": "R param",
                                                  "type": "number"
                                                },
                                                "sigma": {
                                                  "description": "Sigma param",
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "risk_aversion_parameter": {
                                              "description": "Risk Aversion Parameter",
                                              "type": "number"
                                            },
                                            "tau": {
                                              "description": "Tau",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "liquidity_commitment": {
                                  "description": "The commitment from the party creating the NewMarket proposal",
                                  "properties": {
                                    "buys": {
                                      "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                                      "items": {
                                        "description": "Represents a liquidity order",
                                        "properties": {
                                          "offset": {
                                            "description": "The offset/amount of units away for the order",
                                            "type": "string"
                                          },
                                          "proportion": {
                                            "description": "The relative proportion of the commitment to be allocated at a price level",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "reference": {
                                            "description": "The pegged reference point for the order",
                                            "enum": [
                                              [
                                                "PEGGED_REFERENCE_UNSPECIFIED",
                                                "PEGGED_REFERENCE_MID",
                                                "PEGGED_REFERENCE_BEST_BID",
                                                "PEGGED_REFERENCE_BEST_ASK"
                                              ]
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "commitment_amount": {
                                      "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                                      "type": "string"
                                    },
                                    "fee": {
                                      "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                                      "type": "string"
                                    },
                                    "reference": {
                                      "description": "A reference to be associated to all orders created from this commitment",
                                      "type": "string"
                                    },
                                    "sells": {
                                      "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                                      "items": {
                                        "description": "Represents a liquidity order",
                                        "properties": {
                                          "offset": {
                                            "description": "The offset/amount of units away for the order",
                                            "type": "string"
                                          },
                                          "proportion": {
                                            "description": "The relative proportion of the commitment to be allocated at a price level",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "reference": {
                                            "description": "The pegged reference point for the order",
                                            "enum": [
                                              [
                                                "PEGGED_REFERENCE_UNSPECIFIED",
                                                "PEGGED_REFERENCE_MID",
                                                "PEGGED_REFERENCE_BEST_BID",
                                                "PEGGED_REFERENCE_BEST_ASK"
                                              ]
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for updating Vega network parameters",
                              "properties": {
                                "changes": {
                                  "description": "The network parameter to update",
                                  "properties": {
                                    "key": {
                                      "description": "The unique key",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value for the network parameter",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for creating new assets on Vega",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new asset",
                                  "properties": {
                                    "decimals": {
                                      "description": "Number of decimal / precision handled by this asset",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "Name of the asset (e.g: Great British Pound)",
                                      "type": "string"
                                    },
                                    "quantum": {
                                      "description": "The minimum economically meaningful amount in the asset",
                                      "type": "string"
                                    },
                                    "source": {
                                      "oneOf": [
                                        {
                                          "description": "A built-in asset",
                                          "properties": {
                                            "max_faucet_amount_mint": {
                                              "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "An Ethereum ERC20 asset",
                                          "properties": {
                                            "contract_address": {
                                              "description": "The address of the contract for the token, on the ethereum network",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    },
                                    "symbol": {
                                      "description": "Symbol of the asset (e.g: GBP)",
                                      "type": "string"
                                    },
                                    "total_supply": {
                                      "description": "Total circulating supply for the asset",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for a freeform voting thing",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new freeform",
                                  "properties": {
                                    "description": {
                                      "description": "A short description of what is being proposed",
                                      "type": "string"
                                    },
                                    "hash": {
                                      "description": "The hash on the content of the URL",
                                      "type": "string"
                                    },
                                    "url": {
                                      "description": "The URL containing content that describes the proposal",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "closing_timestamp": {
                          "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
                          "format": "int64",
                          "type": "integer"
                        },
                        "enactment_timestamp": {
                          "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
                          "format": "int64",
                          "type": "integer"
                        },
                        "validation_timestamp": {
                          "description": "Validation timestamp (Unix time in seconds)",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "timestamp": {
                      "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "yes": {
                  "description": "All \"yes\" votes in favour of the proposal above",
                  "items": {
                    "description": "Governance vote",
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "yes_party": {
                  "additionalProperties": {
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "All latest YES votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetProposalsRequest": {
        "description": "Request for a list of proposals",
        "properties": {
          "select_in_state": {
            "description": "Optional proposal state",
            "properties": {
              "value": {
                "description": "Proposal state value",
                "enum": [
                  [
                    "STATE_UNSPECIFIED",
                    "STATE_FAILED",
                    "STATE_OPEN",
                    "STATE_PASSED",
                    "STATE_REJECTED",
                    "STATE_DECLINED",
                    "STATE_ENACTED",
                    "STATE_WAITING_FOR_NODE_VOTE"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetProposalsResponse": {
        "description": "Response for a list of proposals",
        "properties": {
          "data": {
            "description": "A list of 0 or more governance data",
            "items": {
              "description": "Governance data",
              "properties": {
                "no": {
                  "description": "All \"no\" votes against the proposal above",
                  "items": {
                    "description": "Governance vote",
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "no_party": {
                  "additionalProperties": {
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "All latest NO votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                  "type": "object"
                },
                "proposal": {
                  "description": "The governance proposal",
                  "properties": {
                    "error_details": {
                      "description": "The detailed error associated to the reason.",
                      "type": "string"
                    },
                    "id": {
                      "description": "Unique proposal identifier",
                      "type": "string"
                    },
                    "party_id": {
                      "description": "Party identifier of the author (the party submitting the proposal)",
                      "type": "string"
                    },
                    "reason": {
                      "description": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses",
                      "enum": [
                        [
                          "PROPOSAL_ERROR_UNSPECIFIED",
                          "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
                          "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
                          "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
                          "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
                          "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
                          "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
                          "PROPOSAL_ERROR_NO_PRODUCT",
                          "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
                          "PROPOSAL_ERROR_NO_TRADING_MODE",
                          "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
                          "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
                          "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
                          "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
                          "PROPOSAL_ERROR_INVALID_ASSET",
                          "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
                          "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
                          "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
                          "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
                          "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
                          "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
                          "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
                          "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
                          "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
                          "PROPOSAL_ERROR_INVALID_SHAPE",
                          "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
                          "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
                          "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
                          "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
                        ]
                      ],
                      "type": "string"
                    },
                    "reference": {
                      "description": "Proposal reference",
                      "type": "string"
                    },
                    "state": {
                      "description": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition",
                      "enum": [
                        [
                          "STATE_UNSPECIFIED",
                          "STATE_FAILED",
                          "STATE_OPEN",
                          "STATE_PASSED",
                          "STATE_REJECTED",
                          "STATE_DECLINED",
                          "STATE_ENACTED",
                          "STATE_WAITING_FOR_NODE_VOTE"
                        ]
                      ],
                      "type": "string"
                    },
                    "terms": {
                      "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted",
                      "properties": {
                        "change": {
                          "oneOf": [
                            {
                              "description": "Proposal change for modifying an existing market on Vega",
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for creating new market on Vega",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new market",
                                  "properties": {
                                    "decimal_places": {
                                      "description": "Decimal places used for the new market",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "instrument": {
                                      "description": "New market instrument configuration",
                                      "properties": {
                                        "code": {
                                          "description": "Instrument code",
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "Instrument name",
                                          "type": "string"
                                        },
                                        "product": {
                                          "oneOf": [
                                            {
                                              "description": "Future",
                                              "properties": {
                                                "oracle_spec_binding": {
                                                  "description": "The binding between the oracle spec and the settlement price",
                                                  "properties": {
                                                    "settlement_price_property": {
                                                      "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                                      "type": "string"
                                                    },
                                                    "trading_termination_property": {
                                                      "description": "the name of the property in the oracle data that signals termination of trading",
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "oracle_spec_for_settlement_price": {
                                                  "description": "The oracle spec describing the oracle data of settlement price",
                                                  "properties": {
                                                    "filters": {
                                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                      "items": {
                                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                        "properties": {
                                                          "conditions": {
                                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                            "items": {
                                                              "description": "Condition describes the condition that must be validated by the",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "comparator is the type of comparison to make on the value.",
                                                                  "enum": [
                                                                    [
                                                                      "OPERATOR_UNSPECIFIED",
                                                                      "OPERATOR_EQUALS",
                                                                      "OPERATOR_GREATER_THAN",
                                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                      "OPERATOR_LESS_THAN",
                                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                    ]
                                                                  ],
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "description": "value is used by the comparator.",
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "key": {
                                                            "description": "key is the oracle data property key targeted by the filter.",
                                                            "properties": {
                                                              "name": {
                                                                "description": "name is the name of the property.",
                                                                "type": "string"
                                                              },
                                                              "type": {
                                                                "description": "type is the type of the property.",
                                                                "enum": [
                                                                  [
                                                                    "TYPE_UNSPECIFIED",
                                                                    "TYPE_EMPTY",
                                                                    "TYPE_INTEGER",
                                                                    "TYPE_STRING",
                                                                    "TYPE_BOOLEAN",
                                                                    "TYPE_DECIMAL",
                                                                    "TYPE_TIMESTAMP"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pub_keys": {
                                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "oracle_spec_for_trading_termination": {
                                                  "description": "The oracle spec describing the oracle data of trading termination",
                                                  "properties": {
                                                    "filters": {
                                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                      "items": {
                                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                        "properties": {
                                                          "conditions": {
                                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                            "items": {
                                                              "description": "Condition describes the condition that must be validated by the",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "comparator is the type of comparison to make on the value.",
                                                                  "enum": [
                                                                    [
                                                                      "OPERATOR_UNSPECIFIED",
                                                                      "OPERATOR_EQUALS",
                                                                      "OPERATOR_GREATER_THAN",
                                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                      "OPERATOR_LESS_THAN",
                                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                    ]
                                                                  ],
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "description": "value is used by the comparator.",
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "key": {
                                                            "description": "key is the oracle data property key targeted by the filter.",
                                                            "properties": {
                                                              "name": {
                                                                "description": "name is the name of the property.",
                                                                "type": "string"
                                                              },
                                                              "type": {
                                                                "description": "type is the type of the property.",
                                                                "enum": [
                                                                  [
                                                                    "TYPE_UNSPECIFIED",
                                                                    "TYPE_EMPTY",
                                                                    "TYPE_INTEGER",
                                                                    "TYPE_STRING",
                                                                    "TYPE_BOOLEAN",
                                                                    "TYPE_DECIMAL",
                                                                    "TYPE_TIMESTAMP"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pub_keys": {
                                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "quote_name": {
                                                  "description": "Product quote name",
                                                  "type": "string"
                                                },
                                                "settlement_asset": {
                                                  "description": "Product settlement asset identifier",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "liquidity_monitoring_parameters": {
                                      "description": "Liquidity monitoring parameters",
                                      "properties": {
                                        "auction_extension": {
                                          "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "target_stake_parameters": {
                                          "description": "Specifies parameters related to target stake calculation",
                                          "properties": {
                                            "scaling_factor": {
                                              "description": "Specifies scaling factors used in target stake calculation",
                                              "type": "number"
                                            },
                                            "time_window": {
                                              "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                              "format": "int64",
                                              "type": "integer"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "triggering_ratio": {
                                          "description": "Specifies the triggering ratio for entering liquidity auction",
                                          "type": "number"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "metadata": {
                                      "description": "Optional new market meta data, tags",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "price_monitoring_parameters": {
                                      "description": "Price monitoring parameters",
                                      "properties": {
                                        "triggers": {
                                          "items": {
                                            "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                            "properties": {
                                              "auction_extension": {
                                                "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "horizon": {
                                                "description": "Price monitoring projection horizon τ in seconds",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "probability": {
                                                "description": "Price monitoring probability level p",
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "risk_parameters": {
                                      "oneOf": [
                                        {
                                          "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                                          "properties": {
                                            "factor_long": {
                                              "description": "Pre-defined risk factor value for long",
                                              "type": "number"
                                            },
                                            "factor_short": {
                                              "description": "Pre-defined risk factor value for short",
                                              "type": "number"
                                            },
                                            "max_move_up": {
                                              "description": "Pre-defined maximum price move up that the model considers as valid",
                                              "type": "number"
                                            },
                                            "min_move_down": {
                                              "description": "Pre-defined minimum price move down that the model considers as valid",
                                              "type": "number"
                                            },
                                            "probability_of_trading": {
                                              "description": "Pre-defined constant probability of trading",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                                          "properties": {
                                            "params": {
                                              "description": "Risk model parameters for log normal",
                                              "properties": {
                                                "mu": {
                                                  "description": "Mu param",
                                                  "type": "number"
                                                },
                                                "r": {
                                                  "description": "R param",
                                                  "type": "number"
                                                },
                                                "sigma": {
                                                  "description": "Sigma param",
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "risk_aversion_parameter": {
                                              "description": "Risk Aversion Parameter",
                                              "type": "number"
                                            },
                                            "tau": {
                                              "description": "Tau",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "liquidity_commitment": {
                                  "description": "The commitment from the party creating the NewMarket proposal",
                                  "properties": {
                                    "buys": {
                                      "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                                      "items": {
                                        "description": "Represents a liquidity order",
                                        "properties": {
                                          "offset": {
                                            "description": "The offset/amount of units away for the order",
                                            "type": "string"
                                          },
                                          "proportion": {
                                            "description": "The relative proportion of the commitment to be allocated at a price level",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "reference": {
                                            "description": "The pegged reference point for the order",
                                            "enum": [
                                              [
                                                "PEGGED_REFERENCE_UNSPECIFIED",
                                                "PEGGED_REFERENCE_MID",
                                                "PEGGED_REFERENCE_BEST_BID",
                                                "PEGGED_REFERENCE_BEST_ASK"
                                              ]
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "commitment_amount": {
                                      "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                                      "type": "string"
                                    },
                                    "fee": {
                                      "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                                      "type": "string"
                                    },
                                    "reference": {
                                      "description": "A reference to be associated to all orders created from this commitment",
                                      "type": "string"
                                    },
                                    "sells": {
                                      "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                                      "items": {
                                        "description": "Represents a liquidity order",
                                        "properties": {
                                          "offset": {
                                            "description": "The offset/amount of units away for the order",
                                            "type": "string"
                                          },
                                          "proportion": {
                                            "description": "The relative proportion of the commitment to be allocated at a price level",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "reference": {
                                            "description": "The pegged reference point for the order",
                                            "enum": [
                                              [
                                                "PEGGED_REFERENCE_UNSPECIFIED",
                                                "PEGGED_REFERENCE_MID",
                                                "PEGGED_REFERENCE_BEST_BID",
                                                "PEGGED_REFERENCE_BEST_ASK"
                                              ]
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for updating Vega network parameters",
                              "properties": {
                                "changes": {
                                  "description": "The network parameter to update",
                                  "properties": {
                                    "key": {
                                      "description": "The unique key",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value for the network parameter",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for creating new assets on Vega",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new asset",
                                  "properties": {
                                    "decimals": {
                                      "description": "Number of decimal / precision handled by this asset",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "Name of the asset (e.g: Great British Pound)",
                                      "type": "string"
                                    },
                                    "quantum": {
                                      "description": "The minimum economically meaningful amount in the asset",
                                      "type": "string"
                                    },
                                    "source": {
                                      "oneOf": [
                                        {
                                          "description": "A built-in asset",
                                          "properties": {
                                            "max_faucet_amount_mint": {
                                              "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "An Ethereum ERC20 asset",
                                          "properties": {
                                            "contract_address": {
                                              "description": "The address of the contract for the token, on the ethereum network",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    },
                                    "symbol": {
                                      "description": "Symbol of the asset (e.g: GBP)",
                                      "type": "string"
                                    },
                                    "total_supply": {
                                      "description": "Total circulating supply for the asset",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for a freeform voting thing",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new freeform",
                                  "properties": {
                                    "description": {
                                      "description": "A short description of what is being proposed",
                                      "type": "string"
                                    },
                                    "hash": {
                                      "description": "The hash on the content of the URL",
                                      "type": "string"
                                    },
                                    "url": {
                                      "description": "The URL containing content that describes the proposal",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "closing_timestamp": {
                          "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
                          "format": "int64",
                          "type": "integer"
                        },
                        "enactment_timestamp": {
                          "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
                          "format": "int64",
                          "type": "integer"
                        },
                        "validation_timestamp": {
                          "description": "Validation timestamp (Unix time in seconds)",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "timestamp": {
                      "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "yes": {
                  "description": "All \"yes\" votes in favour of the proposal above",
                  "items": {
                    "description": "Governance vote",
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "yes_party": {
                  "additionalProperties": {
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "All latest YES votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetRewardSummariesRequest": {
        "description": "A request to get reward details for a party",
        "properties": {
          "asset_id": {
            "type": "string"
          },
          "party_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetRewardSummariesResponse": {
        "description": "The return message with reward details in for a single party",
        "properties": {
          "summaries": {
            "items": {
              "description": "Details for rewards for a single asset",
              "properties": {
                "amount": {
                  "description": "Total amount of rewards for the asset",
                  "type": "string"
                },
                "asset_id": {
                  "type": "string"
                },
                "party_id": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetRewardsRequest": {
        "description": "A request to get reward details for a party",
        "properties": {
          "asset_id": {
            "type": "string"
          },
          "pagination": {
            "properties": {
              "descending": {
                "description": "Descending reverses the order of the records returned, default is true, if false the results will be returned in ascending order",
                "type": "boolean"
              },
              "limit": {
                "description": "Limit the number of returned records to the value specified, default is 50",
                "format": "int64",
                "type": "integer"
              },
              "skip": {
                "description": "Skip the number of records specified, default is 0",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "party_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetRewardsResponse": {
        "description": "The return message with reward details in for a single party",
        "properties": {
          "rewards": {
            "items": {
              "description": "Details for a single reward payment",
              "properties": {
                "amount": {
                  "type": "string"
                },
                "asset_id": {
                  "type": "string"
                },
                "epoch": {
                  "format": "int64",
                  "type": "integer"
                },
                "party_id": {
                  "type": "string"
                },
                "percentage_of_total": {
                  "type": "string"
                },
                "received_at": {
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetUpdateMarketProposalsRequest": {
        "description": "Request for a list of update market proposals",
        "properties": {
          "market_id": {
            "description": "Market identifier, required field",
            "type": "string"
          },
          "select_in_state": {
            "description": "Proposal state",
            "properties": {
              "value": {
                "description": "Proposal state value",
                "enum": [
                  [
                    "STATE_UNSPECIFIED",
                    "STATE_FAILED",
                    "STATE_OPEN",
                    "STATE_PASSED",
                    "STATE_REJECTED",
                    "STATE_DECLINED",
                    "STATE_ENACTED",
                    "STATE_WAITING_FOR_NODE_VOTE"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetUpdateMarketProposalsResponse": {
        "description": "Response for a list of update market proposals",
        "properties": {
          "data": {
            "description": "A list of 0 or more governance data",
            "items": {
              "description": "Governance data",
              "properties": {
                "no": {
                  "description": "All \"no\" votes against the proposal above",
                  "items": {
                    "description": "Governance vote",
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "no_party": {
                  "additionalProperties": {
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "All latest NO votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                  "type": "object"
                },
                "proposal": {
                  "description": "The governance proposal",
                  "properties": {
                    "error_details": {
                      "description": "The detailed error associated to the reason.",
                      "type": "string"
                    },
                    "id": {
                      "description": "Unique proposal identifier",
                      "type": "string"
                    },
                    "party_id": {
                      "description": "Party identifier of the author (the party submitting the proposal)",
                      "type": "string"
                    },
                    "reason": {
                      "description": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses",
                      "enum": [
                        [
                          "PROPOSAL_ERROR_UNSPECIFIED",
                          "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
                          "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
                          "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
                          "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
                          "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
                          "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
                          "PROPOSAL_ERROR_NO_PRODUCT",
                          "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
                          "PROPOSAL_ERROR_NO_TRADING_MODE",
                          "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
                          "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
                          "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
                          "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
                          "PROPOSAL_ERROR_INVALID_ASSET",
                          "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
                          "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
                          "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
                          "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
                          "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
                          "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
                          "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
                          "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
                          "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
                          "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
                          "PROPOSAL_ERROR_INVALID_SHAPE",
                          "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
                          "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
                          "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
                          "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
                        ]
                      ],
                      "type": "string"
                    },
                    "reference": {
                      "description": "Proposal reference",
                      "type": "string"
                    },
                    "state": {
                      "description": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition",
                      "enum": [
                        [
                          "STATE_UNSPECIFIED",
                          "STATE_FAILED",
                          "STATE_OPEN",
                          "STATE_PASSED",
                          "STATE_REJECTED",
                          "STATE_DECLINED",
                          "STATE_ENACTED",
                          "STATE_WAITING_FOR_NODE_VOTE"
                        ]
                      ],
                      "type": "string"
                    },
                    "terms": {
                      "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted",
                      "properties": {
                        "change": {
                          "oneOf": [
                            {
                              "description": "Proposal change for modifying an existing market on Vega",
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for creating new market on Vega",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new market",
                                  "properties": {
                                    "decimal_places": {
                                      "description": "Decimal places used for the new market",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "instrument": {
                                      "description": "New market instrument configuration",
                                      "properties": {
                                        "code": {
                                          "description": "Instrument code",
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "Instrument name",
                                          "type": "string"
                                        },
                                        "product": {
                                          "oneOf": [
                                            {
                                              "description": "Future",
                                              "properties": {
                                                "oracle_spec_binding": {
                                                  "description": "The binding between the oracle spec and the settlement price",
                                                  "properties": {
                                                    "settlement_price_property": {
                                                      "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                                      "type": "string"
                                                    },
                                                    "trading_termination_property": {
                                                      "description": "the name of the property in the oracle data that signals termination of trading",
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "oracle_spec_for_settlement_price": {
                                                  "description": "The oracle spec describing the oracle data of settlement price",
                                                  "properties": {
                                                    "filters": {
                                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                      "items": {
                                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                        "properties": {
                                                          "conditions": {
                                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                            "items": {
                                                              "description": "Condition describes the condition that must be validated by the",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "comparator is the type of comparison to make on the value.",
                                                                  "enum": [
                                                                    [
                                                                      "OPERATOR_UNSPECIFIED",
                                                                      "OPERATOR_EQUALS",
                                                                      "OPERATOR_GREATER_THAN",
                                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                      "OPERATOR_LESS_THAN",
                                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                    ]
                                                                  ],
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "description": "value is used by the comparator.",
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "key": {
                                                            "description": "key is the oracle data property key targeted by the filter.",
                                                            "properties": {
                                                              "name": {
                                                                "description": "name is the name of the property.",
                                                                "type": "string"
                                                              },
                                                              "type": {
                                                                "description": "type is the type of the property.",
                                                                "enum": [
                                                                  [
                                                                    "TYPE_UNSPECIFIED",
                                                                    "TYPE_EMPTY",
                                                                    "TYPE_INTEGER",
                                                                    "TYPE_STRING",
                                                                    "TYPE_BOOLEAN",
                                                                    "TYPE_DECIMAL",
                                                                    "TYPE_TIMESTAMP"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pub_keys": {
                                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "oracle_spec_for_trading_termination": {
                                                  "description": "The oracle spec describing the oracle data of trading termination",
                                                  "properties": {
                                                    "filters": {
                                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                      "items": {
                                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                        "properties": {
                                                          "conditions": {
                                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                            "items": {
                                                              "description": "Condition describes the condition that must be validated by the",
                                                              "properties": {
                                                                "operator": {
                                                                  "description": "comparator is the type of comparison to make on the value.",
                                                                  "enum": [
                                                                    [
                                                                      "OPERATOR_UNSPECIFIED",
                                                                      "OPERATOR_EQUALS",
                                                                      "OPERATOR_GREATER_THAN",
                                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                      "OPERATOR_LESS_THAN",
                                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                    ]
                                                                  ],
                                                                  "type": "string"
                                                                },
                                                                "value": {
                                                                  "description": "value is used by the comparator.",
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "key": {
                                                            "description": "key is the oracle data property key targeted by the filter.",
                                                            "properties": {
                                                              "name": {
                                                                "description": "name is the name of the property.",
                                                                "type": "string"
                                                              },
                                                              "type": {
                                                                "description": "type is the type of the property.",
                                                                "enum": [
                                                                  [
                                                                    "TYPE_UNSPECIFIED",
                                                                    "TYPE_EMPTY",
                                                                    "TYPE_INTEGER",
                                                                    "TYPE_STRING",
                                                                    "TYPE_BOOLEAN",
                                                                    "TYPE_DECIMAL",
                                                                    "TYPE_TIMESTAMP"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pub_keys": {
                                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "quote_name": {
                                                  "description": "Product quote name",
                                                  "type": "string"
                                                },
                                                "settlement_asset": {
                                                  "description": "Product settlement asset identifier",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "liquidity_monitoring_parameters": {
                                      "description": "Liquidity monitoring parameters",
                                      "properties": {
                                        "auction_extension": {
                                          "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "target_stake_parameters": {
                                          "description": "Specifies parameters related to target stake calculation",
                                          "properties": {
                                            "scaling_factor": {
                                              "description": "Specifies scaling factors used in target stake calculation",
                                              "type": "number"
                                            },
                                            "time_window": {
                                              "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                              "format": "int64",
                                              "type": "integer"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "triggering_ratio": {
                                          "description": "Specifies the triggering ratio for entering liquidity auction",
                                          "type": "number"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "metadata": {
                                      "description": "Optional new market meta data, tags",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "price_monitoring_parameters": {
                                      "description": "Price monitoring parameters",
                                      "properties": {
                                        "triggers": {
                                          "items": {
                                            "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                            "properties": {
                                              "auction_extension": {
                                                "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "horizon": {
                                                "description": "Price monitoring projection horizon τ in seconds",
                                                "format": "int64",
                                                "type": "integer"
                                              },
                                              "probability": {
                                                "description": "Price monitoring probability level p",
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "risk_parameters": {
                                      "oneOf": [
                                        {
                                          "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                                          "properties": {
                                            "factor_long": {
                                              "description": "Pre-defined risk factor value for long",
                                              "type": "number"
                                            },
                                            "factor_short": {
                                              "description": "Pre-defined risk factor value for short",
                                              "type": "number"
                                            },
                                            "max_move_up": {
                                              "description": "Pre-defined maximum price move up that the model considers as valid",
                                              "type": "number"
                                            },
                                            "min_move_down": {
                                              "description": "Pre-defined minimum price move down that the model considers as valid",
                                              "type": "number"
                                            },
                                            "probability_of_trading": {
                                              "description": "Pre-defined constant probability of trading",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                                          "properties": {
                                            "params": {
                                              "description": "Risk model parameters for log normal",
                                              "properties": {
                                                "mu": {
                                                  "description": "Mu param",
                                                  "type": "number"
                                                },
                                                "r": {
                                                  "description": "R param",
                                                  "type": "number"
                                                },
                                                "sigma": {
                                                  "description": "Sigma param",
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "risk_aversion_parameter": {
                                              "description": "Risk Aversion Parameter",
                                              "type": "number"
                                            },
                                            "tau": {
                                              "description": "Tau",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "liquidity_commitment": {
                                  "description": "The commitment from the party creating the NewMarket proposal",
                                  "properties": {
                                    "buys": {
                                      "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                                      "items": {
                                        "description": "Represents a liquidity order",
                                        "properties": {
                                          "offset": {
                                            "description": "The offset/amount of units away for the order",
                                            "type": "string"
                                          },
                                          "proportion": {
                                            "description": "The relative proportion of the commitment to be allocated at a price level",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "reference": {
                                            "description": "The pegged reference point for the order",
                                            "enum": [
                                              [
                                                "PEGGED_REFERENCE_UNSPECIFIED",
                                                "PEGGED_REFERENCE_MID",
                                                "PEGGED_REFERENCE_BEST_BID",
                                                "PEGGED_REFERENCE_BEST_ASK"
                                              ]
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "commitment_amount": {
                                      "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                                      "type": "string"
                                    },
                                    "fee": {
                                      "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                                      "type": "string"
                                    },
                                    "reference": {
                                      "description": "A reference to be associated to all orders created from this commitment",
                                      "type": "string"
                                    },
                                    "sells": {
                                      "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                                      "items": {
                                        "description": "Represents a liquidity order",
                                        "properties": {
                                          "offset": {
                                            "description": "The offset/amount of units away for the order",
                                            "type": "string"
                                          },
                                          "proportion": {
                                            "description": "The relative proportion of the commitment to be allocated at a price level",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "reference": {
                                            "description": "The pegged reference point for the order",
                                            "enum": [
                                              [
                                                "PEGGED_REFERENCE_UNSPECIFIED",
                                                "PEGGED_REFERENCE_MID",
                                                "PEGGED_REFERENCE_BEST_BID",
                                                "PEGGED_REFERENCE_BEST_ASK"
                                              ]
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for updating Vega network parameters",
                              "properties": {
                                "changes": {
                                  "description": "The network parameter to update",
                                  "properties": {
                                    "key": {
                                      "description": "The unique key",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value for the network parameter",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for creating new assets on Vega",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new asset",
                                  "properties": {
                                    "decimals": {
                                      "description": "Number of decimal / precision handled by this asset",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "Name of the asset (e.g: Great British Pound)",
                                      "type": "string"
                                    },
                                    "quantum": {
                                      "description": "The minimum economically meaningful amount in the asset",
                                      "type": "string"
                                    },
                                    "source": {
                                      "oneOf": [
                                        {
                                          "description": "A built-in asset",
                                          "properties": {
                                            "max_faucet_amount_mint": {
                                              "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "An Ethereum ERC20 asset",
                                          "properties": {
                                            "contract_address": {
                                              "description": "The address of the contract for the token, on the ethereum network",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    },
                                    "symbol": {
                                      "description": "Symbol of the asset (e.g: GBP)",
                                      "type": "string"
                                    },
                                    "total_supply": {
                                      "description": "Total circulating supply for the asset",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "description": "Proposal change for a freeform voting thing",
                              "properties": {
                                "changes": {
                                  "description": "The configuration of the new freeform",
                                  "properties": {
                                    "description": {
                                      "description": "A short description of what is being proposed",
                                      "type": "string"
                                    },
                                    "hash": {
                                      "description": "The hash on the content of the URL",
                                      "type": "string"
                                    },
                                    "url": {
                                      "description": "The URL containing content that describes the proposal",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "closing_timestamp": {
                          "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
                          "format": "int64",
                          "type": "integer"
                        },
                        "enactment_timestamp": {
                          "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
                          "format": "int64",
                          "type": "integer"
                        },
                        "validation_timestamp": {
                          "description": "Validation timestamp (Unix time in seconds)",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "timestamp": {
                      "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "yes": {
                  "description": "All \"yes\" votes in favour of the proposal above",
                  "items": {
                    "description": "Governance vote",
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "yes_party": {
                  "additionalProperties": {
                    "properties": {
                      "party_id": {
                        "description": "Voter's party identifier",
                        "type": "string"
                      },
                      "proposal_id": {
                        "description": "Identifier of the proposal being voted on",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                        "format": "int64",
                        "type": "integer"
                      },
                      "total_governance_token_balance": {
                        "description": "Total number of governance token for the party that casted the vote",
                        "type": "string"
                      },
                      "total_governance_token_weight": {
                        "description": "The weight of this vote based on the total of governance token",
                        "type": "string"
                      },
                      "value": {
                        "description": "Actual vote",
                        "enum": [
                          [
                            "VALUE_UNSPECIFIED",
                            "VALUE_NO",
                            "VALUE_YES"
                          ]
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "description": "All latest YES votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetVegaTimeRequest": {
        "description": "Request for the current time of the vega network",
        "type": "object"
      },
      "datanode.api.v1.GetVegaTimeResponse": {
        "description": "Response for the current consensus coordinated time on the Vega network, referred to as \"VegaTime\"",
        "properties": {
          "timestamp": {
            "description": "Timestamp representation of current VegaTime as represented in Nanoseconds since the epoch, for example `1580473859111222333` corresponds to `2020-01-31T12:30:59.111222333Z`",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetVotesByPartyRequest": {
        "description": "Request for a list of votes for a party",
        "properties": {
          "party_id": {
            "description": "Party identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GetVotesByPartyResponse": {
        "description": "Response for a list of votes for a party",
        "properties": {
          "votes": {
            "description": "A list of 0 or more votes",
            "items": {
              "description": "Governance vote",
              "properties": {
                "party_id": {
                  "description": "Voter's party identifier",
                  "type": "string"
                },
                "proposal_id": {
                  "description": "Identifier of the proposal being voted on",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                  "format": "int64",
                  "type": "integer"
                },
                "total_governance_token_balance": {
                  "description": "Total number of governance token for the party that casted the vote",
                  "type": "string"
                },
                "total_governance_token_weight": {
                  "description": "The weight of this vote based on the total of governance token",
                  "type": "string"
                },
                "value": {
                  "description": "Actual vote",
                  "enum": [
                    [
                      "VALUE_UNSPECIFIED",
                      "VALUE_NO",
                      "VALUE_YES"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GlobalRewardPoolAccountsRequest": {
        "description": "Request for a list of global reward pool accounts",
        "properties": {
          "asset": {
            "description": "Asset identifier, required field - Set to an empty string to return all accounts - Set to an asset ID to return a single global reward pool account for a given asset",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.GlobalRewardPoolAccountsResponse": {
        "description": "Response for a list of global reward pool accounts",
        "properties": {
          "accounts": {
            "description": "A list of 0 or more global reward pool accounts",
            "items": {
              "description": "Represents an account for an asset on Vega for a particular owner or party",
              "properties": {
                "asset": {
                  "description": "Asset identifier for the account",
                  "type": "string"
                },
                "balance": {
                  "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places and importantly balances cannot be negative",
                  "type": "string"
                },
                "id": {
                  "description": "Unique account identifier (used internally by Vega)",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty",
                  "type": "string"
                },
                "owner": {
                  "description": "The party that the account belongs to, special values include `network`, which represents the Vega network and is most commonly seen during liquidation of distressed trading positions",
                  "type": "string"
                },
                "type": {
                  "description": "The account type related to this account",
                  "enum": [
                    [
                      "ACCOUNT_TYPE_UNSPECIFIED",
                      "ACCOUNT_TYPE_INSURANCE",
                      "ACCOUNT_TYPE_SETTLEMENT",
                      "ACCOUNT_TYPE_MARGIN",
                      "ACCOUNT_TYPE_GENERAL",
                      "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                      "ACCOUNT_TYPE_FEES_LIQUIDITY",
                      "ACCOUNT_TYPE_FEES_MAKER",
                      "ACCOUNT_TYPE_LOCK_WITHDRAW",
                      "ACCOUNT_TYPE_BOND",
                      "ACCOUNT_TYPE_EXTERNAL",
                      "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                      "ACCOUNT_TYPE_GLOBAL_REWARD",
                      "ACCOUNT_TYPE_PENDING_TRANSFERS",
                      "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                      "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.KeyRotation": {
        "properties": {
          "block_height": {
            "format": "int64",
            "type": "integer"
          },
          "new_pub_key": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "old_pub_key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.LastTradeRequest": {
        "description": "Request for the latest trade that occurred on Vega for a given market",
        "properties": {
          "market_id": {
            "description": "Market identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.LastTradeResponse": {
        "description": "Response for the latest trade that occurred on Vega for a given market",
        "properties": {
          "trade": {
            "description": "A trade, if found",
            "properties": {
              "aggressor": {
                "description": "Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                "enum": [
                  [
                    "SIDE_UNSPECIFIED",
                    "SIDE_BUY",
                    "SIDE_SELL"
                  ]
                ],
                "type": "string"
              },
              "buy_order": {
                "description": "Identifier of the order from the buy side",
                "type": "string"
              },
              "buyer": {
                "description": "Unique party identifier for the buyer",
                "type": "string"
              },
              "buyer_auction_batch": {
                "description": "Auction batch number that the buy side order was placed in",
                "format": "int64",
                "type": "integer"
              },
              "buyer_fee": {
                "description": "Fee amount charged to the buyer party for the trade",
                "properties": {
                  "infrastructure_fee": {
                    "description": "Fee amount paid for maintaining the Vega infrastructure",
                    "type": "string"
                  },
                  "liquidity_fee": {
                    "description": "Fee amount paid to market makers",
                    "type": "string"
                  },
                  "maker_fee": {
                    "description": "Fee amount paid to the non-aggressive party of the trade",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "Unique identifier for the trade (generated by Vega)",
                "type": "string"
              },
              "market_id": {
                "description": "Market identifier (the market that the trade occurred on)",
                "type": "string"
              },
              "price": {
                "description": "Price for the trade, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "sell_order": {
                "description": "Identifier of the order from the sell side",
                "type": "string"
              },
              "seller": {
                "description": "Unique party identifier for the seller",
                "type": "string"
              },
              "seller_auction_batch": {
                "description": "Auction batch number that the sell side order was placed in",
                "format": "int64",
                "type": "integer"
              },
              "seller_fee": {
                "description": "Fee amount charged to the seller party for the trade",
                "properties": {
                  "infrastructure_fee": {
                    "description": "Fee amount paid for maintaining the Vega infrastructure",
                    "type": "string"
                  },
                  "liquidity_fee": {
                    "description": "Fee amount paid to market makers",
                    "type": "string"
                  },
                  "maker_fee": {
                    "description": "Fee amount paid to the non-aggressive party of the trade",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "size": {
                "description": "Size filled for the trade",
                "format": "int64",
                "type": "integer"
              },
              "timestamp": {
                "description": "Timestamp for when the trade occurred, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "type": {
                "description": "Type for the trade - See [`Trade.Type`](#vega.Trade.Type)",
                "enum": [
                  [
                    "TYPE_UNSPECIFIED",
                    "TYPE_DEFAULT",
                    "TYPE_NETWORK_CLOSE_OUT_GOOD",
                    "TYPE_NETWORK_CLOSE_OUT_BAD"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.LiquidityProvisionsRequest": {
        "description": "A message requesting for the list of liquidity provision orders for markets One of the two filters is required (or both)",
        "properties": {
          "market": {
            "description": "The target market for the liquidity provision orders",
            "type": "string"
          },
          "party": {
            "description": "The party which submitted the liquidity provision orders",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.LiquidityProvisionsResponse": {
        "description": "A response containing all of the Vega liquidity provision orders",
        "properties": {
          "liquidity_provisions": {
            "items": {
              "description": "An Liquidity provider commitment",
              "properties": {
                "buys": {
                  "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                  "items": {
                    "description": "A pair of a liquidity order and the id of the generated order by the core",
                    "properties": {
                      "liquidity_order": {
                        "description": "The liquidity order from the original submission",
                        "properties": {
                          "offset": {
                            "description": "The offset/amount of units away for the order",
                            "type": "string"
                          },
                          "proportion": {
                            "description": "The relative proportion of the commitment to be allocated at a price level",
                            "format": "int32",
                            "type": "integer"
                          },
                          "reference": {
                            "description": "The pegged reference point for the order",
                            "enum": [
                              [
                                "PEGGED_REFERENCE_UNSPECIFIED",
                                "PEGGED_REFERENCE_MID",
                                "PEGGED_REFERENCE_BEST_BID",
                                "PEGGED_REFERENCE_BEST_ASK"
                              ]
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "order_id": {
                        "description": "Unique identifier of the pegged order generated by the core to fulfil this liquidity order",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "commitment_amount": {
                  "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                  "type": "string"
                },
                "created_at": {
                  "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "fee": {
                  "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                  "type": "string"
                },
                "id": {
                  "description": "Unique identifier",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier for the order, required field",
                  "type": "string"
                },
                "party_id": {
                  "description": "Unique party identifier for the creator of the provision",
                  "type": "string"
                },
                "reference": {
                  "description": "A reference shared between this liquidity provision and all it's orders",
                  "type": "string"
                },
                "sells": {
                  "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                  "items": {
                    "description": "A pair of a liquidity order and the id of the generated order by the core",
                    "properties": {
                      "liquidity_order": {
                        "description": "The liquidity order from the original submission",
                        "properties": {
                          "offset": {
                            "description": "The offset/amount of units away for the order",
                            "type": "string"
                          },
                          "proportion": {
                            "description": "The relative proportion of the commitment to be allocated at a price level",
                            "format": "int32",
                            "type": "integer"
                          },
                          "reference": {
                            "description": "The pegged reference point for the order",
                            "enum": [
                              [
                                "PEGGED_REFERENCE_UNSPECIFIED",
                                "PEGGED_REFERENCE_MID",
                                "PEGGED_REFERENCE_BEST_BID",
                                "PEGGED_REFERENCE_BEST_ASK"
                              ]
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "order_id": {
                        "description": "Unique identifier of the pegged order generated by the core to fulfil this liquidity order",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "status": {
                  "description": "Status of this liquidity provision order",
                  "enum": [
                    [
                      "STATUS_UNSPECIFIED",
                      "STATUS_ACTIVE",
                      "STATUS_STOPPED",
                      "STATUS_CANCELLED",
                      "STATUS_REJECTED",
                      "STATUS_UNDEPLOYED",
                      "STATUS_PENDING"
                    ]
                  ],
                  "type": "string"
                },
                "updated_at": {
                  "description": "Timestamp for when the order was updated at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "version": {
                  "description": "Version of this liquidity provision order",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarginLevelsRequest": {
        "description": "Request for margin levels for a party",
        "properties": {
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          },
          "party_id": {
            "description": "Party identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarginLevelsResponse": {
        "description": "Response for margin levels for a party",
        "properties": {
          "margin_levels": {
            "description": "A list of 0 or more margin levels",
            "items": {
              "description": "Represents the margin levels for a party on a market at a given time",
              "properties": {
                "asset": {
                  "description": "Asset identifier",
                  "type": "string"
                },
                "collateral_release_level": {
                  "description": "Collateral release level value",
                  "type": "string"
                },
                "initial_margin": {
                  "description": "Initial margin value",
                  "type": "string"
                },
                "maintenance_margin": {
                  "description": "Maintenance margin value",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier",
                  "type": "string"
                },
                "party_id": {
                  "description": "Party identifier",
                  "type": "string"
                },
                "search_level": {
                  "description": "Search level value",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarginLevelsSubscribeRequest": {
        "description": "Request to subscribe to a stream of MarginLevels data matching the given party identifier Optionally, the list can be additionally filtered by market",
        "properties": {
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          },
          "party_id": {
            "description": "Party identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarginLevelsSubscribeResponse": {
        "properties": {
          "margin_levels": {
            "properties": {
              "asset": {
                "description": "Asset identifier",
                "type": "string"
              },
              "collateral_release_level": {
                "description": "Collateral release level value",
                "type": "string"
              },
              "initial_margin": {
                "description": "Initial margin value",
                "type": "string"
              },
              "maintenance_margin": {
                "description": "Maintenance margin value",
                "type": "string"
              },
              "market_id": {
                "description": "Market identifier",
                "type": "string"
              },
              "party_id": {
                "description": "Party identifier",
                "type": "string"
              },
              "search_level": {
                "description": "Search level value",
                "type": "string"
              },
              "timestamp": {
                "description": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketAccountsRequest": {
        "description": "Request for a list of accounts for a market",
        "properties": {
          "asset": {
            "description": "Asset identifier",
            "type": "string"
          },
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketAccountsResponse": {
        "description": "Response for a list of accounts for a market",
        "properties": {
          "accounts": {
            "description": "A list of 0 or more accounts",
            "items": {
              "description": "Represents an account for an asset on Vega for a particular owner or party",
              "properties": {
                "asset": {
                  "description": "Asset identifier for the account",
                  "type": "string"
                },
                "balance": {
                  "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places and importantly balances cannot be negative",
                  "type": "string"
                },
                "id": {
                  "description": "Unique account identifier (used internally by Vega)",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty",
                  "type": "string"
                },
                "owner": {
                  "description": "The party that the account belongs to, special values include `network`, which represents the Vega network and is most commonly seen during liquidation of distressed trading positions",
                  "type": "string"
                },
                "type": {
                  "description": "The account type related to this account",
                  "enum": [
                    [
                      "ACCOUNT_TYPE_UNSPECIFIED",
                      "ACCOUNT_TYPE_INSURANCE",
                      "ACCOUNT_TYPE_SETTLEMENT",
                      "ACCOUNT_TYPE_MARGIN",
                      "ACCOUNT_TYPE_GENERAL",
                      "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                      "ACCOUNT_TYPE_FEES_LIQUIDITY",
                      "ACCOUNT_TYPE_FEES_MAKER",
                      "ACCOUNT_TYPE_LOCK_WITHDRAW",
                      "ACCOUNT_TYPE_BOND",
                      "ACCOUNT_TYPE_EXTERNAL",
                      "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                      "ACCOUNT_TYPE_GLOBAL_REWARD",
                      "ACCOUNT_TYPE_PENDING_TRANSFERS",
                      "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                      "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketByIDRequest": {
        "description": "Request for a market given a market identifier",
        "properties": {
          "market_id": {
            "description": "Market identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketByIDResponse": {
        "description": "Response for a market given a market identifier",
        "properties": {
          "market": {
            "description": "A market, if found",
            "properties": {
              "decimal_places": {
                "description": "Number of decimal places that a price must be shifted by in order to get a correct price denominated in the currency of the market, for example: `realPrice = price / 10^decimalPlaces`",
                "format": "int64",
                "type": "integer"
              },
              "fees": {
                "description": "Fees configuration",
                "properties": {
                  "factors": {
                    "description": "Fee factors",
                    "properties": {
                      "infrastructure_fee": {
                        "description": "Infrastructure fee",
                        "type": "string"
                      },
                      "liquidity_fee": {
                        "description": "Liquidity fee",
                        "type": "string"
                      },
                      "maker_fee": {
                        "description": "Maker fee",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "Unique identifier",
                "type": "string"
              },
              "liquidity_monitoring_parameters": {
                "description": "LiquidityMonitoringParameters for the market",
                "properties": {
                  "auction_extension": {
                    "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                    "format": "int64",
                    "type": "integer"
                  },
                  "target_stake_parameters": {
                    "description": "Specifies parameters related to target stake calculation",
                    "properties": {
                      "scaling_factor": {
                        "description": "Specifies scaling factors used in target stake calculation",
                        "type": "number"
                      },
                      "time_window": {
                        "description": "Specifies length of time window expressed in seconds for target stake calculation",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "triggering_ratio": {
                    "description": "Specifies the triggering ratio for entering liquidity auction",
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "market_timestamps": {
                "description": "Timestamps for when the market stay changes",
                "properties": {
                  "close": {
                    "description": "Time when the market is closed",
                    "format": "int64",
                    "type": "integer"
                  },
                  "open": {
                    "description": "Time when the market has left the opening auction and is ready to accept trades",
                    "format": "int64",
                    "type": "integer"
                  },
                  "pending": {
                    "description": "Time when the market has been voted in and is created into an opening auction",
                    "format": "int64",
                    "type": "integer"
                  },
                  "proposed": {
                    "description": "Time when the market is first proposed",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "opening_auction": {
                "description": "Auction duration specifies how long the opening auction will run (minimum duration and optionally a minimum traded volume)",
                "properties": {
                  "duration": {
                    "description": "Duration of the auction in seconds",
                    "format": "int64",
                    "type": "integer"
                  },
                  "volume": {
                    "description": "Target uncrossing trading volume",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "price_monitoring_settings": {
                "description": "PriceMonitoringSettings for the market",
                "properties": {
                  "parameters": {
                    "description": "Specifies price monitoring parameters to be used for price monitoring purposes",
                    "properties": {
                      "triggers": {
                        "items": {
                          "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                          "properties": {
                            "auction_extension": {
                              "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                              "format": "int64",
                              "type": "integer"
                            },
                            "horizon": {
                              "description": "Price monitoring projection horizon τ in seconds",
                              "format": "int64",
                              "type": "integer"
                            },
                            "probability": {
                              "description": "Price monitoring probability level p",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "update_frequency": {
                    "description": "Specifies how often (expressed in seconds) the price monitoring bounds should be updated",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "state": {
                "description": "Current state of the market",
                "enum": [
                  [
                    "STATE_UNSPECIFIED",
                    "STATE_PROPOSED",
                    "STATE_REJECTED",
                    "STATE_PENDING",
                    "STATE_CANCELLED",
                    "STATE_ACTIVE",
                    "STATE_SUSPENDED",
                    "STATE_CLOSED",
                    "STATE_TRADING_TERMINATED",
                    "STATE_SETTLED"
                  ]
                ],
                "type": "string"
              },
              "tradable_instrument": {
                "description": "Tradable instrument configuration",
                "properties": {
                  "instrument": {
                    "description": "Instrument details",
                    "properties": {
                      "code": {
                        "description": "Code for the instrument",
                        "type": "string"
                      },
                      "id": {
                        "description": "Instrument identifier",
                        "type": "string"
                      },
                      "metadata": {
                        "description": "A collection of instrument meta-data",
                        "properties": {
                          "tags": {
                            "description": "A list of 0 or more tags",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "name": {
                        "description": "Name of the instrument",
                        "type": "string"
                      },
                      "product": {
                        "oneOf": [
                          {
                            "description": "Future",
                            "properties": {
                              "oracle_spec_binding": {
                                "description": "The binding between the oracle spec and the oracle data",
                                "properties": {
                                  "settlement_price_property": {
                                    "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                    "type": "string"
                                  },
                                  "trading_termination_property": {
                                    "description": "the name of the property in the oracle data that signals termination of trading",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "oracle_spec_for_settlement_price": {
                                "description": "The oracle spec describing the settlement price oracle filter",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation Date time",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "filters": {
                                    "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                    "items": {
                                      "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                      "properties": {
                                        "conditions": {
                                          "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                          "items": {
                                            "description": "Condition describes the condition that must be validated by the",
                                            "properties": {
                                              "operator": {
                                                "description": "comparator is the type of comparison to make on the value.",
                                                "enum": [
                                                  [
                                                    "OPERATOR_UNSPECIFIED",
                                                    "OPERATOR_EQUALS",
                                                    "OPERATOR_GREATER_THAN",
                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                    "OPERATOR_LESS_THAN",
                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                  ]
                                                ],
                                                "type": "string"
                                              },
                                              "value": {
                                                "description": "value is used by the comparator.",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "key": {
                                          "description": "key is the oracle data property key targeted by the filter.",
                                          "properties": {
                                            "name": {
                                              "description": "name is the name of the property.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "description": "type is the type of the property.",
                                              "enum": [
                                                [
                                                  "TYPE_UNSPECIFIED",
                                                  "TYPE_EMPTY",
                                                  "TYPE_INTEGER",
                                                  "TYPE_STRING",
                                                  "TYPE_BOOLEAN",
                                                  "TYPE_DECIMAL",
                                                  "TYPE_TIMESTAMP"
                                                ]
                                              ],
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "id": {
                                    "description": "id is a hash generated from the OracleSpec data.",
                                    "type": "string"
                                  },
                                  "pub_keys": {
                                    "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "status": {
                                    "description": "status describes the status of the oracle spec",
                                    "enum": [
                                      [
                                        "STATUS_UNSPECIFIED",
                                        "STATUS_ACTIVE",
                                        "STATUS_DEACTIVATED"
                                      ]
                                    ],
                                    "type": "string"
                                  },
                                  "updated_at": {
                                    "description": "Last Updated timestamp",
                                    "format": "int64",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "oracle_spec_for_trading_termination": {
                                "description": "the oracle spec describing the trading termination oracle filter",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation Date time",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "filters": {
                                    "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                    "items": {
                                      "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                      "properties": {
                                        "conditions": {
                                          "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                          "items": {
                                            "description": "Condition describes the condition that must be validated by the",
                                            "properties": {
                                              "operator": {
                                                "description": "comparator is the type of comparison to make on the value.",
                                                "enum": [
                                                  [
                                                    "OPERATOR_UNSPECIFIED",
                                                    "OPERATOR_EQUALS",
                                                    "OPERATOR_GREATER_THAN",
                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                    "OPERATOR_LESS_THAN",
                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                  ]
                                                ],
                                                "type": "string"
                                              },
                                              "value": {
                                                "description": "value is used by the comparator.",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "key": {
                                          "description": "key is the oracle data property key targeted by the filter.",
                                          "properties": {
                                            "name": {
                                              "description": "name is the name of the property.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "description": "type is the type of the property.",
                                              "enum": [
                                                [
                                                  "TYPE_UNSPECIFIED",
                                                  "TYPE_EMPTY",
                                                  "TYPE_INTEGER",
                                                  "TYPE_STRING",
                                                  "TYPE_BOOLEAN",
                                                  "TYPE_DECIMAL",
                                                  "TYPE_TIMESTAMP"
                                                ]
                                              ],
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "id": {
                                    "description": "id is a hash generated from the OracleSpec data.",
                                    "type": "string"
                                  },
                                  "pub_keys": {
                                    "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "status": {
                                    "description": "status describes the status of the oracle spec",
                                    "enum": [
                                      [
                                        "STATUS_UNSPECIFIED",
                                        "STATUS_ACTIVE",
                                        "STATUS_DEACTIVATED"
                                      ]
                                    ],
                                    "type": "string"
                                  },
                                  "updated_at": {
                                    "description": "Last Updated timestamp",
                                    "format": "int64",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "quote_name": {
                                "description": "Quote name of the instrument",
                                "type": "string"
                              },
                              "settlement_asset": {
                                "description": "The asset for the future",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "margin_calculator": {
                    "description": "Margin calculator for the instrument",
                    "properties": {
                      "scaling_factors": {
                        "description": "Scaling factors for margin calculation",
                        "properties": {
                          "collateral_release": {
                            "description": "Collateral release level",
                            "type": "number"
                          },
                          "initial_margin": {
                            "description": "Initial margin level",
                            "type": "number"
                          },
                          "search_level": {
                            "description": "Search level",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "risk_model": {
                    "oneOf": [
                      {
                        "description": "Log normal",
                        "properties": {
                          "params": {
                            "description": "Risk model parameters for log normal",
                            "properties": {
                              "mu": {
                                "description": "Mu param",
                                "type": "number"
                              },
                              "r": {
                                "description": "R param",
                                "type": "number"
                              },
                              "sigma": {
                                "description": "Sigma param",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "risk_aversion_parameter": {
                            "description": "Risk Aversion Parameter",
                            "type": "number"
                          },
                          "tau": {
                            "description": "Tau",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "description": "Simple",
                        "properties": {
                          "params": {
                            "description": "Risk model params for simple modelling",
                            "properties": {
                              "factor_long": {
                                "description": "Pre-defined risk factor value for long",
                                "type": "number"
                              },
                              "factor_short": {
                                "description": "Pre-defined risk factor value for short",
                                "type": "number"
                              },
                              "max_move_up": {
                                "description": "Pre-defined maximum price move up that the model considers as valid",
                                "type": "number"
                              },
                              "min_move_down": {
                                "description": "Pre-defined minimum price move down that the model considers as valid",
                                "type": "number"
                              },
                              "probability_of_trading": {
                                "description": "Pre-defined constant probability of trading",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "trading_mode": {
                "description": "Current mode of execution of the market",
                "enum": [
                  [
                    "TRADING_MODE_UNSPECIFIED",
                    "TRADING_MODE_CONTINUOUS",
                    "TRADING_MODE_BATCH_AUCTION",
                    "TRADING_MODE_OPENING_AUCTION",
                    "TRADING_MODE_MONITORING_AUCTION"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketDataByIDRequest": {
        "description": "Request for market data for a market",
        "properties": {
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketDataByIDResponse": {
        "description": "Response for market data for a market",
        "properties": {
          "market_data": {
            "description": "Market data, if found",
            "properties": {
              "auction_end": {
                "description": "Time in seconds until the end of the auction (0 if currently not in auction period)",
                "format": "int64",
                "type": "integer"
              },
              "auction_start": {
                "description": "Time until next auction (used in FBA's) - currently always 0",
                "format": "int64",
                "type": "integer"
              },
              "best_bid_price": {
                "description": "Highest price level on an order book for buy orders, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "best_bid_volume": {
                "description": "Aggregated volume being bid at the best bid price",
                "format": "int64",
                "type": "integer"
              },
              "best_offer_price": {
                "description": "Lowest price level on an order book for offer orders",
                "type": "string"
              },
              "best_offer_volume": {
                "description": "Aggregated volume being offered at the best offer price, as an integer, for example `123456` is a correctly // formatted price of `1.23456` assuming market configured to 5 decimal places",
                "format": "int64",
                "type": "integer"
              },
              "best_static_bid_price": {
                "description": "Highest price on the order book for buy orders not including pegged orders",
                "type": "string"
              },
              "best_static_bid_volume": {
                "description": "Total volume at the best static bid price excluding pegged orders",
                "format": "int64",
                "type": "integer"
              },
              "best_static_offer_price": {
                "description": "Lowest price on the order book for sell orders not including pegged orders",
                "type": "string"
              },
              "best_static_offer_volume": {
                "description": "Total volume at the best static offer price excluding pegged orders",
                "format": "int64",
                "type": "integer"
              },
              "extension_trigger": {
                "description": "When a market auction is extended, this field indicates what caused the extension",
                "enum": [
                  [
                    "AUCTION_TRIGGER_UNSPECIFIED",
                    "AUCTION_TRIGGER_BATCH",
                    "AUCTION_TRIGGER_OPENING",
                    "AUCTION_TRIGGER_PRICE",
                    "AUCTION_TRIGGER_LIQUIDITY"
                  ]
                ],
                "type": "string"
              },
              "indicative_price": {
                "description": "Indicative price (zero if not in auction)",
                "type": "string"
              },
              "indicative_volume": {
                "description": "Indicative volume (zero if not in auction)",
                "format": "int64",
                "type": "integer"
              },
              "liquidity_provider_fee_share": {
                "description": "the equity like share of liquidity fee for each liquidity provider",
                "items": {
                  "description": "The equity like share of liquidity fee for each liquidity provider",
                  "properties": {
                    "average_entry_valuation": {
                      "description": "The average entry valuation of the liquidity provider for the market",
                      "type": "string"
                    },
                    "equity_like_share": {
                      "description": "The share own by this liquidity provider (float)",
                      "type": "string"
                    },
                    "party": {
                      "description": "The liquidity provider party id",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "mark_price": {
                "description": "Mark price, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "market": {
                "description": "Market identifier for the data",
                "type": "string"
              },
              "market_trading_mode": {
                "description": "The current trading mode for the market",
                "enum": [
                  [
                    "TRADING_MODE_UNSPECIFIED",
                    "TRADING_MODE_CONTINUOUS",
                    "TRADING_MODE_BATCH_AUCTION",
                    "TRADING_MODE_OPENING_AUCTION",
                    "TRADING_MODE_MONITORING_AUCTION"
                  ]
                ],
                "type": "string"
              },
              "market_value_proxy": {
                "description": "the market value proxy",
                "type": "string"
              },
              "mid_price": {
                "description": "Arithmetic average of the best bid price and best offer price, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "open_interest": {
                "description": "The sum of the size of all positions greater than 0 on the market",
                "format": "int64",
                "type": "integer"
              },
              "price_monitoring_bounds": {
                "description": "One or more price monitoring bounds for the current timestamp",
                "items": {
                  "description": "Represents a list of valid (at the current timestamp) price ranges per associated trigger",
                  "properties": {
                    "max_valid_price": {
                      "description": "Maximum price that isn't currently breaching the specified price monitoring trigger",
                      "type": "string"
                    },
                    "min_valid_price": {
                      "description": "Minimum price that isn't currently breaching the specified price monitoring trigger",
                      "type": "string"
                    },
                    "reference_price": {
                      "description": "Reference price used to calculate the valid price range",
                      "type": "number"
                    },
                    "trigger": {
                      "description": "Price monitoring trigger associated with the bounds",
                      "properties": {
                        "auction_extension": {
                          "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                          "format": "int64",
                          "type": "integer"
                        },
                        "horizon": {
                          "description": "Price monitoring projection horizon τ in seconds",
                          "format": "int64",
                          "type": "integer"
                        },
                        "probability": {
                          "description": "Price monitoring probability level p",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "static_mid_price": {
                "description": "Arithmetic average of the best static bid price and best static offer price",
                "type": "string"
              },
              "supplied_stake": {
                "description": "Available stake for the given market",
                "type": "string"
              },
              "target_stake": {
                "description": "Targeted stake for the given market",
                "type": "string"
              },
              "timestamp": {
                "description": "Timestamp at which this mark price was relevant, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "trigger": {
                "description": "When a market is in an auction trading mode, this field indicates what triggered the auction",
                "enum": [
                  [
                    "AUCTION_TRIGGER_UNSPECIFIED",
                    "AUCTION_TRIGGER_BATCH",
                    "AUCTION_TRIGGER_OPENING",
                    "AUCTION_TRIGGER_PRICE",
                    "AUCTION_TRIGGER_LIQUIDITY"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketDepthRequest": {
        "description": "Request for the market depth/order book price levels on a market Optionally, a maximum depth can be set to limit the number of levels returned",
        "properties": {
          "market_id": {
            "description": "Market identifier, required field",
            "type": "string"
          },
          "max_depth": {
            "description": "Max depth limits the number of levels returned. Default is 0, which returns all levels",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketDepthResponse": {
        "description": "Response for the market depth/order book price levels on a market",
        "properties": {
          "buy": {
            "description": "Zero or more price levels for the buy side of the market depth data",
            "items": {
              "description": "Represents a price level from market depth or order book data",
              "properties": {
                "number_of_orders": {
                  "description": "Number of orders at the price level",
                  "format": "int64",
                  "type": "integer"
                },
                "price": {
                  "description": "Price for the price level, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "volume": {
                  "description": "Volume at the price level",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "last_trade": {
            "description": "Last trade recorded on Vega at the time of retrieving the `MarketDepthResponse`",
            "properties": {
              "aggressor": {
                "description": "Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                "enum": [
                  [
                    "SIDE_UNSPECIFIED",
                    "SIDE_BUY",
                    "SIDE_SELL"
                  ]
                ],
                "type": "string"
              },
              "buy_order": {
                "description": "Identifier of the order from the buy side",
                "type": "string"
              },
              "buyer": {
                "description": "Unique party identifier for the buyer",
                "type": "string"
              },
              "buyer_auction_batch": {
                "description": "Auction batch number that the buy side order was placed in",
                "format": "int64",
                "type": "integer"
              },
              "buyer_fee": {
                "description": "Fee amount charged to the buyer party for the trade",
                "properties": {
                  "infrastructure_fee": {
                    "description": "Fee amount paid for maintaining the Vega infrastructure",
                    "type": "string"
                  },
                  "liquidity_fee": {
                    "description": "Fee amount paid to market makers",
                    "type": "string"
                  },
                  "maker_fee": {
                    "description": "Fee amount paid to the non-aggressive party of the trade",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "Unique identifier for the trade (generated by Vega)",
                "type": "string"
              },
              "market_id": {
                "description": "Market identifier (the market that the trade occurred on)",
                "type": "string"
              },
              "price": {
                "description": "Price for the trade, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "sell_order": {
                "description": "Identifier of the order from the sell side",
                "type": "string"
              },
              "seller": {
                "description": "Unique party identifier for the seller",
                "type": "string"
              },
              "seller_auction_batch": {
                "description": "Auction batch number that the sell side order was placed in",
                "format": "int64",
                "type": "integer"
              },
              "seller_fee": {
                "description": "Fee amount charged to the seller party for the trade",
                "properties": {
                  "infrastructure_fee": {
                    "description": "Fee amount paid for maintaining the Vega infrastructure",
                    "type": "string"
                  },
                  "liquidity_fee": {
                    "description": "Fee amount paid to market makers",
                    "type": "string"
                  },
                  "maker_fee": {
                    "description": "Fee amount paid to the non-aggressive party of the trade",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "size": {
                "description": "Size filled for the trade",
                "format": "int64",
                "type": "integer"
              },
              "timestamp": {
                "description": "Timestamp for when the trade occurred, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "type": {
                "description": "Type for the trade - See [`Trade.Type`](#vega.Trade.Type)",
                "enum": [
                  [
                    "TYPE_UNSPECIFIED",
                    "TYPE_DEFAULT",
                    "TYPE_NETWORK_CLOSE_OUT_GOOD",
                    "TYPE_NETWORK_CLOSE_OUT_BAD"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          },
          "sell": {
            "description": "Zero or more price levels for the sell side of the market depth data",
            "items": {
              "description": "Represents a price level from market depth or order book data",
              "properties": {
                "number_of_orders": {
                  "description": "Number of orders at the price level",
                  "format": "int64",
                  "type": "integer"
                },
                "price": {
                  "description": "Price for the price level, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "volume": {
                  "description": "Volume at the price level",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "sequence_number": {
            "description": "Sequence number incremented after each update",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketDepthSubscribeRequest": {
        "description": "Request to subscribe to a stream of (MarketDepth)[#vega.MarketDepth] data",
        "properties": {
          "market_id": {
            "description": "Market identifier, required field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketDepthSubscribeResponse": {
        "properties": {
          "market_depth": {
            "properties": {
              "buy": {
                "description": "Collection of price levels for the buy side of the book",
                "items": {
                  "description": "Represents a price level from market depth or order book data",
                  "properties": {
                    "number_of_orders": {
                      "description": "Number of orders at the price level",
                      "format": "int64",
                      "type": "integer"
                    },
                    "price": {
                      "description": "Price for the price level, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                      "type": "string"
                    },
                    "volume": {
                      "description": "Volume at the price level",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "market_id": {
                "description": "Market identifier",
                "type": "string"
              },
              "sell": {
                "description": "Collection of price levels for the sell side of the book",
                "items": {
                  "description": "Represents a price level from market depth or order book data",
                  "properties": {
                    "number_of_orders": {
                      "description": "Number of orders at the price level",
                      "format": "int64",
                      "type": "integer"
                    },
                    "price": {
                      "description": "Price for the price level, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                      "type": "string"
                    },
                    "volume": {
                      "description": "Volume at the price level",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "sequence_number": {
                "description": "Sequence number for the market depth data returned",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketDepthUpdatesSubscribeRequest": {
        "description": "Request to subscribe to a stream of (MarketDepth Update)[#vega.MarketDepthUpdate] data",
        "properties": {
          "market_id": {
            "description": "Market identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketDepthUpdatesSubscribeResponse": {
        "properties": {
          "update": {
            "properties": {
              "buy": {
                "description": "Collection of updated price levels for the buy side of the book",
                "items": {
                  "description": "Represents a price level from market depth or order book data",
                  "properties": {
                    "number_of_orders": {
                      "description": "Number of orders at the price level",
                      "format": "int64",
                      "type": "integer"
                    },
                    "price": {
                      "description": "Price for the price level, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                      "type": "string"
                    },
                    "volume": {
                      "description": "Volume at the price level",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "market_id": {
                "description": "Market identifier",
                "type": "string"
              },
              "sell": {
                "description": "Collection of updated price levels for the sell side of the book",
                "items": {
                  "description": "Represents a price level from market depth or order book data",
                  "properties": {
                    "number_of_orders": {
                      "description": "Number of orders at the price level",
                      "format": "int64",
                      "type": "integer"
                    },
                    "price": {
                      "description": "Price for the price level, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                      "type": "string"
                    },
                    "volume": {
                      "description": "Volume at the price level",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "sequence_number": {
                "description": "Sequence number for the market depth update data returned",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketsDataRequest": {
        "description": "Request for market data",
        "type": "object"
      },
      "datanode.api.v1.MarketsDataResponse": {
        "description": "Response for market data",
        "properties": {
          "markets_data": {
            "description": "A list of 0 or more market data",
            "items": {
              "description": "Represents data generated by a market when open",
              "properties": {
                "auction_end": {
                  "description": "Time in seconds until the end of the auction (0 if currently not in auction period)",
                  "format": "int64",
                  "type": "integer"
                },
                "auction_start": {
                  "description": "Time until next auction (used in FBA's) - currently always 0",
                  "format": "int64",
                  "type": "integer"
                },
                "best_bid_price": {
                  "description": "Highest price level on an order book for buy orders, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "best_bid_volume": {
                  "description": "Aggregated volume being bid at the best bid price",
                  "format": "int64",
                  "type": "integer"
                },
                "best_offer_price": {
                  "description": "Lowest price level on an order book for offer orders",
                  "type": "string"
                },
                "best_offer_volume": {
                  "description": "Aggregated volume being offered at the best offer price, as an integer, for example `123456` is a correctly // formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "format": "int64",
                  "type": "integer"
                },
                "best_static_bid_price": {
                  "description": "Highest price on the order book for buy orders not including pegged orders",
                  "type": "string"
                },
                "best_static_bid_volume": {
                  "description": "Total volume at the best static bid price excluding pegged orders",
                  "format": "int64",
                  "type": "integer"
                },
                "best_static_offer_price": {
                  "description": "Lowest price on the order book for sell orders not including pegged orders",
                  "type": "string"
                },
                "best_static_offer_volume": {
                  "description": "Total volume at the best static offer price excluding pegged orders",
                  "format": "int64",
                  "type": "integer"
                },
                "extension_trigger": {
                  "description": "When a market auction is extended, this field indicates what caused the extension",
                  "enum": [
                    [
                      "AUCTION_TRIGGER_UNSPECIFIED",
                      "AUCTION_TRIGGER_BATCH",
                      "AUCTION_TRIGGER_OPENING",
                      "AUCTION_TRIGGER_PRICE",
                      "AUCTION_TRIGGER_LIQUIDITY"
                    ]
                  ],
                  "type": "string"
                },
                "indicative_price": {
                  "description": "Indicative price (zero if not in auction)",
                  "type": "string"
                },
                "indicative_volume": {
                  "description": "Indicative volume (zero if not in auction)",
                  "format": "int64",
                  "type": "integer"
                },
                "liquidity_provider_fee_share": {
                  "description": "the equity like share of liquidity fee for each liquidity provider",
                  "items": {
                    "description": "The equity like share of liquidity fee for each liquidity provider",
                    "properties": {
                      "average_entry_valuation": {
                        "description": "The average entry valuation of the liquidity provider for the market",
                        "type": "string"
                      },
                      "equity_like_share": {
                        "description": "The share own by this liquidity provider (float)",
                        "type": "string"
                      },
                      "party": {
                        "description": "The liquidity provider party id",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "mark_price": {
                  "description": "Mark price, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "market": {
                  "description": "Market identifier for the data",
                  "type": "string"
                },
                "market_trading_mode": {
                  "description": "The current trading mode for the market",
                  "enum": [
                    [
                      "TRADING_MODE_UNSPECIFIED",
                      "TRADING_MODE_CONTINUOUS",
                      "TRADING_MODE_BATCH_AUCTION",
                      "TRADING_MODE_OPENING_AUCTION",
                      "TRADING_MODE_MONITORING_AUCTION"
                    ]
                  ],
                  "type": "string"
                },
                "market_value_proxy": {
                  "description": "the market value proxy",
                  "type": "string"
                },
                "mid_price": {
                  "description": "Arithmetic average of the best bid price and best offer price, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "open_interest": {
                  "description": "The sum of the size of all positions greater than 0 on the market",
                  "format": "int64",
                  "type": "integer"
                },
                "price_monitoring_bounds": {
                  "description": "One or more price monitoring bounds for the current timestamp",
                  "items": {
                    "description": "Represents a list of valid (at the current timestamp) price ranges per associated trigger",
                    "properties": {
                      "max_valid_price": {
                        "description": "Maximum price that isn't currently breaching the specified price monitoring trigger",
                        "type": "string"
                      },
                      "min_valid_price": {
                        "description": "Minimum price that isn't currently breaching the specified price monitoring trigger",
                        "type": "string"
                      },
                      "reference_price": {
                        "description": "Reference price used to calculate the valid price range",
                        "type": "number"
                      },
                      "trigger": {
                        "description": "Price monitoring trigger associated with the bounds",
                        "properties": {
                          "auction_extension": {
                            "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                            "format": "int64",
                            "type": "integer"
                          },
                          "horizon": {
                            "description": "Price monitoring projection horizon τ in seconds",
                            "format": "int64",
                            "type": "integer"
                          },
                          "probability": {
                            "description": "Price monitoring probability level p",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "static_mid_price": {
                  "description": "Arithmetic average of the best static bid price and best static offer price",
                  "type": "string"
                },
                "supplied_stake": {
                  "description": "Available stake for the given market",
                  "type": "string"
                },
                "target_stake": {
                  "description": "Targeted stake for the given market",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Timestamp at which this mark price was relevant, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "trigger": {
                  "description": "When a market is in an auction trading mode, this field indicates what triggered the auction",
                  "enum": [
                    [
                      "AUCTION_TRIGGER_UNSPECIFIED",
                      "AUCTION_TRIGGER_BATCH",
                      "AUCTION_TRIGGER_OPENING",
                      "AUCTION_TRIGGER_PRICE",
                      "AUCTION_TRIGGER_LIQUIDITY"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketsDataSubscribeRequest": {
        "description": "Request to subscribe to a stream of MarketsData Optionally, the list can be additionally filtered by market",
        "properties": {
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketsDataSubscribeResponse": {
        "properties": {
          "market_data": {
            "properties": {
              "auction_end": {
                "description": "Time in seconds until the end of the auction (0 if currently not in auction period)",
                "format": "int64",
                "type": "integer"
              },
              "auction_start": {
                "description": "Time until next auction (used in FBA's) - currently always 0",
                "format": "int64",
                "type": "integer"
              },
              "best_bid_price": {
                "description": "Highest price level on an order book for buy orders, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "best_bid_volume": {
                "description": "Aggregated volume being bid at the best bid price",
                "format": "int64",
                "type": "integer"
              },
              "best_offer_price": {
                "description": "Lowest price level on an order book for offer orders",
                "type": "string"
              },
              "best_offer_volume": {
                "description": "Aggregated volume being offered at the best offer price, as an integer, for example `123456` is a correctly // formatted price of `1.23456` assuming market configured to 5 decimal places",
                "format": "int64",
                "type": "integer"
              },
              "best_static_bid_price": {
                "description": "Highest price on the order book for buy orders not including pegged orders",
                "type": "string"
              },
              "best_static_bid_volume": {
                "description": "Total volume at the best static bid price excluding pegged orders",
                "format": "int64",
                "type": "integer"
              },
              "best_static_offer_price": {
                "description": "Lowest price on the order book for sell orders not including pegged orders",
                "type": "string"
              },
              "best_static_offer_volume": {
                "description": "Total volume at the best static offer price excluding pegged orders",
                "format": "int64",
                "type": "integer"
              },
              "extension_trigger": {
                "description": "When a market auction is extended, this field indicates what caused the extension",
                "enum": [
                  [
                    "AUCTION_TRIGGER_UNSPECIFIED",
                    "AUCTION_TRIGGER_BATCH",
                    "AUCTION_TRIGGER_OPENING",
                    "AUCTION_TRIGGER_PRICE",
                    "AUCTION_TRIGGER_LIQUIDITY"
                  ]
                ],
                "type": "string"
              },
              "indicative_price": {
                "description": "Indicative price (zero if not in auction)",
                "type": "string"
              },
              "indicative_volume": {
                "description": "Indicative volume (zero if not in auction)",
                "format": "int64",
                "type": "integer"
              },
              "liquidity_provider_fee_share": {
                "description": "the equity like share of liquidity fee for each liquidity provider",
                "items": {
                  "description": "The equity like share of liquidity fee for each liquidity provider",
                  "properties": {
                    "average_entry_valuation": {
                      "description": "The average entry valuation of the liquidity provider for the market",
                      "type": "string"
                    },
                    "equity_like_share": {
                      "description": "The share own by this liquidity provider (float)",
                      "type": "string"
                    },
                    "party": {
                      "description": "The liquidity provider party id",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "mark_price": {
                "description": "Mark price, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "market": {
                "description": "Market identifier for the data",
                "type": "string"
              },
              "market_trading_mode": {
                "description": "The current trading mode for the market",
                "enum": [
                  [
                    "TRADING_MODE_UNSPECIFIED",
                    "TRADING_MODE_CONTINUOUS",
                    "TRADING_MODE_BATCH_AUCTION",
                    "TRADING_MODE_OPENING_AUCTION",
                    "TRADING_MODE_MONITORING_AUCTION"
                  ]
                ],
                "type": "string"
              },
              "market_value_proxy": {
                "description": "the market value proxy",
                "type": "string"
              },
              "mid_price": {
                "description": "Arithmetic average of the best bid price and best offer price, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "open_interest": {
                "description": "The sum of the size of all positions greater than 0 on the market",
                "format": "int64",
                "type": "integer"
              },
              "price_monitoring_bounds": {
                "description": "One or more price monitoring bounds for the current timestamp",
                "items": {
                  "description": "Represents a list of valid (at the current timestamp) price ranges per associated trigger",
                  "properties": {
                    "max_valid_price": {
                      "description": "Maximum price that isn't currently breaching the specified price monitoring trigger",
                      "type": "string"
                    },
                    "min_valid_price": {
                      "description": "Minimum price that isn't currently breaching the specified price monitoring trigger",
                      "type": "string"
                    },
                    "reference_price": {
                      "description": "Reference price used to calculate the valid price range",
                      "type": "number"
                    },
                    "trigger": {
                      "description": "Price monitoring trigger associated with the bounds",
                      "properties": {
                        "auction_extension": {
                          "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                          "format": "int64",
                          "type": "integer"
                        },
                        "horizon": {
                          "description": "Price monitoring projection horizon τ in seconds",
                          "format": "int64",
                          "type": "integer"
                        },
                        "probability": {
                          "description": "Price monitoring probability level p",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "static_mid_price": {
                "description": "Arithmetic average of the best static bid price and best static offer price",
                "type": "string"
              },
              "supplied_stake": {
                "description": "Available stake for the given market",
                "type": "string"
              },
              "target_stake": {
                "description": "Targeted stake for the given market",
                "type": "string"
              },
              "timestamp": {
                "description": "Timestamp at which this mark price was relevant, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "trigger": {
                "description": "When a market is in an auction trading mode, this field indicates what triggered the auction",
                "enum": [
                  [
                    "AUCTION_TRIGGER_UNSPECIFIED",
                    "AUCTION_TRIGGER_BATCH",
                    "AUCTION_TRIGGER_OPENING",
                    "AUCTION_TRIGGER_PRICE",
                    "AUCTION_TRIGGER_LIQUIDITY"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.MarketsRequest": {
        "description": "Request for a list of markets on Vega",
        "type": "object"
      },
      "datanode.api.v1.MarketsResponse": {
        "description": "Response for a list of markets on Vega",
        "properties": {
          "markets": {
            "description": "A list of 0 or more markets",
            "items": {
              "description": "Market definition",
              "properties": {
                "decimal_places": {
                  "description": "Number of decimal places that a price must be shifted by in order to get a correct price denominated in the currency of the market, for example: `realPrice = price / 10^decimalPlaces`",
                  "format": "int64",
                  "type": "integer"
                },
                "fees": {
                  "description": "Fees configuration",
                  "properties": {
                    "factors": {
                      "description": "Fee factors",
                      "properties": {
                        "infrastructure_fee": {
                          "description": "Infrastructure fee",
                          "type": "string"
                        },
                        "liquidity_fee": {
                          "description": "Liquidity fee",
                          "type": "string"
                        },
                        "maker_fee": {
                          "description": "Maker fee",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique identifier",
                  "type": "string"
                },
                "liquidity_monitoring_parameters": {
                  "description": "LiquidityMonitoringParameters for the market",
                  "properties": {
                    "auction_extension": {
                      "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                      "format": "int64",
                      "type": "integer"
                    },
                    "target_stake_parameters": {
                      "description": "Specifies parameters related to target stake calculation",
                      "properties": {
                        "scaling_factor": {
                          "description": "Specifies scaling factors used in target stake calculation",
                          "type": "number"
                        },
                        "time_window": {
                          "description": "Specifies length of time window expressed in seconds for target stake calculation",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "triggering_ratio": {
                      "description": "Specifies the triggering ratio for entering liquidity auction",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "market_timestamps": {
                  "description": "Timestamps for when the market stay changes",
                  "properties": {
                    "close": {
                      "description": "Time when the market is closed",
                      "format": "int64",
                      "type": "integer"
                    },
                    "open": {
                      "description": "Time when the market has left the opening auction and is ready to accept trades",
                      "format": "int64",
                      "type": "integer"
                    },
                    "pending": {
                      "description": "Time when the market has been voted in and is created into an opening auction",
                      "format": "int64",
                      "type": "integer"
                    },
                    "proposed": {
                      "description": "Time when the market is first proposed",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "opening_auction": {
                  "description": "Auction duration specifies how long the opening auction will run (minimum duration and optionally a minimum traded volume)",
                  "properties": {
                    "duration": {
                      "description": "Duration of the auction in seconds",
                      "format": "int64",
                      "type": "integer"
                    },
                    "volume": {
                      "description": "Target uncrossing trading volume",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "price_monitoring_settings": {
                  "description": "PriceMonitoringSettings for the market",
                  "properties": {
                    "parameters": {
                      "description": "Specifies price monitoring parameters to be used for price monitoring purposes",
                      "properties": {
                        "triggers": {
                          "items": {
                            "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                            "properties": {
                              "auction_extension": {
                                "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                "format": "int64",
                                "type": "integer"
                              },
                              "horizon": {
                                "description": "Price monitoring projection horizon τ in seconds",
                                "format": "int64",
                                "type": "integer"
                              },
                              "probability": {
                                "description": "Price monitoring probability level p",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "update_frequency": {
                      "description": "Specifies how often (expressed in seconds) the price monitoring bounds should be updated",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "state": {
                  "description": "Current state of the market",
                  "enum": [
                    [
                      "STATE_UNSPECIFIED",
                      "STATE_PROPOSED",
                      "STATE_REJECTED",
                      "STATE_PENDING",
                      "STATE_CANCELLED",
                      "STATE_ACTIVE",
                      "STATE_SUSPENDED",
                      "STATE_CLOSED",
                      "STATE_TRADING_TERMINATED",
                      "STATE_SETTLED"
                    ]
                  ],
                  "type": "string"
                },
                "tradable_instrument": {
                  "description": "Tradable instrument configuration",
                  "properties": {
                    "instrument": {
                      "description": "Instrument details",
                      "properties": {
                        "code": {
                          "description": "Code for the instrument",
                          "type": "string"
                        },
                        "id": {
                          "description": "Instrument identifier",
                          "type": "string"
                        },
                        "metadata": {
                          "description": "A collection of instrument meta-data",
                          "properties": {
                            "tags": {
                              "description": "A list of 0 or more tags",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "name": {
                          "description": "Name of the instrument",
                          "type": "string"
                        },
                        "product": {
                          "oneOf": [
                            {
                              "description": "Future",
                              "properties": {
                                "oracle_spec_binding": {
                                  "description": "The binding between the oracle spec and the oracle data",
                                  "properties": {
                                    "settlement_price_property": {
                                      "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                      "type": "string"
                                    },
                                    "trading_termination_property": {
                                      "description": "the name of the property in the oracle data that signals termination of trading",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "oracle_spec_for_settlement_price": {
                                  "description": "The oracle spec describing the settlement price oracle filter",
                                  "properties": {
                                    "created_at": {
                                      "description": "Creation Date time",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "filters": {
                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                      "items": {
                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                        "properties": {
                                          "conditions": {
                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                            "items": {
                                              "description": "Condition describes the condition that must be validated by the",
                                              "properties": {
                                                "operator": {
                                                  "description": "comparator is the type of comparison to make on the value.",
                                                  "enum": [
                                                    [
                                                      "OPERATOR_UNSPECIFIED",
                                                      "OPERATOR_EQUALS",
                                                      "OPERATOR_GREATER_THAN",
                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                      "OPERATOR_LESS_THAN",
                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                    ]
                                                  ],
                                                  "type": "string"
                                                },
                                                "value": {
                                                  "description": "value is used by the comparator.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "key": {
                                            "description": "key is the oracle data property key targeted by the filter.",
                                            "properties": {
                                              "name": {
                                                "description": "name is the name of the property.",
                                                "type": "string"
                                              },
                                              "type": {
                                                "description": "type is the type of the property.",
                                                "enum": [
                                                  [
                                                    "TYPE_UNSPECIFIED",
                                                    "TYPE_EMPTY",
                                                    "TYPE_INTEGER",
                                                    "TYPE_STRING",
                                                    "TYPE_BOOLEAN",
                                                    "TYPE_DECIMAL",
                                                    "TYPE_TIMESTAMP"
                                                  ]
                                                ],
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "id": {
                                      "description": "id is a hash generated from the OracleSpec data.",
                                      "type": "string"
                                    },
                                    "pub_keys": {
                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "status": {
                                      "description": "status describes the status of the oracle spec",
                                      "enum": [
                                        [
                                          "STATUS_UNSPECIFIED",
                                          "STATUS_ACTIVE",
                                          "STATUS_DEACTIVATED"
                                        ]
                                      ],
                                      "type": "string"
                                    },
                                    "updated_at": {
                                      "description": "Last Updated timestamp",
                                      "format": "int64",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "oracle_spec_for_trading_termination": {
                                  "description": "the oracle spec describing the trading termination oracle filter",
                                  "properties": {
                                    "created_at": {
                                      "description": "Creation Date time",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "filters": {
                                      "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                      "items": {
                                        "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                        "properties": {
                                          "conditions": {
                                            "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                            "items": {
                                              "description": "Condition describes the condition that must be validated by the",
                                              "properties": {
                                                "operator": {
                                                  "description": "comparator is the type of comparison to make on the value.",
                                                  "enum": [
                                                    [
                                                      "OPERATOR_UNSPECIFIED",
                                                      "OPERATOR_EQUALS",
                                                      "OPERATOR_GREATER_THAN",
                                                      "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                      "OPERATOR_LESS_THAN",
                                                      "OPERATOR_LESS_THAN_OR_EQUAL"
                                                    ]
                                                  ],
                                                  "type": "string"
                                                },
                                                "value": {
                                                  "description": "value is used by the comparator.",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "key": {
                                            "description": "key is the oracle data property key targeted by the filter.",
                                            "properties": {
                                              "name": {
                                                "description": "name is the name of the property.",
                                                "type": "string"
                                              },
                                              "type": {
                                                "description": "type is the type of the property.",
                                                "enum": [
                                                  [
                                                    "TYPE_UNSPECIFIED",
                                                    "TYPE_EMPTY",
                                                    "TYPE_INTEGER",
                                                    "TYPE_STRING",
                                                    "TYPE_BOOLEAN",
                                                    "TYPE_DECIMAL",
                                                    "TYPE_TIMESTAMP"
                                                  ]
                                                ],
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "id": {
                                      "description": "id is a hash generated from the OracleSpec data.",
                                      "type": "string"
                                    },
                                    "pub_keys": {
                                      "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "status": {
                                      "description": "status describes the status of the oracle spec",
                                      "enum": [
                                        [
                                          "STATUS_UNSPECIFIED",
                                          "STATUS_ACTIVE",
                                          "STATUS_DEACTIVATED"
                                        ]
                                      ],
                                      "type": "string"
                                    },
                                    "updated_at": {
                                      "description": "Last Updated timestamp",
                                      "format": "int64",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "quote_name": {
                                  "description": "Quote name of the instrument",
                                  "type": "string"
                                },
                                "settlement_asset": {
                                  "description": "The asset for the future",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "margin_calculator": {
                      "description": "Margin calculator for the instrument",
                      "properties": {
                        "scaling_factors": {
                          "description": "Scaling factors for margin calculation",
                          "properties": {
                            "collateral_release": {
                              "description": "Collateral release level",
                              "type": "number"
                            },
                            "initial_margin": {
                              "description": "Initial margin level",
                              "type": "number"
                            },
                            "search_level": {
                              "description": "Search level",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "risk_model": {
                      "oneOf": [
                        {
                          "description": "Log normal",
                          "properties": {
                            "params": {
                              "description": "Risk model parameters for log normal",
                              "properties": {
                                "mu": {
                                  "description": "Mu param",
                                  "type": "number"
                                },
                                "r": {
                                  "description": "R param",
                                  "type": "number"
                                },
                                "sigma": {
                                  "description": "Sigma param",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "risk_aversion_parameter": {
                              "description": "Risk Aversion Parameter",
                              "type": "number"
                            },
                            "tau": {
                              "description": "Tau",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "description": "Simple",
                          "properties": {
                            "params": {
                              "description": "Risk model params for simple modelling",
                              "properties": {
                                "factor_long": {
                                  "description": "Pre-defined risk factor value for long",
                                  "type": "number"
                                },
                                "factor_short": {
                                  "description": "Pre-defined risk factor value for short",
                                  "type": "number"
                                },
                                "max_move_up": {
                                  "description": "Pre-defined maximum price move up that the model considers as valid",
                                  "type": "number"
                                },
                                "min_move_down": {
                                  "description": "Pre-defined minimum price move down that the model considers as valid",
                                  "type": "number"
                                },
                                "probability_of_trading": {
                                  "description": "Pre-defined constant probability of trading",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "trading_mode": {
                  "description": "Current mode of execution of the market",
                  "enum": [
                    [
                      "TRADING_MODE_UNSPECIFIED",
                      "TRADING_MODE_CONTINUOUS",
                      "TRADING_MODE_BATCH_AUCTION",
                      "TRADING_MODE_OPENING_AUCTION",
                      "TRADING_MODE_MONITORING_AUCTION"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.NetworkParametersRequest": {
        "description": "A message requesting for the list of all network parameters",
        "type": "object"
      },
      "datanode.api.v1.NetworkParametersResponse": {
        "description": "A response containing all of the vega network parameters",
        "properties": {
          "network_parameters": {
            "items": {
              "description": "Represents a network parameter on Vega",
              "properties": {
                "key": {
                  "description": "The unique key",
                  "type": "string"
                },
                "value": {
                  "description": "The value for the network parameter",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.ObserveDelegationsRequest": {
        "description": "Request to obsever all event related to delegation with the given filters",
        "properties": {
          "node_id": {
            "type": "string"
          },
          "party": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.ObserveDelegationsResponse": {
        "description": "All events related to delegation with the given filters",
        "properties": {
          "delegation": {
            "properties": {
              "amount": {
                "description": "Amount delegated",
                "type": "string"
              },
              "epoch_seq": {
                "description": "Epoch of delegation",
                "type": "string"
              },
              "node_id": {
                "description": "Node ID",
                "type": "string"
              },
              "party": {
                "description": "Party which is delegating",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.ObserveEventBusRequest": {
        "description": "Request to subscribe to a stream of one or more event types from the Vega event bus",
        "properties": {
          "batch_size": {
            "description": "Batch size, optional field - If not specified, any events received will be sent immediately. If the client is not ready for the next data-set, data may be dropped a number of times, and eventually the stream is closed. if specified, the first batch will be sent when ready. To receive the next set of events, the client must write an `ObserveEventBatch` message on the stream to flush the buffer. If no message is received in 5 seconds, the stream is closed. Default: 0, send any and all events when they are available.",
            "format": "int64",
            "type": "integer"
          },
          "market_id": {
            "description": "Market identifier, optional field",
            "type": "string"
          },
          "party_id": {
            "description": "Party identifier, optional field",
            "type": "string"
          },
          "type": {
            "description": "One or more types of event, required field",
            "items": {
              "description": "An (event) bus event type is used to specify a type of event It has 2 styles of event: Single values (e.g. BUS_EVENT_TYPE_ORDER) where they represent one data item Group values (e.g. BUS_EVENT_TYPE_AUCTION) where they represent a group of data items",
              "enum": [
                [
                  "BUS_EVENT_TYPE_UNSPECIFIED",
                  "BUS_EVENT_TYPE_ALL",
                  "BUS_EVENT_TYPE_TIME_UPDATE",
                  "BUS_EVENT_TYPE_TRANSFER_RESPONSES",
                  "BUS_EVENT_TYPE_POSITION_RESOLUTION",
                  "BUS_EVENT_TYPE_ORDER",
                  "BUS_EVENT_TYPE_ACCOUNT",
                  "BUS_EVENT_TYPE_PARTY",
                  "BUS_EVENT_TYPE_TRADE",
                  "BUS_EVENT_TYPE_MARGIN_LEVELS",
                  "BUS_EVENT_TYPE_PROPOSAL",
                  "BUS_EVENT_TYPE_VOTE",
                  "BUS_EVENT_TYPE_MARKET_DATA",
                  "BUS_EVENT_TYPE_NODE_SIGNATURE",
                  "BUS_EVENT_TYPE_LOSS_SOCIALIZATION",
                  "BUS_EVENT_TYPE_SETTLE_POSITION",
                  "BUS_EVENT_TYPE_SETTLE_DISTRESSED",
                  "BUS_EVENT_TYPE_MARKET_CREATED",
                  "BUS_EVENT_TYPE_ASSET",
                  "BUS_EVENT_TYPE_MARKET_TICK",
                  "BUS_EVENT_TYPE_WITHDRAWAL",
                  "BUS_EVENT_TYPE_DEPOSIT",
                  "BUS_EVENT_TYPE_AUCTION",
                  "BUS_EVENT_TYPE_RISK_FACTOR",
                  "BUS_EVENT_TYPE_NETWORK_PARAMETER",
                  "BUS_EVENT_TYPE_LIQUIDITY_PROVISION",
                  "BUS_EVENT_TYPE_MARKET_UPDATED",
                  "BUS_EVENT_TYPE_ORACLE_SPEC",
                  "BUS_EVENT_TYPE_ORACLE_DATA",
                  "BUS_EVENT_TYPE_DELEGATION_BALANCE",
                  "BUS_EVENT_TYPE_VALIDATOR_SCORE",
                  "BUS_EVENT_TYPE_EPOCH_UPDATE",
                  "BUS_EVENT_TYPE_VALIDATOR_UPDATE",
                  "BUS_EVENT_TYPE_STAKE_LINKING",
                  "BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT",
                  "BUS_EVENT_TYPE_CHECKPOINT",
                  "BUS_EVENT_TYPE_STREAM_START",
                  "BUS_EVENT_TYPE_KEY_ROTATION",
                  "BUS_EVENT_TYPE_STATE_VAR",
                  "BUS_EVENT_TYPE_NETWORK_LIMITS",
                  "BUS_EVENT_TYPE_TRANSFER",
                  "BUS_EVENT_TYPE_VALIDATOR_RANKING",
                  "BUS_EVENT_TYPE_MARKET",
                  "BUS_EVENT_TYPE_TX_ERROR"
                ]
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.ObserveEventBusResponse": {
        "description": "Response to a subscribed stream of events from the Vega event bus",
        "properties": {
          "events": {
            "description": "One or more events",
            "items": {
              "description": "A bus event is a container for event bus events emitted by Vega",
              "properties": {
                "block": {
                  "description": "The batch (or block) of transactions that the events relate to",
                  "type": "string"
                },
                "chain_id": {
                  "type": "string"
                },
                "event": {
                  "oneOf": [
                    {
                      "description": "Time update events - See [TimeUpdate](#vega.TimeUpdate)",
                      "properties": {
                        "timestamp": {
                          "description": "Timestamp containing latest update from Vega blockchain aka Vega-time",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Transfer responses update events - See [TransferResponses](#vega.TransferResponses)",
                      "properties": {
                        "responses": {
                          "description": "One or more entries containing internal transfer information",
                          "items": {
                            "description": "Represents the response from a transfer",
                            "properties": {
                              "balances": {
                                "description": "One or more account balances",
                                "items": {
                                  "description": "Represents the balance for an account during a transfer",
                                  "properties": {
                                    "account": {
                                      "description": "The account relating to the transfer",
                                      "properties": {
                                        "asset": {
                                          "description": "Asset identifier for the account",
                                          "type": "string"
                                        },
                                        "balance": {
                                          "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places and importantly balances cannot be negative",
                                          "type": "string"
                                        },
                                        "id": {
                                          "description": "Unique account identifier (used internally by Vega)",
                                          "type": "string"
                                        },
                                        "market_id": {
                                          "description": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty",
                                          "type": "string"
                                        },
                                        "owner": {
                                          "description": "The party that the account belongs to, special values include `network`, which represents the Vega network and is most commonly seen during liquidation of distressed trading positions",
                                          "type": "string"
                                        },
                                        "type": {
                                          "description": "The account type related to this account",
                                          "enum": [
                                            [
                                              "ACCOUNT_TYPE_UNSPECIFIED",
                                              "ACCOUNT_TYPE_INSURANCE",
                                              "ACCOUNT_TYPE_SETTLEMENT",
                                              "ACCOUNT_TYPE_MARGIN",
                                              "ACCOUNT_TYPE_GENERAL",
                                              "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                                              "ACCOUNT_TYPE_FEES_LIQUIDITY",
                                              "ACCOUNT_TYPE_FEES_MAKER",
                                              "ACCOUNT_TYPE_LOCK_WITHDRAW",
                                              "ACCOUNT_TYPE_BOND",
                                              "ACCOUNT_TYPE_EXTERNAL",
                                              "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                                              "ACCOUNT_TYPE_GLOBAL_REWARD",
                                              "ACCOUNT_TYPE_PENDING_TRANSFERS",
                                              "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                                              "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                                              "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                                              "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                                            ]
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "balance": {
                                      "description": "The balance relating to the transfer",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "transfers": {
                                "description": "One or more ledger entries representing the transfers",
                                "items": {
                                  "description": "Represents a ledger entry on Vega",
                                  "properties": {
                                    "amount": {
                                      "description": "An amount to transfer",
                                      "type": "string"
                                    },
                                    "from_account": {
                                      "description": "One or more accounts to transfer from",
                                      "type": "string"
                                    },
                                    "reference": {
                                      "description": "A reference for auditing purposes",
                                      "type": "string"
                                    },
                                    "timestamp": {
                                      "description": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "to_account": {
                                      "description": "One or more accounts to transfer to",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "Type of ledger entry",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Position resolution events - See [PositionResolution](#vega.PositionResolution)",
                      "properties": {
                        "closed": {
                          "description": "Number of close outs",
                          "format": "int64",
                          "type": "integer"
                        },
                        "distressed": {
                          "description": "Number of distressed traders",
                          "format": "int64",
                          "type": "integer"
                        },
                        "mark_price": {
                          "description": "Mark price as a string representing a scaled price",
                          "type": "string"
                        },
                        "market_id": {
                          "description": "Market identifier for the event",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Order events",
                      "properties": {
                        "batch_id": {
                          "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "created_at": {
                          "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                          "format": "int64",
                          "type": "integer"
                        },
                        "expires_at": {
                          "description": "Timestamp for when the order will expire, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "Unique identifier for the order (set by the system after consensus)",
                          "type": "string"
                        },
                        "liquidity_provision_id": {
                          "description": "Is this order created as part of a liquidity provision, will be empty if not.",
                          "type": "string"
                        },
                        "market_id": {
                          "description": "Market identifier for the order",
                          "type": "string"
                        },
                        "party_id": {
                          "description": "Party identifier for the order",
                          "type": "string"
                        },
                        "pegged_order": {
                          "description": "Pegged order details, used only if the order represents a pegged order.",
                          "properties": {
                            "offset": {
                              "description": "Offset from the price reference",
                              "type": "string"
                            },
                            "reference": {
                              "description": "Which price point are we linked to",
                              "enum": [
                                [
                                  "PEGGED_REFERENCE_UNSPECIFIED",
                                  "PEGGED_REFERENCE_MID",
                                  "PEGGED_REFERENCE_BEST_BID",
                                  "PEGGED_REFERENCE_BEST_ASK"
                                ]
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "price": {
                          "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                          "type": "string"
                        },
                        "reason": {
                          "description": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors",
                          "enum": [
                            [
                              "ORDER_ERROR_UNSPECIFIED",
                              "ORDER_ERROR_INVALID_MARKET_ID",
                              "ORDER_ERROR_INVALID_ORDER_ID",
                              "ORDER_ERROR_OUT_OF_SEQUENCE",
                              "ORDER_ERROR_INVALID_REMAINING_SIZE",
                              "ORDER_ERROR_TIME_FAILURE",
                              "ORDER_ERROR_REMOVAL_FAILURE",
                              "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                              "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                              "ORDER_ERROR_EDIT_NOT_ALLOWED",
                              "ORDER_ERROR_AMEND_FAILURE",
                              "ORDER_ERROR_NOT_FOUND",
                              "ORDER_ERROR_INVALID_PARTY_ID",
                              "ORDER_ERROR_MARKET_CLOSED",
                              "ORDER_ERROR_MARGIN_CHECK_FAILED",
                              "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                              "ORDER_ERROR_INTERNAL_ERROR",
                              "ORDER_ERROR_INVALID_SIZE",
                              "ORDER_ERROR_INVALID_PERSISTENCE",
                              "ORDER_ERROR_INVALID_TYPE",
                              "ORDER_ERROR_SELF_TRADING",
                              "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                              "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                              "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                              "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                              "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                              "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                              "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                              "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                              "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                              "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                              "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                              "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                              "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                              "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                              "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                              "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                              "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                              "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                              "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                              "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                              "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                              "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                              "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                              "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                              "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
                            ]
                          ],
                          "type": "string"
                        },
                        "reference": {
                          "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission",
                          "type": "string"
                        },
                        "remaining": {
                          "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED",
                          "format": "int64",
                          "type": "integer"
                        },
                        "side": {
                          "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                          "enum": [
                            [
                              "SIDE_UNSPECIFIED",
                              "SIDE_BUY",
                              "SIDE_SELL"
                            ]
                          ],
                          "type": "string"
                        },
                        "size": {
                          "description": "Size for the order, for example, in a futures market the size equals the number of contracts",
                          "format": "int64",
                          "type": "integer"
                        },
                        "status": {
                          "description": "The current status for the order. See [`Order.Status`](#vega.Order.Status) - For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field",
                          "enum": [
                            [
                              "STATUS_UNSPECIFIED",
                              "STATUS_ACTIVE",
                              "STATUS_EXPIRED",
                              "STATUS_CANCELLED",
                              "STATUS_STOPPED",
                              "STATUS_FILLED",
                              "STATUS_REJECTED",
                              "STATUS_PARTIALLY_FILLED",
                              "STATUS_PARKED"
                            ]
                          ],
                          "type": "string"
                        },
                        "time_in_force": {
                          "description": "Time in force indicates how long an order will remain active before it is executed or expires. - See [`Order.TimeInForce`](#vega.Order.TimeInForce)",
                          "enum": [
                            [
                              "TIME_IN_FORCE_UNSPECIFIED",
                              "TIME_IN_FORCE_GTC",
                              "TIME_IN_FORCE_GTT",
                              "TIME_IN_FORCE_IOC",
                              "TIME_IN_FORCE_FOK",
                              "TIME_IN_FORCE_GFA",
                              "TIME_IN_FORCE_GFN"
                            ]
                          ],
                          "type": "string"
                        },
                        "type": {
                          "description": "Type for the order - See [`Order.Type`](#vega.Order.Type)",
                          "enum": [
                            [
                              "TYPE_UNSPECIFIED",
                              "TYPE_LIMIT",
                              "TYPE_MARKET",
                              "TYPE_NETWORK"
                            ]
                          ],
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                          "format": "int64",
                          "type": "integer"
                        },
                        "version": {
                          "description": "The version for the order, initial value is version 1 and is incremented after each successful amend",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Account events",
                      "properties": {
                        "asset": {
                          "description": "Asset identifier for the account",
                          "type": "string"
                        },
                        "balance": {
                          "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places and importantly balances cannot be negative",
                          "type": "string"
                        },
                        "id": {
                          "description": "Unique account identifier (used internally by Vega)",
                          "type": "string"
                        },
                        "market_id": {
                          "description": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty",
                          "type": "string"
                        },
                        "owner": {
                          "description": "The party that the account belongs to, special values include `network`, which represents the Vega network and is most commonly seen during liquidation of distressed trading positions",
                          "type": "string"
                        },
                        "type": {
                          "description": "The account type related to this account",
                          "enum": [
                            [
                              "ACCOUNT_TYPE_UNSPECIFIED",
                              "ACCOUNT_TYPE_INSURANCE",
                              "ACCOUNT_TYPE_SETTLEMENT",
                              "ACCOUNT_TYPE_MARGIN",
                              "ACCOUNT_TYPE_GENERAL",
                              "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                              "ACCOUNT_TYPE_FEES_LIQUIDITY",
                              "ACCOUNT_TYPE_FEES_MAKER",
                              "ACCOUNT_TYPE_LOCK_WITHDRAW",
                              "ACCOUNT_TYPE_BOND",
                              "ACCOUNT_TYPE_EXTERNAL",
                              "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                              "ACCOUNT_TYPE_GLOBAL_REWARD",
                              "ACCOUNT_TYPE_PENDING_TRANSFERS",
                              "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                              "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                              "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                              "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                            ]
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Party events",
                      "properties": {
                        "id": {
                          "description": "A unique identifier for the party, typically represented by a public key",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Trade events",
                      "properties": {
                        "aggressor": {
                          "description": "Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                          "enum": [
                            [
                              "SIDE_UNSPECIFIED",
                              "SIDE_BUY",
                              "SIDE_SELL"
                            ]
                          ],
                          "type": "string"
                        },
                        "buy_order": {
                          "description": "Identifier of the order from the buy side",
                          "type": "string"
                        },
                        "buyer": {
                          "description": "Unique party identifier for the buyer",
                          "type": "string"
                        },
                        "buyer_auction_batch": {
                          "description": "Auction batch number that the buy side order was placed in",
                          "format": "int64",
                          "type": "integer"
                        },
                        "buyer_fee": {
                          "description": "Fee amount charged to the buyer party for the trade",
                          "properties": {
                            "infrastructure_fee": {
                              "description": "Fee amount paid for maintaining the Vega infrastructure",
                              "type": "string"
                            },
                            "liquidity_fee": {
                              "description": "Fee amount paid to market makers",
                              "type": "string"
                            },
                            "maker_fee": {
                              "description": "Fee amount paid to the non-aggressive party of the trade",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "Unique identifier for the trade (generated by Vega)",
                          "type": "string"
                        },
                        "market_id": {
                          "description": "Market identifier (the market that the trade occurred on)",
                          "type": "string"
                        },
                        "price": {
                          "description": "Price for the trade, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                          "type": "string"
                        },
                        "sell_order": {
                          "description": "Identifier of the order from the sell side",
                          "type": "string"
                        },
                        "seller": {
                          "description": "Unique party identifier for the seller",
                          "type": "string"
                        },
                        "seller_auction_batch": {
                          "description": "Auction batch number that the sell side order was placed in",
                          "format": "int64",
                          "type": "integer"
                        },
                        "seller_fee": {
                          "description": "Fee amount charged to the seller party for the trade",
                          "properties": {
                            "infrastructure_fee": {
                              "description": "Fee amount paid for maintaining the Vega infrastructure",
                              "type": "string"
                            },
                            "liquidity_fee": {
                              "description": "Fee amount paid to market makers",
                              "type": "string"
                            },
                            "maker_fee": {
                              "description": "Fee amount paid to the non-aggressive party of the trade",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "size": {
                          "description": "Size filled for the trade",
                          "format": "int64",
                          "type": "integer"
                        },
                        "timestamp": {
                          "description": "Timestamp for when the trade occurred, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                          "format": "int64",
                          "type": "integer"
                        },
                        "type": {
                          "description": "Type for the trade - See [`Trade.Type`](#vega.Trade.Type)",
                          "enum": [
                            [
                              "TYPE_UNSPECIFIED",
                              "TYPE_DEFAULT",
                              "TYPE_NETWORK_CLOSE_OUT_GOOD",
                              "TYPE_NETWORK_CLOSE_OUT_BAD"
                            ]
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Margin level update events",
                      "properties": {
                        "asset": {
                          "description": "Asset identifier",
                          "type": "string"
                        },
                        "collateral_release_level": {
                          "description": "Collateral release level value",
                          "type": "string"
                        },
                        "initial_margin": {
                          "description": "Initial margin value",
                          "type": "string"
                        },
                        "maintenance_margin": {
                          "description": "Maintenance margin value",
                          "type": "string"
                        },
                        "market_id": {
                          "description": "Market identifier",
                          "type": "string"
                        },
                        "party_id": {
                          "description": "Party identifier",
                          "type": "string"
                        },
                        "search_level": {
                          "description": "Search level value",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Proposal events (for governance)",
                      "properties": {
                        "error_details": {
                          "description": "The detailed error associated to the reason.",
                          "type": "string"
                        },
                        "id": {
                          "description": "Unique proposal identifier",
                          "type": "string"
                        },
                        "party_id": {
                          "description": "Party identifier of the author (the party submitting the proposal)",
                          "type": "string"
                        },
                        "reason": {
                          "description": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses",
                          "enum": [
                            [
                              "PROPOSAL_ERROR_UNSPECIFIED",
                              "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
                              "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
                              "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
                              "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
                              "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
                              "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
                              "PROPOSAL_ERROR_NO_PRODUCT",
                              "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
                              "PROPOSAL_ERROR_NO_TRADING_MODE",
                              "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
                              "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
                              "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
                              "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
                              "PROPOSAL_ERROR_INVALID_ASSET",
                              "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
                              "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
                              "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
                              "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
                              "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
                              "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
                              "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
                              "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
                              "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
                              "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
                              "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
                              "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
                              "PROPOSAL_ERROR_INVALID_SHAPE",
                              "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
                              "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
                              "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
                              "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
                            ]
                          ],
                          "type": "string"
                        },
                        "reference": {
                          "description": "Proposal reference",
                          "type": "string"
                        },
                        "state": {
                          "description": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition",
                          "enum": [
                            [
                              "STATE_UNSPECIFIED",
                              "STATE_FAILED",
                              "STATE_OPEN",
                              "STATE_PASSED",
                              "STATE_REJECTED",
                              "STATE_DECLINED",
                              "STATE_ENACTED",
                              "STATE_WAITING_FOR_NODE_VOTE"
                            ]
                          ],
                          "type": "string"
                        },
                        "terms": {
                          "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted",
                          "properties": {
                            "change": {
                              "oneOf": [
                                {
                                  "description": "Proposal change for modifying an existing market on Vega",
                                  "type": "object"
                                },
                                {
                                  "description": "Proposal change for creating new market on Vega",
                                  "properties": {
                                    "changes": {
                                      "description": "The configuration of the new market",
                                      "properties": {
                                        "decimal_places": {
                                          "description": "Decimal places used for the new market",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "instrument": {
                                          "description": "New market instrument configuration",
                                          "properties": {
                                            "code": {
                                              "description": "Instrument code",
                                              "type": "string"
                                            },
                                            "name": {
                                              "description": "Instrument name",
                                              "type": "string"
                                            },
                                            "product": {
                                              "oneOf": [
                                                {
                                                  "description": "Future",
                                                  "properties": {
                                                    "oracle_spec_binding": {
                                                      "description": "The binding between the oracle spec and the settlement price",
                                                      "properties": {
                                                        "settlement_price_property": {
                                                          "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                                          "type": "string"
                                                        },
                                                        "trading_termination_property": {
                                                          "description": "the name of the property in the oracle data that signals termination of trading",
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "oracle_spec_for_settlement_price": {
                                                      "description": "The oracle spec describing the oracle data of settlement price",
                                                      "properties": {
                                                        "filters": {
                                                          "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                          "items": {
                                                            "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                            "properties": {
                                                              "conditions": {
                                                                "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                                "items": {
                                                                  "description": "Condition describes the condition that must be validated by the",
                                                                  "properties": {
                                                                    "operator": {
                                                                      "description": "comparator is the type of comparison to make on the value.",
                                                                      "enum": [
                                                                        [
                                                                          "OPERATOR_UNSPECIFIED",
                                                                          "OPERATOR_EQUALS",
                                                                          "OPERATOR_GREATER_THAN",
                                                                          "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                          "OPERATOR_LESS_THAN",
                                                                          "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                        ]
                                                                      ],
                                                                      "type": "string"
                                                                    },
                                                                    "value": {
                                                                      "description": "value is used by the comparator.",
                                                                      "type": "string"
                                                                    }
                                                                  },
                                                                  "type": "object"
                                                                },
                                                                "type": "array"
                                                              },
                                                              "key": {
                                                                "description": "key is the oracle data property key targeted by the filter.",
                                                                "properties": {
                                                                  "name": {
                                                                    "description": "name is the name of the property.",
                                                                    "type": "string"
                                                                  },
                                                                  "type": {
                                                                    "description": "type is the type of the property.",
                                                                    "enum": [
                                                                      [
                                                                        "TYPE_UNSPECIFIED",
                                                                        "TYPE_EMPTY",
                                                                        "TYPE_INTEGER",
                                                                        "TYPE_STRING",
                                                                        "TYPE_BOOLEAN",
                                                                        "TYPE_DECIMAL",
                                                                        "TYPE_TIMESTAMP"
                                                                      ]
                                                                    ],
                                                                    "type": "string"
                                                                  }
                                                                },
                                                                "type": "object"
                                                              }
                                                            },
                                                            "type": "object"
                                                          },
                                                          "type": "array"
                                                        },
                                                        "pub_keys": {
                                                          "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                          "items": {
                                                            "type": "string"
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "oracle_spec_for_trading_termination": {
                                                      "description": "The oracle spec describing the oracle data of trading termination",
                                                      "properties": {
                                                        "filters": {
                                                          "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                          "items": {
                                                            "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                            "properties": {
                                                              "conditions": {
                                                                "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                                "items": {
                                                                  "description": "Condition describes the condition that must be validated by the",
                                                                  "properties": {
                                                                    "operator": {
                                                                      "description": "comparator is the type of comparison to make on the value.",
                                                                      "enum": [
                                                                        [
                                                                          "OPERATOR_UNSPECIFIED",
                                                                          "OPERATOR_EQUALS",
                                                                          "OPERATOR_GREATER_THAN",
                                                                          "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                          "OPERATOR_LESS_THAN",
                                                                          "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                        ]
                                                                      ],
                                                                      "type": "string"
                                                                    },
                                                                    "value": {
                                                                      "description": "value is used by the comparator.",
                                                                      "type": "string"
                                                                    }
                                                                  },
                                                                  "type": "object"
                                                                },
                                                                "type": "array"
                                                              },
                                                              "key": {
                                                                "description": "key is the oracle data property key targeted by the filter.",
                                                                "properties": {
                                                                  "name": {
                                                                    "description": "name is the name of the property.",
                                                                    "type": "string"
                                                                  },
                                                                  "type": {
                                                                    "description": "type is the type of the property.",
                                                                    "enum": [
                                                                      [
                                                                        "TYPE_UNSPECIFIED",
                                                                        "TYPE_EMPTY",
                                                                        "TYPE_INTEGER",
                                                                        "TYPE_STRING",
                                                                        "TYPE_BOOLEAN",
                                                                        "TYPE_DECIMAL",
                                                                        "TYPE_TIMESTAMP"
                                                                      ]
                                                                    ],
                                                                    "type": "string"
                                                                  }
                                                                },
                                                                "type": "object"
                                                              }
                                                            },
                                                            "type": "object"
                                                          },
                                                          "type": "array"
                                                        },
                                                        "pub_keys": {
                                                          "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                          "items": {
                                                            "type": "string"
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "quote_name": {
                                                      "description": "Product quote name",
                                                      "type": "string"
                                                    },
                                                    "settlement_asset": {
                                                      "description": "Product settlement asset identifier",
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "liquidity_monitoring_parameters": {
                                          "description": "Liquidity monitoring parameters",
                                          "properties": {
                                            "auction_extension": {
                                              "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                                              "format": "int64",
                                              "type": "integer"
                                            },
                                            "target_stake_parameters": {
                                              "description": "Specifies parameters related to target stake calculation",
                                              "properties": {
                                                "scaling_factor": {
                                                  "description": "Specifies scaling factors used in target stake calculation",
                                                  "type": "number"
                                                },
                                                "time_window": {
                                                  "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                                  "format": "int64",
                                                  "type": "integer"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "triggering_ratio": {
                                              "description": "Specifies the triggering ratio for entering liquidity auction",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "metadata": {
                                          "description": "Optional new market meta data, tags",
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "price_monitoring_parameters": {
                                          "description": "Price monitoring parameters",
                                          "properties": {
                                            "triggers": {
                                              "items": {
                                                "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                                "properties": {
                                                  "auction_extension": {
                                                    "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                                    "format": "int64",
                                                    "type": "integer"
                                                  },
                                                  "horizon": {
                                                    "description": "Price monitoring projection horizon τ in seconds",
                                                    "format": "int64",
                                                    "type": "integer"
                                                  },
                                                  "probability": {
                                                    "description": "Price monitoring probability level p",
                                                    "type": "number"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "risk_parameters": {
                                          "oneOf": [
                                            {
                                              "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                                              "properties": {
                                                "factor_long": {
                                                  "description": "Pre-defined risk factor value for long",
                                                  "type": "number"
                                                },
                                                "factor_short": {
                                                  "description": "Pre-defined risk factor value for short",
                                                  "type": "number"
                                                },
                                                "max_move_up": {
                                                  "description": "Pre-defined maximum price move up that the model considers as valid",
                                                  "type": "number"
                                                },
                                                "min_move_down": {
                                                  "description": "Pre-defined minimum price move down that the model considers as valid",
                                                  "type": "number"
                                                },
                                                "probability_of_trading": {
                                                  "description": "Pre-defined constant probability of trading",
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            {
                                              "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                                              "properties": {
                                                "params": {
                                                  "description": "Risk model parameters for log normal",
                                                  "properties": {
                                                    "mu": {
                                                      "description": "Mu param",
                                                      "type": "number"
                                                    },
                                                    "r": {
                                                      "description": "R param",
                                                      "type": "number"
                                                    },
                                                    "sigma": {
                                                      "description": "Sigma param",
                                                      "type": "number"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "risk_aversion_parameter": {
                                                  "description": "Risk Aversion Parameter",
                                                  "type": "number"
                                                },
                                                "tau": {
                                                  "description": "Tau",
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "liquidity_commitment": {
                                      "description": "The commitment from the party creating the NewMarket proposal",
                                      "properties": {
                                        "buys": {
                                          "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                                          "items": {
                                            "description": "Represents a liquidity order",
                                            "properties": {
                                              "offset": {
                                                "description": "The offset/amount of units away for the order",
                                                "type": "string"
                                              },
                                              "proportion": {
                                                "description": "The relative proportion of the commitment to be allocated at a price level",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "reference": {
                                                "description": "The pegged reference point for the order",
                                                "enum": [
                                                  [
                                                    "PEGGED_REFERENCE_UNSPECIFIED",
                                                    "PEGGED_REFERENCE_MID",
                                                    "PEGGED_REFERENCE_BEST_BID",
                                                    "PEGGED_REFERENCE_BEST_ASK"
                                                  ]
                                                ],
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "commitment_amount": {
                                          "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                                          "type": "string"
                                        },
                                        "fee": {
                                          "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                                          "type": "string"
                                        },
                                        "reference": {
                                          "description": "A reference to be associated to all orders created from this commitment",
                                          "type": "string"
                                        },
                                        "sells": {
                                          "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                                          "items": {
                                            "description": "Represents a liquidity order",
                                            "properties": {
                                              "offset": {
                                                "description": "The offset/amount of units away for the order",
                                                "type": "string"
                                              },
                                              "proportion": {
                                                "description": "The relative proportion of the commitment to be allocated at a price level",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "reference": {
                                                "description": "The pegged reference point for the order",
                                                "enum": [
                                                  [
                                                    "PEGGED_REFERENCE_UNSPECIFIED",
                                                    "PEGGED_REFERENCE_MID",
                                                    "PEGGED_REFERENCE_BEST_BID",
                                                    "PEGGED_REFERENCE_BEST_ASK"
                                                  ]
                                                ],
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "description": "Proposal change for updating Vega network parameters",
                                  "properties": {
                                    "changes": {
                                      "description": "The network parameter to update",
                                      "properties": {
                                        "key": {
                                          "description": "The unique key",
                                          "type": "string"
                                        },
                                        "value": {
                                          "description": "The value for the network parameter",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "description": "Proposal change for creating new assets on Vega",
                                  "properties": {
                                    "changes": {
                                      "description": "The configuration of the new asset",
                                      "properties": {
                                        "decimals": {
                                          "description": "Number of decimal / precision handled by this asset",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "name": {
                                          "description": "Name of the asset (e.g: Great British Pound)",
                                          "type": "string"
                                        },
                                        "quantum": {
                                          "description": "The minimum economically meaningful amount in the asset",
                                          "type": "string"
                                        },
                                        "source": {
                                          "oneOf": [
                                            {
                                              "description": "A built-in asset",
                                              "properties": {
                                                "max_faucet_amount_mint": {
                                                  "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            {
                                              "description": "An Ethereum ERC20 asset",
                                              "properties": {
                                                "contract_address": {
                                                  "description": "The address of the contract for the token, on the ethereum network",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        },
                                        "symbol": {
                                          "description": "Symbol of the asset (e.g: GBP)",
                                          "type": "string"
                                        },
                                        "total_supply": {
                                          "description": "Total circulating supply for the asset",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "description": "Proposal change for a freeform voting thing",
                                  "properties": {
                                    "changes": {
                                      "description": "The configuration of the new freeform",
                                      "properties": {
                                        "description": {
                                          "description": "A short description of what is being proposed",
                                          "type": "string"
                                        },
                                        "hash": {
                                          "description": "The hash on the content of the URL",
                                          "type": "string"
                                        },
                                        "url": {
                                          "description": "The URL containing content that describes the proposal",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            "closing_timestamp": {
                              "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
                              "format": "int64",
                              "type": "integer"
                            },
                            "enactment_timestamp": {
                              "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
                              "format": "int64",
                              "type": "integer"
                            },
                            "validation_timestamp": {
                              "description": "Validation timestamp (Unix time in seconds)",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "timestamp": {
                          "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Vote events (for governance)",
                      "properties": {
                        "party_id": {
                          "description": "Voter's party identifier",
                          "type": "string"
                        },
                        "proposal_id": {
                          "description": "Identifier of the proposal being voted on",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                          "format": "int64",
                          "type": "integer"
                        },
                        "total_governance_token_balance": {
                          "description": "Total number of governance token for the party that casted the vote",
                          "type": "string"
                        },
                        "total_governance_token_weight": {
                          "description": "The weight of this vote based on the total of governance token",
                          "type": "string"
                        },
                        "value": {
                          "description": "Actual vote",
                          "enum": [
                            [
                              "VALUE_UNSPECIFIED",
                              "VALUE_NO",
                              "VALUE_YES"
                            ]
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Market data events",
                      "properties": {
                        "auction_end": {
                          "description": "Time in seconds until the end of the auction (0 if currently not in auction period)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "auction_start": {
                          "description": "Time until next auction (used in FBA's) - currently always 0",
                          "format": "int64",
                          "type": "integer"
                        },
                        "best_bid_price": {
                          "description": "Highest price level on an order book for buy orders, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                          "type": "string"
                        },
                        "best_bid_volume": {
                          "description": "Aggregated volume being bid at the best bid price",
                          "format": "int64",
                          "type": "integer"
                        },
                        "best_offer_price": {
                          "description": "Lowest price level on an order book for offer orders",
                          "type": "string"
                        },
                        "best_offer_volume": {
                          "description": "Aggregated volume being offered at the best offer price, as an integer, for example `123456` is a correctly // formatted price of `1.23456` assuming market configured to 5 decimal places",
                          "format": "int64",
                          "type": "integer"
                        },
                        "best_static_bid_price": {
                          "description": "Highest price on the order book for buy orders not including pegged orders",
                          "type": "string"
                        },
                        "best_static_bid_volume": {
                          "description": "Total volume at the best static bid price excluding pegged orders",
                          "format": "int64",
                          "type": "integer"
                        },
                        "best_static_offer_price": {
                          "description": "Lowest price on the order book for sell orders not including pegged orders",
                          "type": "string"
                        },
                        "best_static_offer_volume": {
                          "description": "Total volume at the best static offer price excluding pegged orders",
                          "format": "int64",
                          "type": "integer"
                        },
                        "extension_trigger": {
                          "description": "When a market auction is extended, this field indicates what caused the extension",
                          "enum": [
                            [
                              "AUCTION_TRIGGER_UNSPECIFIED",
                              "AUCTION_TRIGGER_BATCH",
                              "AUCTION_TRIGGER_OPENING",
                              "AUCTION_TRIGGER_PRICE",
                              "AUCTION_TRIGGER_LIQUIDITY"
                            ]
                          ],
                          "type": "string"
                        },
                        "indicative_price": {
                          "description": "Indicative price (zero if not in auction)",
                          "type": "string"
                        },
                        "indicative_volume": {
                          "description": "Indicative volume (zero if not in auction)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "liquidity_provider_fee_share": {
                          "description": "the equity like share of liquidity fee for each liquidity provider",
                          "items": {
                            "description": "The equity like share of liquidity fee for each liquidity provider",
                            "properties": {
                              "average_entry_valuation": {
                                "description": "The average entry valuation of the liquidity provider for the market",
                                "type": "string"
                              },
                              "equity_like_share": {
                                "description": "The share own by this liquidity provider (float)",
                                "type": "string"
                              },
                              "party": {
                                "description": "The liquidity provider party id",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "mark_price": {
                          "description": "Mark price, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                          "type": "string"
                        },
                        "market": {
                          "description": "Market identifier for the data",
                          "type": "string"
                        },
                        "market_trading_mode": {
                          "description": "The current trading mode for the market",
                          "enum": [
                            [
                              "TRADING_MODE_UNSPECIFIED",
                              "TRADING_MODE_CONTINUOUS",
                              "TRADING_MODE_BATCH_AUCTION",
                              "TRADING_MODE_OPENING_AUCTION",
                              "TRADING_MODE_MONITORING_AUCTION"
                            ]
                          ],
                          "type": "string"
                        },
                        "market_value_proxy": {
                          "description": "the market value proxy",
                          "type": "string"
                        },
                        "mid_price": {
                          "description": "Arithmetic average of the best bid price and best offer price, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                          "type": "string"
                        },
                        "open_interest": {
                          "description": "The sum of the size of all positions greater than 0 on the market",
                          "format": "int64",
                          "type": "integer"
                        },
                        "price_monitoring_bounds": {
                          "description": "One or more price monitoring bounds for the current timestamp",
                          "items": {
                            "description": "Represents a list of valid (at the current timestamp) price ranges per associated trigger",
                            "properties": {
                              "max_valid_price": {
                                "description": "Maximum price that isn't currently breaching the specified price monitoring trigger",
                                "type": "string"
                              },
                              "min_valid_price": {
                                "description": "Minimum price that isn't currently breaching the specified price monitoring trigger",
                                "type": "string"
                              },
                              "reference_price": {
                                "description": "Reference price used to calculate the valid price range",
                                "type": "number"
                              },
                              "trigger": {
                                "description": "Price monitoring trigger associated with the bounds",
                                "properties": {
                                  "auction_extension": {
                                    "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "horizon": {
                                    "description": "Price monitoring projection horizon τ in seconds",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "probability": {
                                    "description": "Price monitoring probability level p",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "static_mid_price": {
                          "description": "Arithmetic average of the best static bid price and best static offer price",
                          "type": "string"
                        },
                        "supplied_stake": {
                          "description": "Available stake for the given market",
                          "type": "string"
                        },
                        "target_stake": {
                          "description": "Targeted stake for the given market",
                          "type": "string"
                        },
                        "timestamp": {
                          "description": "Timestamp at which this mark price was relevant, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                          "format": "int64",
                          "type": "integer"
                        },
                        "trigger": {
                          "description": "When a market is in an auction trading mode, this field indicates what triggered the auction",
                          "enum": [
                            [
                              "AUCTION_TRIGGER_UNSPECIFIED",
                              "AUCTION_TRIGGER_BATCH",
                              "AUCTION_TRIGGER_OPENING",
                              "AUCTION_TRIGGER_PRICE",
                              "AUCTION_TRIGGER_LIQUIDITY"
                            ]
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Node signature events",
                      "properties": {
                        "id": {
                          "description": "The identifier of the resource being signed",
                          "type": "string"
                        },
                        "kind": {
                          "description": "The kind of resource being signed",
                          "enum": [
                            [
                              "NODE_SIGNATURE_KIND_UNSPECIFIED",
                              "NODE_SIGNATURE_KIND_ASSET_NEW",
                              "NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL"
                            ]
                          ],
                          "type": "string"
                        },
                        "sig": {
                          "description": "The signature",
                          "format": "byte",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Loss socialization events - See [LossSocialization](#vega.LossSocialization)",
                      "properties": {
                        "amount": {
                          "description": "Amount distributed",
                          "type": "string"
                        },
                        "market_id": {
                          "description": "Market identifier for the event",
                          "type": "string"
                        },
                        "party_id": {
                          "description": "Party identifier (public key) for the event",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Position settlement events - See [SettlePosition](#vega.SettlePosition)",
                      "properties": {
                        "market_id": {
                          "description": "Market identifier for the event",
                          "type": "string"
                        },
                        "party_id": {
                          "description": "Party identifier (public key) for the event",
                          "type": "string"
                        },
                        "price": {
                          "description": "Price of settlement as a string",
                          "type": "string"
                        },
                        "trade_settlements": {
                          "description": "A collection of 1 or more trade settlements",
                          "items": {
                            "description": "A trade settlement is part of the settle position event",
                            "properties": {
                              "price": {
                                "description": "Price of settlement as string",
                                "type": "string"
                              },
                              "size": {
                                "description": "Size of trade settlement",
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Position distressed events - See [SettleDistressed](#vega.SettleDistressed)",
                      "properties": {
                        "margin": {
                          "description": "Margin value as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                          "type": "string"
                        },
                        "market_id": {
                          "description": "Market identifier for the event",
                          "type": "string"
                        },
                        "party_id": {
                          "description": "Party identifier (public key) for the event",
                          "type": "string"
                        },
                        "price": {
                          "description": "Price as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Market created events",
                      "properties": {
                        "decimal_places": {
                          "description": "Number of decimal places that a price must be shifted by in order to get a correct price denominated in the currency of the market, for example: `realPrice = price / 10^decimalPlaces`",
                          "format": "int64",
                          "type": "integer"
                        },
                        "fees": {
                          "description": "Fees configuration",
                          "properties": {
                            "factors": {
                              "description": "Fee factors",
                              "properties": {
                                "infrastructure_fee": {
                                  "description": "Infrastructure fee",
                                  "type": "string"
                                },
                                "liquidity_fee": {
                                  "description": "Liquidity fee",
                                  "type": "string"
                                },
                                "maker_fee": {
                                  "description": "Maker fee",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "Unique identifier",
                          "type": "string"
                        },
                        "liquidity_monitoring_parameters": {
                          "description": "LiquidityMonitoringParameters for the market",
                          "properties": {
                            "auction_extension": {
                              "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                              "format": "int64",
                              "type": "integer"
                            },
                            "target_stake_parameters": {
                              "description": "Specifies parameters related to target stake calculation",
                              "properties": {
                                "scaling_factor": {
                                  "description": "Specifies scaling factors used in target stake calculation",
                                  "type": "number"
                                },
                                "time_window": {
                                  "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                  "format": "int64",
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "triggering_ratio": {
                              "description": "Specifies the triggering ratio for entering liquidity auction",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "market_timestamps": {
                          "description": "Timestamps for when the market stay changes",
                          "properties": {
                            "close": {
                              "description": "Time when the market is closed",
                              "format": "int64",
                              "type": "integer"
                            },
                            "open": {
                              "description": "Time when the market has left the opening auction and is ready to accept trades",
                              "format": "int64",
                              "type": "integer"
                            },
                            "pending": {
                              "description": "Time when the market has been voted in and is created into an opening auction",
                              "format": "int64",
                              "type": "integer"
                            },
                            "proposed": {
                              "description": "Time when the market is first proposed",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "opening_auction": {
                          "description": "Auction duration specifies how long the opening auction will run (minimum duration and optionally a minimum traded volume)",
                          "properties": {
                            "duration": {
                              "description": "Duration of the auction in seconds",
                              "format": "int64",
                              "type": "integer"
                            },
                            "volume": {
                              "description": "Target uncrossing trading volume",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "price_monitoring_settings": {
                          "description": "PriceMonitoringSettings for the market",
                          "properties": {
                            "parameters": {
                              "description": "Specifies price monitoring parameters to be used for price monitoring purposes",
                              "properties": {
                                "triggers": {
                                  "items": {
                                    "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                    "properties": {
                                      "auction_extension": {
                                        "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "horizon": {
                                        "description": "Price monitoring projection horizon τ in seconds",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "probability": {
                                        "description": "Price monitoring probability level p",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "update_frequency": {
                              "description": "Specifies how often (expressed in seconds) the price monitoring bounds should be updated",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "state": {
                          "description": "Current state of the market",
                          "enum": [
                            [
                              "STATE_UNSPECIFIED",
                              "STATE_PROPOSED",
                              "STATE_REJECTED",
                              "STATE_PENDING",
                              "STATE_CANCELLED",
                              "STATE_ACTIVE",
                              "STATE_SUSPENDED",
                              "STATE_CLOSED",
                              "STATE_TRADING_TERMINATED",
                              "STATE_SETTLED"
                            ]
                          ],
                          "type": "string"
                        },
                        "tradable_instrument": {
                          "description": "Tradable instrument configuration",
                          "properties": {
                            "instrument": {
                              "description": "Instrument details",
                              "properties": {
                                "code": {
                                  "description": "Code for the instrument",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "Instrument identifier",
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "A collection of instrument meta-data",
                                  "properties": {
                                    "tags": {
                                      "description": "A list of 0 or more tags",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "name": {
                                  "description": "Name of the instrument",
                                  "type": "string"
                                },
                                "product": {
                                  "oneOf": [
                                    {
                                      "description": "Future",
                                      "properties": {
                                        "oracle_spec_binding": {
                                          "description": "The binding between the oracle spec and the oracle data",
                                          "properties": {
                                            "settlement_price_property": {
                                              "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                              "type": "string"
                                            },
                                            "trading_termination_property": {
                                              "description": "the name of the property in the oracle data that signals termination of trading",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "oracle_spec_for_settlement_price": {
                                          "description": "The oracle spec describing the settlement price oracle filter",
                                          "properties": {
                                            "created_at": {
                                              "description": "Creation Date time",
                                              "format": "int64",
                                              "type": "integer"
                                            },
                                            "filters": {
                                              "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                              "items": {
                                                "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                "properties": {
                                                  "conditions": {
                                                    "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                    "items": {
                                                      "description": "Condition describes the condition that must be validated by the",
                                                      "properties": {
                                                        "operator": {
                                                          "description": "comparator is the type of comparison to make on the value.",
                                                          "enum": [
                                                            [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ]
                                                          ],
                                                          "type": "string"
                                                        },
                                                        "value": {
                                                          "description": "value is used by the comparator.",
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "key": {
                                                    "description": "key is the oracle data property key targeted by the filter.",
                                                    "properties": {
                                                      "name": {
                                                        "description": "name is the name of the property.",
                                                        "type": "string"
                                                      },
                                                      "type": {
                                                        "description": "type is the type of the property.",
                                                        "enum": [
                                                          [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ]
                                                        ],
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "id": {
                                              "description": "id is a hash generated from the OracleSpec data.",
                                              "type": "string"
                                            },
                                            "pub_keys": {
                                              "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            },
                                            "status": {
                                              "description": "status describes the status of the oracle spec",
                                              "enum": [
                                                [
                                                  "STATUS_UNSPECIFIED",
                                                  "STATUS_ACTIVE",
                                                  "STATUS_DEACTIVATED"
                                                ]
                                              ],
                                              "type": "string"
                                            },
                                            "updated_at": {
                                              "description": "Last Updated timestamp",
                                              "format": "int64",
                                              "type": "integer"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "oracle_spec_for_trading_termination": {
                                          "description": "the oracle spec describing the trading termination oracle filter",
                                          "properties": {
                                            "created_at": {
                                              "description": "Creation Date time",
                                              "format": "int64",
                                              "type": "integer"
                                            },
                                            "filters": {
                                              "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                              "items": {
                                                "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                "properties": {
                                                  "conditions": {
                                                    "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                    "items": {
                                                      "description": "Condition describes the condition that must be validated by the",
                                                      "properties": {
                                                        "operator": {
                                                          "description": "comparator is the type of comparison to make on the value.",
                                                          "enum": [
                                                            [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ]
                                                          ],
                                                          "type": "string"
                                                        },
                                                        "value": {
                                                          "description": "value is used by the comparator.",
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "key": {
                                                    "description": "key is the oracle data property key targeted by the filter.",
                                                    "properties": {
                                                      "name": {
                                                        "description": "name is the name of the property.",
                                                        "type": "string"
                                                      },
                                                      "type": {
                                                        "description": "type is the type of the property.",
                                                        "enum": [
                                                          [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ]
                                                        ],
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "id": {
                                              "description": "id is a hash generated from the OracleSpec data.",
                                              "type": "string"
                                            },
                                            "pub_keys": {
                                              "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            },
                                            "status": {
                                              "description": "status describes the status of the oracle spec",
                                              "enum": [
                                                [
                                                  "STATUS_UNSPECIFIED",
                                                  "STATUS_ACTIVE",
                                                  "STATUS_DEACTIVATED"
                                                ]
                                              ],
                                              "type": "string"
                                            },
                                            "updated_at": {
                                              "description": "Last Updated timestamp",
                                              "format": "int64",
                                              "type": "integer"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "quote_name": {
                                          "description": "Quote name of the instrument",
                                          "type": "string"
                                        },
                                        "settlement_asset": {
                                          "description": "The asset for the future",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  ]
                                }
                              },
                              "type": "object"
                            },
                            "margin_calculator": {
                              "description": "Margin calculator for the instrument",
                              "properties": {
                                "scaling_factors": {
                                  "description": "Scaling factors for margin calculation",
                                  "properties": {
                                    "collateral_release": {
                                      "description": "Collateral release level",
                                      "type": "number"
                                    },
                                    "initial_margin": {
                                      "description": "Initial margin level",
                                      "type": "number"
                                    },
                                    "search_level": {
                                      "description": "Search level",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "risk_model": {
                              "oneOf": [
                                {
                                  "description": "Log normal",
                                  "properties": {
                                    "params": {
                                      "description": "Risk model parameters for log normal",
                                      "properties": {
                                        "mu": {
                                          "description": "Mu param",
                                          "type": "number"
                                        },
                                        "r": {
                                          "description": "R param",
                                          "type": "number"
                                        },
                                        "sigma": {
                                          "description": "Sigma param",
                                          "type": "number"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "risk_aversion_parameter": {
                                      "description": "Risk Aversion Parameter",
                                      "type": "number"
                                    },
                                    "tau": {
                                      "description": "Tau",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "description": "Simple",
                                  "properties": {
                                    "params": {
                                      "description": "Risk model params for simple modelling",
                                      "properties": {
                                        "factor_long": {
                                          "description": "Pre-defined risk factor value for long",
                                          "type": "number"
                                        },
                                        "factor_short": {
                                          "description": "Pre-defined risk factor value for short",
                                          "type": "number"
                                        },
                                        "max_move_up": {
                                          "description": "Pre-defined maximum price move up that the model considers as valid",
                                          "type": "number"
                                        },
                                        "min_move_down": {
                                          "description": "Pre-defined minimum price move down that the model considers as valid",
                                          "type": "number"
                                        },
                                        "probability_of_trading": {
                                          "description": "Pre-defined constant probability of trading",
                                          "type": "number"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "trading_mode": {
                          "description": "Current mode of execution of the market",
                          "enum": [
                            [
                              "TRADING_MODE_UNSPECIFIED",
                              "TRADING_MODE_CONTINUOUS",
                              "TRADING_MODE_BATCH_AUCTION",
                              "TRADING_MODE_OPENING_AUCTION",
                              "TRADING_MODE_MONITORING_AUCTION"
                            ]
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Asset events",
                      "properties": {
                        "details": {
                          "description": "The definition of the external source for this asset",
                          "properties": {
                            "decimals": {
                              "description": "Number of decimal / precision handled by this asset",
                              "format": "int64",
                              "type": "integer"
                            },
                            "name": {
                              "description": "Name of the asset (e.g: Great British Pound)",
                              "type": "string"
                            },
                            "quantum": {
                              "description": "The minimum economically meaningful amount in the asset",
                              "type": "string"
                            },
                            "source": {
                              "oneOf": [
                                {
                                  "description": "A built-in asset",
                                  "properties": {
                                    "max_faucet_amount_mint": {
                                      "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "description": "An Ethereum ERC20 asset",
                                  "properties": {
                                    "contract_address": {
                                      "description": "The address of the contract for the token, on the ethereum network",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            "symbol": {
                              "description": "Symbol of the asset (e.g: GBP)",
                              "type": "string"
                            },
                            "total_supply": {
                              "description": "Total circulating supply for the asset",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "Internal identifier of the asset",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Market tick events - See [MarketTick](#vega.MarketTick)",
                      "properties": {
                        "id": {
                          "description": "Market identifier for the event",
                          "type": "string"
                        },
                        "time": {
                          "description": "Timestamp containing latest update from Vega blockchain aka Vega-time",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Withdrawal events",
                      "properties": {
                        "amount": {
                          "description": "The amount to be withdrawn",
                          "type": "string"
                        },
                        "asset": {
                          "description": "The asset we want to withdraw funds from",
                          "type": "string"
                        },
                        "created_timestamp": {
                          "description": "Timestamp for when the network started to process this withdrawal",
                          "format": "int64",
                          "type": "integer"
                        },
                        "expiry": {
                          "description": "The time until when the withdrawal is valid",
                          "format": "int64",
                          "type": "integer"
                        },
                        "ext": {
                          "description": "Foreign chain specifics",
                          "properties": {
                            "ext": {
                              "oneOf": [
                                {
                                  "description": "ERC20 withdrawal details",
                                  "properties": {
                                    "receiver_address": {
                                      "description": "The address into which the bridge will release the funds",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "Unique identifier for the withdrawal",
                          "type": "string"
                        },
                        "party_id": {
                          "description": "Unique party identifier of the user initiating the withdrawal",
                          "type": "string"
                        },
                        "ref": {
                          "description": "The reference which is used by the foreign chain to refer to this withdrawal",
                          "type": "string"
                        },
                        "status": {
                          "description": "The status of the withdrawal",
                          "enum": [
                            [
                              "STATUS_UNSPECIFIED",
                              "STATUS_OPEN",
                              "STATUS_REJECTED",
                              "STATUS_FINALIZED"
                            ]
                          ],
                          "type": "string"
                        },
                        "tx_hash": {
                          "description": "The hash of the foreign chain for this transaction",
                          "type": "string"
                        },
                        "withdrawn_timestamp": {
                          "description": "Timestamp for when the withdrawal was finalised by the network",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Deposit events",
                      "properties": {
                        "amount": {
                          "description": "The amount to be deposited",
                          "type": "string"
                        },
                        "asset": {
                          "description": "The Vega asset targeted by this deposit",
                          "type": "string"
                        },
                        "created_timestamp": {
                          "description": "Timestamp for when the deposit was created on the Vega network",
                          "format": "int64",
                          "type": "integer"
                        },
                        "credited_timestamp": {
                          "description": "Timestamp for when the Vega account was updated with the deposit",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "Unique identifier for the deposit",
                          "type": "string"
                        },
                        "party_id": {
                          "description": "Party identifier of the user initiating the deposit",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of the deposit",
                          "enum": [
                            [
                              "STATUS_UNSPECIFIED",
                              "STATUS_OPEN",
                              "STATUS_CANCELLED",
                              "STATUS_FINALIZED"
                            ]
                          ],
                          "type": "string"
                        },
                        "tx_hash": {
                          "description": "The hash of the transaction from the foreign chain",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Auction events - See [AuctionEvent](#vega.AuctionEvent)",
                      "properties": {
                        "end": {
                          "description": "Timestamp containing the end time for an auction",
                          "format": "int64",
                          "type": "integer"
                        },
                        "extension_trigger": {
                          "description": "If an auction was ongoing, but was extended for whatever reason, this field will be set to the trigger type indicating which component extended the auction",
                          "enum": [
                            [
                              "AUCTION_TRIGGER_UNSPECIFIED",
                              "AUCTION_TRIGGER_BATCH",
                              "AUCTION_TRIGGER_OPENING",
                              "AUCTION_TRIGGER_PRICE",
                              "AUCTION_TRIGGER_LIQUIDITY"
                            ]
                          ],
                          "type": "string"
                        },
                        "leave": {
                          "description": "True if the event indicates leaving auction mode and False otherwise",
                          "type": "boolean"
                        },
                        "market_id": {
                          "description": "Market identifier for the event",
                          "type": "string"
                        },
                        "opening_auction": {
                          "description": "True if the event indicates an auction opening and False otherwise",
                          "type": "boolean"
                        },
                        "start": {
                          "description": "Timestamp containing the start time for an auction",
                          "format": "int64",
                          "type": "integer"
                        },
                        "trigger": {
                          "description": "the reason this market is/was in auction",
                          "enum": [
                            [
                              "AUCTION_TRIGGER_UNSPECIFIED",
                              "AUCTION_TRIGGER_BATCH",
                              "AUCTION_TRIGGER_OPENING",
                              "AUCTION_TRIGGER_PRICE",
                              "AUCTION_TRIGGER_LIQUIDITY"
                            ]
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Risk factor events",
                      "properties": {
                        "long": {
                          "description": "Long Risk factor value",
                          "type": "string"
                        },
                        "market": {
                          "description": "Market ID that relates to this risk factor",
                          "type": "string"
                        },
                        "short": {
                          "description": "Short Risk factor value",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Network parameter events",
                      "properties": {
                        "key": {
                          "description": "The unique key",
                          "type": "string"
                        },
                        "value": {
                          "description": "The value for the network parameter",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "LiquidityProvision events",
                      "properties": {
                        "buys": {
                          "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                          "items": {
                            "description": "A pair of a liquidity order and the id of the generated order by the core",
                            "properties": {
                              "liquidity_order": {
                                "description": "The liquidity order from the original submission",
                                "properties": {
                                  "offset": {
                                    "description": "The offset/amount of units away for the order",
                                    "type": "string"
                                  },
                                  "proportion": {
                                    "description": "The relative proportion of the commitment to be allocated at a price level",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "reference": {
                                    "description": "The pegged reference point for the order",
                                    "enum": [
                                      [
                                        "PEGGED_REFERENCE_UNSPECIFIED",
                                        "PEGGED_REFERENCE_MID",
                                        "PEGGED_REFERENCE_BEST_BID",
                                        "PEGGED_REFERENCE_BEST_ASK"
                                      ]
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "order_id": {
                                "description": "Unique identifier of the pegged order generated by the core to fulfil this liquidity order",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "commitment_amount": {
                          "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                          "type": "string"
                        },
                        "created_at": {
                          "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                          "format": "int64",
                          "type": "integer"
                        },
                        "fee": {
                          "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                          "type": "string"
                        },
                        "id": {
                          "description": "Unique identifier",
                          "type": "string"
                        },
                        "market_id": {
                          "description": "Market identifier for the order, required field",
                          "type": "string"
                        },
                        "party_id": {
                          "description": "Unique party identifier for the creator of the provision",
                          "type": "string"
                        },
                        "reference": {
                          "description": "A reference shared between this liquidity provision and all it's orders",
                          "type": "string"
                        },
                        "sells": {
                          "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                          "items": {
                            "description": "A pair of a liquidity order and the id of the generated order by the core",
                            "properties": {
                              "liquidity_order": {
                                "description": "The liquidity order from the original submission",
                                "properties": {
                                  "offset": {
                                    "description": "The offset/amount of units away for the order",
                                    "type": "string"
                                  },
                                  "proportion": {
                                    "description": "The relative proportion of the commitment to be allocated at a price level",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "reference": {
                                    "description": "The pegged reference point for the order",
                                    "enum": [
                                      [
                                        "PEGGED_REFERENCE_UNSPECIFIED",
                                        "PEGGED_REFERENCE_MID",
                                        "PEGGED_REFERENCE_BEST_BID",
                                        "PEGGED_REFERENCE_BEST_ASK"
                                      ]
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "order_id": {
                                "description": "Unique identifier of the pegged order generated by the core to fulfil this liquidity order",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "status": {
                          "description": "Status of this liquidity provision order",
                          "enum": [
                            [
                              "STATUS_UNSPECIFIED",
                              "STATUS_ACTIVE",
                              "STATUS_STOPPED",
                              "STATUS_CANCELLED",
                              "STATUS_REJECTED",
                              "STATUS_UNDEPLOYED",
                              "STATUS_PENDING"
                            ]
                          ],
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "Timestamp for when the order was updated at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                          "format": "int64",
                          "type": "integer"
                        },
                        "version": {
                          "description": "Version of this liquidity provision order",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Market created events",
                      "properties": {
                        "decimal_places": {
                          "description": "Number of decimal places that a price must be shifted by in order to get a correct price denominated in the currency of the market, for example: `realPrice = price / 10^decimalPlaces`",
                          "format": "int64",
                          "type": "integer"
                        },
                        "fees": {
                          "description": "Fees configuration",
                          "properties": {
                            "factors": {
                              "description": "Fee factors",
                              "properties": {
                                "infrastructure_fee": {
                                  "description": "Infrastructure fee",
                                  "type": "string"
                                },
                                "liquidity_fee": {
                                  "description": "Liquidity fee",
                                  "type": "string"
                                },
                                "maker_fee": {
                                  "description": "Maker fee",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "Unique identifier",
                          "type": "string"
                        },
                        "liquidity_monitoring_parameters": {
                          "description": "LiquidityMonitoringParameters for the market",
                          "properties": {
                            "auction_extension": {
                              "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                              "format": "int64",
                              "type": "integer"
                            },
                            "target_stake_parameters": {
                              "description": "Specifies parameters related to target stake calculation",
                              "properties": {
                                "scaling_factor": {
                                  "description": "Specifies scaling factors used in target stake calculation",
                                  "type": "number"
                                },
                                "time_window": {
                                  "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                  "format": "int64",
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "triggering_ratio": {
                              "description": "Specifies the triggering ratio for entering liquidity auction",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "market_timestamps": {
                          "description": "Timestamps for when the market stay changes",
                          "properties": {
                            "close": {
                              "description": "Time when the market is closed",
                              "format": "int64",
                              "type": "integer"
                            },
                            "open": {
                              "description": "Time when the market has left the opening auction and is ready to accept trades",
                              "format": "int64",
                              "type": "integer"
                            },
                            "pending": {
                              "description": "Time when the market has been voted in and is created into an opening auction",
                              "format": "int64",
                              "type": "integer"
                            },
                            "proposed": {
                              "description": "Time when the market is first proposed",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "opening_auction": {
                          "description": "Auction duration specifies how long the opening auction will run (minimum duration and optionally a minimum traded volume)",
                          "properties": {
                            "duration": {
                              "description": "Duration of the auction in seconds",
                              "format": "int64",
                              "type": "integer"
                            },
                            "volume": {
                              "description": "Target uncrossing trading volume",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "price_monitoring_settings": {
                          "description": "PriceMonitoringSettings for the market",
                          "properties": {
                            "parameters": {
                              "description": "Specifies price monitoring parameters to be used for price monitoring purposes",
                              "properties": {
                                "triggers": {
                                  "items": {
                                    "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                    "properties": {
                                      "auction_extension": {
                                        "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "horizon": {
                                        "description": "Price monitoring projection horizon τ in seconds",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "probability": {
                                        "description": "Price monitoring probability level p",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "update_frequency": {
                              "description": "Specifies how often (expressed in seconds) the price monitoring bounds should be updated",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "state": {
                          "description": "Current state of the market",
                          "enum": [
                            [
                              "STATE_UNSPECIFIED",
                              "STATE_PROPOSED",
                              "STATE_REJECTED",
                              "STATE_PENDING",
                              "STATE_CANCELLED",
                              "STATE_ACTIVE",
                              "STATE_SUSPENDED",
                              "STATE_CLOSED",
                              "STATE_TRADING_TERMINATED",
                              "STATE_SETTLED"
                            ]
                          ],
                          "type": "string"
                        },
                        "tradable_instrument": {
                          "description": "Tradable instrument configuration",
                          "properties": {
                            "instrument": {
                              "description": "Instrument details",
                              "properties": {
                                "code": {
                                  "description": "Code for the instrument",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "Instrument identifier",
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "A collection of instrument meta-data",
                                  "properties": {
                                    "tags": {
                                      "description": "A list of 0 or more tags",
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "name": {
                                  "description": "Name of the instrument",
                                  "type": "string"
                                },
                                "product": {
                                  "oneOf": [
                                    {
                                      "description": "Future",
                                      "properties": {
                                        "oracle_spec_binding": {
                                          "description": "The binding between the oracle spec and the oracle data",
                                          "properties": {
                                            "settlement_price_property": {
                                              "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                              "type": "string"
                                            },
                                            "trading_termination_property": {
                                              "description": "the name of the property in the oracle data that signals termination of trading",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "oracle_spec_for_settlement_price": {
                                          "description": "The oracle spec describing the settlement price oracle filter",
                                          "properties": {
                                            "created_at": {
                                              "description": "Creation Date time",
                                              "format": "int64",
                                              "type": "integer"
                                            },
                                            "filters": {
                                              "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                              "items": {
                                                "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                "properties": {
                                                  "conditions": {
                                                    "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                    "items": {
                                                      "description": "Condition describes the condition that must be validated by the",
                                                      "properties": {
                                                        "operator": {
                                                          "description": "comparator is the type of comparison to make on the value.",
                                                          "enum": [
                                                            [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ]
                                                          ],
                                                          "type": "string"
                                                        },
                                                        "value": {
                                                          "description": "value is used by the comparator.",
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "key": {
                                                    "description": "key is the oracle data property key targeted by the filter.",
                                                    "properties": {
                                                      "name": {
                                                        "description": "name is the name of the property.",
                                                        "type": "string"
                                                      },
                                                      "type": {
                                                        "description": "type is the type of the property.",
                                                        "enum": [
                                                          [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ]
                                                        ],
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "id": {
                                              "description": "id is a hash generated from the OracleSpec data.",
                                              "type": "string"
                                            },
                                            "pub_keys": {
                                              "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            },
                                            "status": {
                                              "description": "status describes the status of the oracle spec",
                                              "enum": [
                                                [
                                                  "STATUS_UNSPECIFIED",
                                                  "STATUS_ACTIVE",
                                                  "STATUS_DEACTIVATED"
                                                ]
                                              ],
                                              "type": "string"
                                            },
                                            "updated_at": {
                                              "description": "Last Updated timestamp",
                                              "format": "int64",
                                              "type": "integer"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "oracle_spec_for_trading_termination": {
                                          "description": "the oracle spec describing the trading termination oracle filter",
                                          "properties": {
                                            "created_at": {
                                              "description": "Creation Date time",
                                              "format": "int64",
                                              "type": "integer"
                                            },
                                            "filters": {
                                              "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                              "items": {
                                                "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                "properties": {
                                                  "conditions": {
                                                    "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                    "items": {
                                                      "description": "Condition describes the condition that must be validated by the",
                                                      "properties": {
                                                        "operator": {
                                                          "description": "comparator is the type of comparison to make on the value.",
                                                          "enum": [
                                                            [
                                                              "OPERATOR_UNSPECIFIED",
                                                              "OPERATOR_EQUALS",
                                                              "OPERATOR_GREATER_THAN",
                                                              "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                              "OPERATOR_LESS_THAN",
                                                              "OPERATOR_LESS_THAN_OR_EQUAL"
                                                            ]
                                                          ],
                                                          "type": "string"
                                                        },
                                                        "value": {
                                                          "description": "value is used by the comparator.",
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "key": {
                                                    "description": "key is the oracle data property key targeted by the filter.",
                                                    "properties": {
                                                      "name": {
                                                        "description": "name is the name of the property.",
                                                        "type": "string"
                                                      },
                                                      "type": {
                                                        "description": "type is the type of the property.",
                                                        "enum": [
                                                          [
                                                            "TYPE_UNSPECIFIED",
                                                            "TYPE_EMPTY",
                                                            "TYPE_INTEGER",
                                                            "TYPE_STRING",
                                                            "TYPE_BOOLEAN",
                                                            "TYPE_DECIMAL",
                                                            "TYPE_TIMESTAMP"
                                                          ]
                                                        ],
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "id": {
                                              "description": "id is a hash generated from the OracleSpec data.",
                                              "type": "string"
                                            },
                                            "pub_keys": {
                                              "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            },
                                            "status": {
                                              "description": "status describes the status of the oracle spec",
                                              "enum": [
                                                [
                                                  "STATUS_UNSPECIFIED",
                                                  "STATUS_ACTIVE",
                                                  "STATUS_DEACTIVATED"
                                                ]
                                              ],
                                              "type": "string"
                                            },
                                            "updated_at": {
                                              "description": "Last Updated timestamp",
                                              "format": "int64",
                                              "type": "integer"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "quote_name": {
                                          "description": "Quote name of the instrument",
                                          "type": "string"
                                        },
                                        "settlement_asset": {
                                          "description": "The asset for the future",
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  ]
                                }
                              },
                              "type": "object"
                            },
                            "margin_calculator": {
                              "description": "Margin calculator for the instrument",
                              "properties": {
                                "scaling_factors": {
                                  "description": "Scaling factors for margin calculation",
                                  "properties": {
                                    "collateral_release": {
                                      "description": "Collateral release level",
                                      "type": "number"
                                    },
                                    "initial_margin": {
                                      "description": "Initial margin level",
                                      "type": "number"
                                    },
                                    "search_level": {
                                      "description": "Search level",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "risk_model": {
                              "oneOf": [
                                {
                                  "description": "Log normal",
                                  "properties": {
                                    "params": {
                                      "description": "Risk model parameters for log normal",
                                      "properties": {
                                        "mu": {
                                          "description": "Mu param",
                                          "type": "number"
                                        },
                                        "r": {
                                          "description": "R param",
                                          "type": "number"
                                        },
                                        "sigma": {
                                          "description": "Sigma param",
                                          "type": "number"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "risk_aversion_parameter": {
                                      "description": "Risk Aversion Parameter",
                                      "type": "number"
                                    },
                                    "tau": {
                                      "description": "Tau",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "description": "Simple",
                                  "properties": {
                                    "params": {
                                      "description": "Risk model params for simple modelling",
                                      "properties": {
                                        "factor_long": {
                                          "description": "Pre-defined risk factor value for long",
                                          "type": "number"
                                        },
                                        "factor_short": {
                                          "description": "Pre-defined risk factor value for short",
                                          "type": "number"
                                        },
                                        "max_move_up": {
                                          "description": "Pre-defined maximum price move up that the model considers as valid",
                                          "type": "number"
                                        },
                                        "min_move_down": {
                                          "description": "Pre-defined minimum price move down that the model considers as valid",
                                          "type": "number"
                                        },
                                        "probability_of_trading": {
                                          "description": "Pre-defined constant probability of trading",
                                          "type": "number"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "trading_mode": {
                          "description": "Current mode of execution of the market",
                          "enum": [
                            [
                              "TRADING_MODE_UNSPECIFIED",
                              "TRADING_MODE_CONTINUOUS",
                              "TRADING_MODE_BATCH_AUCTION",
                              "TRADING_MODE_OPENING_AUCTION",
                              "TRADING_MODE_MONITORING_AUCTION"
                            ]
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "OracleSpec events",
                      "properties": {
                        "created_at": {
                          "description": "Creation Date time",
                          "format": "int64",
                          "type": "integer"
                        },
                        "filters": {
                          "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                          "items": {
                            "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                            "properties": {
                              "conditions": {
                                "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                "items": {
                                  "description": "Condition describes the condition that must be validated by the",
                                  "properties": {
                                    "operator": {
                                      "description": "comparator is the type of comparison to make on the value.",
                                      "enum": [
                                        [
                                          "OPERATOR_UNSPECIFIED",
                                          "OPERATOR_EQUALS",
                                          "OPERATOR_GREATER_THAN",
                                          "OPERATOR_GREATER_THAN_OR_EQUAL",
                                          "OPERATOR_LESS_THAN",
                                          "OPERATOR_LESS_THAN_OR_EQUAL"
                                        ]
                                      ],
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "value is used by the comparator.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "key": {
                                "description": "key is the oracle data property key targeted by the filter.",
                                "properties": {
                                  "name": {
                                    "description": "name is the name of the property.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "type is the type of the property.",
                                    "enum": [
                                      [
                                        "TYPE_UNSPECIFIED",
                                        "TYPE_EMPTY",
                                        "TYPE_INTEGER",
                                        "TYPE_STRING",
                                        "TYPE_BOOLEAN",
                                        "TYPE_DECIMAL",
                                        "TYPE_TIMESTAMP"
                                      ]
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "id": {
                          "description": "id is a hash generated from the OracleSpec data.",
                          "type": "string"
                        },
                        "pub_keys": {
                          "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "status": {
                          "description": "status describes the status of the oracle spec",
                          "enum": [
                            [
                              "STATUS_UNSPECIFIED",
                              "STATUS_ACTIVE",
                              "STATUS_DEACTIVATED"
                            ]
                          ],
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "Last Updated timestamp",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "OracleData events",
                      "properties": {
                        "broadcast_at": {
                          "description": "broadcast_at is the time at which the data was broadcast for the first time.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "data": {
                          "description": "data holds all the properties of the oracle data",
                          "items": {
                            "description": "Property describes one property of an oracle spec with a key with its value.",
                            "properties": {
                              "name": {
                                "description": "name is the name of the property.",
                                "type": "string"
                              },
                              "value": {
                                "description": "value is the value of the property.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "matched_spec_ids": {
                          "description": "matched_specs_ids lists all the oracle specs that matched this oracle data.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "pub_keys": {
                          "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Delegation balance events",
                      "properties": {
                        "amount": {
                          "type": "string"
                        },
                        "epoch_seq": {
                          "type": "string"
                        },
                        "node_id": {
                          "type": "string"
                        },
                        "party": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Validator score calculated",
                      "properties": {
                        "epoch_seq": {
                          "type": "string"
                        },
                        "multisig_score": {
                          "type": "string"
                        },
                        "node_id": {
                          "type": "string"
                        },
                        "normalised_score": {
                          "type": "string"
                        },
                        "raw_validator_score": {
                          "type": "string"
                        },
                        "validator_performance": {
                          "type": "string"
                        },
                        "validator_score": {
                          "type": "string"
                        },
                        "validator_status": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Epoch update events - See [Epoch](#vega.Epoch)",
                      "properties": {
                        "action": {
                          "description": "Action tells us what action is taking place",
                          "enum": [
                            [
                              "EPOCH_ACTION_UNSPECIFIED",
                              "EPOCH_ACTION_START",
                              "EPOCH_ACTION_END"
                            ]
                          ],
                          "type": "string"
                        },
                        "end_time": {
                          "description": "What time did it actually end",
                          "format": "int64",
                          "type": "integer"
                        },
                        "expire_time": {
                          "description": "What time should this epoch end",
                          "format": "int64",
                          "type": "integer"
                        },
                        "seq": {
                          "description": "Sequence number that increases by one each epoch",
                          "format": "int64",
                          "type": "integer"
                        },
                        "start_time": {
                          "description": "What time did this epoch start",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Validator update events",
                      "properties": {
                        "added": {
                          "description": "Flag indicating if the validator has been added to or removed from vega",
                          "type": "boolean"
                        },
                        "avatar_url": {
                          "description": "AvatarURL of the validator",
                          "type": "string"
                        },
                        "country": {
                          "description": "Country code (ISO 3166-1 alpha-2) for the location of the node",
                          "type": "string"
                        },
                        "ethereum_address": {
                          "description": "Ethereum public key of validator node",
                          "type": "string"
                        },
                        "from_epoch": {
                          "description": "The epoch from which the validator was added",
                          "format": "int64",
                          "type": "integer"
                        },
                        "info_url": {
                          "description": "URL with more info on the node",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the validator",
                          "type": "string"
                        },
                        "node_id": {
                          "description": "Node id of the node",
                          "type": "string"
                        },
                        "tm_pub_key": {
                          "description": "Public key of Tendermint",
                          "type": "string"
                        },
                        "vega_pub_key": {
                          "description": "Vega public key of validator node",
                          "type": "string"
                        },
                        "vega_pub_key_index": {
                          "description": "Vega public key derivation index",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Staking event",
                      "properties": {
                        "amount": {
                          "description": "The amount of stake deposited or removed",
                          "type": "string"
                        },
                        "finalized_at": {
                          "description": "The time at which the vega network finalized the state of the event",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "The internal ID for this staking event",
                          "type": "string"
                        },
                        "party": {
                          "description": "The party to whom the event is directed at.",
                          "type": "string"
                        },
                        "status": {
                          "description": "The status of the event",
                          "enum": [
                            [
                              "STATUS_UNSPECIFIED",
                              "STATUS_PENDING",
                              "STATUS_ACCEPTED",
                              "STATUS_REJECTED"
                            ]
                          ],
                          "type": "string"
                        },
                        "ts": {
                          "description": "The timestamps at which the event was emitted by ethereum",
                          "format": "int64",
                          "type": "integer"
                        },
                        "tx_hash": {
                          "description": "The hash of the transaction from which the events happen",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of event",
                          "enum": [
                            [
                              "TYPE_UNSPECIFIED",
                              "TYPE_LINK",
                              "TYPE_UNLINK"
                            ]
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Reward payout event",
                      "properties": {
                        "amount": {
                          "type": "string"
                        },
                        "asset": {
                          "type": "string"
                        },
                        "epoch_seq": {
                          "type": "string"
                        },
                        "party": {
                          "type": "string"
                        },
                        "percent_of_total_reward": {
                          "type": "string"
                        },
                        "timestamp": {
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Checkpoint was created",
                      "properties": {
                        "block_hash": {
                          "type": "string"
                        },
                        "block_height": {
                          "format": "int64",
                          "type": "integer"
                        },
                        "hash": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Key rotation took place",
                      "properties": {
                        "block_height": {
                          "description": "Height of the block where key rotation took effect",
                          "format": "int64",
                          "type": "integer"
                        },
                        "new_pub_key": {
                          "description": "New Vega public key of validator node",
                          "type": "string"
                        },
                        "node_id": {
                          "description": "Node id of the node",
                          "type": "string"
                        },
                        "old_pub_key": {
                          "description": "Old Vega public key of validator node",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "State variable consensus state transition update",
                      "properties": {
                        "event_id": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "state": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Network limits events",
                      "properties": {
                        "bootstrap_block_count": {
                          "description": "How many blocks before the chain comes out of bootstrap mode",
                          "format": "int32",
                          "type": "integer"
                        },
                        "bootstrap_finished": {
                          "description": "True once block count \u003e bootstrapBlockCount",
                          "type": "boolean"
                        },
                        "can_propose_asset": {
                          "description": "Are asset proposals allowed at this point in time",
                          "type": "boolean"
                        },
                        "can_propose_market": {
                          "description": "Are market proposals allowed at this point in time",
                          "type": "boolean"
                        },
                        "genesis_loaded": {
                          "description": "True once the genesis file is loaded",
                          "type": "boolean"
                        },
                        "propose_asset_enabled": {
                          "description": "Are asset proposals enabled on this chain",
                          "type": "boolean"
                        },
                        "propose_asset_enabled_from": {
                          "description": "The date/timestamp in unix nanoseconds at which asset proposals will be enabled (0 indicates not set)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "propose_market_enabled": {
                          "description": "Are market proposals enabled on this chain",
                          "type": "boolean"
                        },
                        "propose_market_enabled_from": {
                          "description": "The date/timestamp in unix nanoseconds at which market proposals will be enabled (0 indicates not set)",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Transfer event",
                      "properties": {
                        "amount": {
                          "type": "string"
                        },
                        "asset": {
                          "type": "string"
                        },
                        "from": {
                          "type": "string"
                        },
                        "from_account_type": {
                          "enum": [
                            [
                              "ACCOUNT_TYPE_UNSPECIFIED",
                              "ACCOUNT_TYPE_INSURANCE",
                              "ACCOUNT_TYPE_SETTLEMENT",
                              "ACCOUNT_TYPE_MARGIN",
                              "ACCOUNT_TYPE_GENERAL",
                              "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                              "ACCOUNT_TYPE_FEES_LIQUIDITY",
                              "ACCOUNT_TYPE_FEES_MAKER",
                              "ACCOUNT_TYPE_LOCK_WITHDRAW",
                              "ACCOUNT_TYPE_BOND",
                              "ACCOUNT_TYPE_EXTERNAL",
                              "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                              "ACCOUNT_TYPE_GLOBAL_REWARD",
                              "ACCOUNT_TYPE_PENDING_TRANSFERS",
                              "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                              "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                              "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                              "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                            ]
                          ],
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "kind": {
                          "oneOf": [
                            {
                              "properties": {
                                "deliver_on": {
                                  "format": "int64",
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "end_epoch": {
                                  "properties": {
                                    "value": {
                                      "format": "int64",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "factor": {
                                  "type": "string"
                                },
                                "start_epoch": {
                                  "format": "int64",
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "reference": {
                          "type": "string"
                        },
                        "status": {
                          "enum": [
                            [
                              "STATUS_UNSPECIFIED",
                              "STATUS_PENDING",
                              "STATUS_DONE",
                              "STATUS_REJECTED",
                              "STATUS_STOPPED",
                              "STATUS_CANCELLED"
                            ]
                          ],
                          "type": "string"
                        },
                        "timestamp": {
                          "format": "int64",
                          "type": "integer"
                        },
                        "to": {
                          "type": "string"
                        },
                        "to_account_type": {
                          "enum": [
                            [
                              "ACCOUNT_TYPE_UNSPECIFIED",
                              "ACCOUNT_TYPE_INSURANCE",
                              "ACCOUNT_TYPE_SETTLEMENT",
                              "ACCOUNT_TYPE_MARGIN",
                              "ACCOUNT_TYPE_GENERAL",
                              "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                              "ACCOUNT_TYPE_FEES_LIQUIDITY",
                              "ACCOUNT_TYPE_FEES_MAKER",
                              "ACCOUNT_TYPE_LOCK_WITHDRAW",
                              "ACCOUNT_TYPE_BOND",
                              "ACCOUNT_TYPE_EXTERNAL",
                              "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                              "ACCOUNT_TYPE_GLOBAL_REWARD",
                              "ACCOUNT_TYPE_PENDING_TRANSFERS",
                              "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                              "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                              "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                              "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                            ]
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Ranking event",
                      "properties": {
                        "epoch_seq": {
                          "description": "the epoch seq for which the status is valid",
                          "type": "string"
                        },
                        "next_status": {
                          "description": "the status of the validator in the next epoch",
                          "type": "string"
                        },
                        "node_id": {
                          "type": "string"
                        },
                        "performance_score": {
                          "description": "performance base score",
                          "type": "string"
                        },
                        "previous_status": {
                          "description": "the status of the validator in the previous epoch",
                          "type": "string"
                        },
                        "ranking_score": {
                          "description": "final score",
                          "type": "string"
                        },
                        "stake_score": {
                          "description": "stake based score - no anti-whaling",
                          "type": "string"
                        },
                        "tm_voting_power": {
                          "description": "tendermint voting power of the validator",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Market tick events - See [MarketEvent](#vega.MarketEvent)",
                      "properties": {
                        "market_id": {
                          "description": "Market identifier for the event",
                          "type": "string"
                        },
                        "payload": {
                          "description": "Payload is a unique information string",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "Transaction error events, not included in the ALL event type",
                      "properties": {
                        "err_msg": {
                          "description": "An error message describing what went wrong",
                          "type": "string"
                        },
                        "party_id": {
                          "description": "Unique party identifier for the related party",
                          "type": "string"
                        },
                        "transaction": {
                          "oneOf": [
                            {
                              "properties": {
                                "expires_at": {
                                  "description": "Timestamp for when the order will expire, in nanoseconds since the epoch, required field only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT` - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "market_id": {
                                  "description": "Market identifier for the order, required field",
                                  "type": "string"
                                },
                                "pegged_order": {
                                  "description": "Used to specify the details for a pegged order - See [`PeggedOrder`](#vega.PeggedOrder)",
                                  "properties": {
                                    "offset": {
                                      "description": "Offset from the price reference",
                                      "type": "string"
                                    },
                                    "reference": {
                                      "description": "Which price point are we linked to",
                                      "enum": [
                                        [
                                          "PEGGED_REFERENCE_UNSPECIFIED",
                                          "PEGGED_REFERENCE_MID",
                                          "PEGGED_REFERENCE_BEST_BID",
                                          "PEGGED_REFERENCE_BEST_ASK"
                                        ]
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "price": {
                                  "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places, , required field for limit orders, however it is not required for market orders",
                                  "type": "string"
                                },
                                "reference": {
                                  "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus, currently set internally by the node to return a unique reference identifier for the order submission",
                                  "type": "string"
                                },
                                "side": {
                                  "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL, required field - See [`Side`](#vega.Side)",
                                  "enum": [
                                    [
                                      "SIDE_UNSPECIFIED",
                                      "SIDE_BUY",
                                      "SIDE_SELL"
                                    ]
                                  ],
                                  "type": "string"
                                },
                                "size": {
                                  "description": "Size for the order, for example, in a futures market the size equals the number of contracts, cannot be negative",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "time_in_force": {
                                  "description": "Time in force indicates how long an order will remain active before it is executed or expires, required field - See [`Order.TimeInForce`](#vega.Order.TimeInForce)",
                                  "enum": [
                                    [
                                      "TIME_IN_FORCE_UNSPECIFIED",
                                      "TIME_IN_FORCE_GTC",
                                      "TIME_IN_FORCE_GTT",
                                      "TIME_IN_FORCE_IOC",
                                      "TIME_IN_FORCE_FOK",
                                      "TIME_IN_FORCE_GFA",
                                      "TIME_IN_FORCE_GFN"
                                    ]
                                  ],
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Type for the order, required field - See [`Order.Type`](#vega.Order.Type)",
                                  "enum": [
                                    [
                                      "TYPE_UNSPECIFIED",
                                      "TYPE_LIMIT",
                                      "TYPE_MARKET",
                                      "TYPE_NETWORK"
                                    ]
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "expires_at": {
                                  "description": "Amend the expiry time for the order, if the Timestamp value is set, otherwise expiry time will remain unchanged - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                                  "properties": {
                                    "value": {
                                      "description": "Timestamp value",
                                      "format": "int64",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "market_id": {
                                  "description": "Market identifier, this is required to find the order and will not be updated",
                                  "type": "string"
                                },
                                "order_id": {
                                  "description": "Order identifier, this is required to find the order and will not be updated, required field",
                                  "type": "string"
                                },
                                "pegged_offset": {
                                  "description": "Amend the pegged order offset for the order",
                                  "type": "string"
                                },
                                "pegged_reference": {
                                  "description": "Amend the pegged order reference for the order - See [`PeggedReference`](#vega.PeggedReference)",
                                  "enum": [
                                    [
                                      "PEGGED_REFERENCE_UNSPECIFIED",
                                      "PEGGED_REFERENCE_MID",
                                      "PEGGED_REFERENCE_BEST_BID",
                                      "PEGGED_REFERENCE_BEST_ASK"
                                    ]
                                  ],
                                  "type": "string"
                                },
                                "price": {
                                  "description": "Amend the price for the order, if the Price value is set, otherwise price will remain unchanged - See [`Price`](#vega.Price)",
                                  "properties": {
                                    "value": {
                                      "description": "Price value, given as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "size_delta": {
                                  "description": "Amend the size for the order by the delta specified: - To reduce the size from the current value set a negative integer value - To increase the size from the current value, set a positive integer value - To leave the size unchanged set a value of zero",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "time_in_force": {
                                  "description": "Amend the time in force for the order, set to TIME_IN_FORCE_UNSPECIFIED to remain unchanged - See [`TimeInForce`](#api.VegaTimeResponse).`timestamp`",
                                  "enum": [
                                    [
                                      "TIME_IN_FORCE_UNSPECIFIED",
                                      "TIME_IN_FORCE_GTC",
                                      "TIME_IN_FORCE_GTT",
                                      "TIME_IN_FORCE_IOC",
                                      "TIME_IN_FORCE_FOK",
                                      "TIME_IN_FORCE_GFA",
                                      "TIME_IN_FORCE_GFN"
                                    ]
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "market_id": {
                                  "description": "Market identifier for the order, required field",
                                  "type": "string"
                                },
                                "order_id": {
                                  "description": "Unique identifier for the order (set by the system after consensus), required field",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "reference": {
                                  "description": "Proposal reference",
                                  "type": "string"
                                },
                                "terms": {
                                  "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted",
                                  "properties": {
                                    "change": {
                                      "oneOf": [
                                        {
                                          "description": "Proposal change for modifying an existing market on Vega",
                                          "type": "object"
                                        },
                                        {
                                          "description": "Proposal change for creating new market on Vega",
                                          "properties": {
                                            "changes": {
                                              "description": "The configuration of the new market",
                                              "properties": {
                                                "decimal_places": {
                                                  "description": "Decimal places used for the new market",
                                                  "format": "int64",
                                                  "type": "integer"
                                                },
                                                "instrument": {
                                                  "description": "New market instrument configuration",
                                                  "properties": {
                                                    "code": {
                                                      "description": "Instrument code",
                                                      "type": "string"
                                                    },
                                                    "name": {
                                                      "description": "Instrument name",
                                                      "type": "string"
                                                    },
                                                    "product": {
                                                      "oneOf": [
                                                        {
                                                          "description": "Future",
                                                          "properties": {
                                                            "oracle_spec_binding": {
                                                              "description": "The binding between the oracle spec and the settlement price",
                                                              "properties": {
                                                                "settlement_price_property": {
                                                                  "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                                                  "type": "string"
                                                                },
                                                                "trading_termination_property": {
                                                                  "description": "the name of the property in the oracle data that signals termination of trading",
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "oracle_spec_for_settlement_price": {
                                                              "description": "The oracle spec describing the oracle data of settlement price",
                                                              "properties": {
                                                                "filters": {
                                                                  "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                                  "items": {
                                                                    "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                                    "properties": {
                                                                      "conditions": {
                                                                        "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                                        "items": {
                                                                          "description": "Condition describes the condition that must be validated by the",
                                                                          "properties": {
                                                                            "operator": {
                                                                              "description": "comparator is the type of comparison to make on the value.",
                                                                              "enum": [
                                                                                [
                                                                                  "OPERATOR_UNSPECIFIED",
                                                                                  "OPERATOR_EQUALS",
                                                                                  "OPERATOR_GREATER_THAN",
                                                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                                  "OPERATOR_LESS_THAN",
                                                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                                ]
                                                                              ],
                                                                              "type": "string"
                                                                            },
                                                                            "value": {
                                                                              "description": "value is used by the comparator.",
                                                                              "type": "string"
                                                                            }
                                                                          },
                                                                          "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                      },
                                                                      "key": {
                                                                        "description": "key is the oracle data property key targeted by the filter.",
                                                                        "properties": {
                                                                          "name": {
                                                                            "description": "name is the name of the property.",
                                                                            "type": "string"
                                                                          },
                                                                          "type": {
                                                                            "description": "type is the type of the property.",
                                                                            "enum": [
                                                                              [
                                                                                "TYPE_UNSPECIFIED",
                                                                                "TYPE_EMPTY",
                                                                                "TYPE_INTEGER",
                                                                                "TYPE_STRING",
                                                                                "TYPE_BOOLEAN",
                                                                                "TYPE_DECIMAL",
                                                                                "TYPE_TIMESTAMP"
                                                                              ]
                                                                            ],
                                                                            "type": "string"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  },
                                                                  "type": "array"
                                                                },
                                                                "pub_keys": {
                                                                  "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                                  "items": {
                                                                    "type": "string"
                                                                  },
                                                                  "type": "array"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "oracle_spec_for_trading_termination": {
                                                              "description": "The oracle spec describing the oracle data of trading termination",
                                                              "properties": {
                                                                "filters": {
                                                                  "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                                  "items": {
                                                                    "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                                    "properties": {
                                                                      "conditions": {
                                                                        "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                                        "items": {
                                                                          "description": "Condition describes the condition that must be validated by the",
                                                                          "properties": {
                                                                            "operator": {
                                                                              "description": "comparator is the type of comparison to make on the value.",
                                                                              "enum": [
                                                                                [
                                                                                  "OPERATOR_UNSPECIFIED",
                                                                                  "OPERATOR_EQUALS",
                                                                                  "OPERATOR_GREATER_THAN",
                                                                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                                  "OPERATOR_LESS_THAN",
                                                                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                                ]
                                                                              ],
                                                                              "type": "string"
                                                                            },
                                                                            "value": {
                                                                              "description": "value is used by the comparator.",
                                                                              "type": "string"
                                                                            }
                                                                          },
                                                                          "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                      },
                                                                      "key": {
                                                                        "description": "key is the oracle data property key targeted by the filter.",
                                                                        "properties": {
                                                                          "name": {
                                                                            "description": "name is the name of the property.",
                                                                            "type": "string"
                                                                          },
                                                                          "type": {
                                                                            "description": "type is the type of the property.",
                                                                            "enum": [
                                                                              [
                                                                                "TYPE_UNSPECIFIED",
                                                                                "TYPE_EMPTY",
                                                                                "TYPE_INTEGER",
                                                                                "TYPE_STRING",
                                                                                "TYPE_BOOLEAN",
                                                                                "TYPE_DECIMAL",
                                                                                "TYPE_TIMESTAMP"
                                                                              ]
                                                                            ],
                                                                            "type": "string"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      }
                                                                    },
                                                                    "type": "object"
                                                                  },
                                                                  "type": "array"
                                                                },
                                                                "pub_keys": {
                                                                  "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                                  "items": {
                                                                    "type": "string"
                                                                  },
                                                                  "type": "array"
                                                                }
                                                              },
                                                              "type": "object"
                                                            },
                                                            "quote_name": {
                                                              "description": "Product quote name",
                                                              "type": "string"
                                                            },
                                                            "settlement_asset": {
                                                              "description": "Product settlement asset identifier",
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "liquidity_monitoring_parameters": {
                                                  "description": "Liquidity monitoring parameters",
                                                  "properties": {
                                                    "auction_extension": {
                                                      "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                                                      "format": "int64",
                                                      "type": "integer"
                                                    },
                                                    "target_stake_parameters": {
                                                      "description": "Specifies parameters related to target stake calculation",
                                                      "properties": {
                                                        "scaling_factor": {
                                                          "description": "Specifies scaling factors used in target stake calculation",
                                                          "type": "number"
                                                        },
                                                        "time_window": {
                                                          "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                                          "format": "int64",
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "triggering_ratio": {
                                                      "description": "Specifies the triggering ratio for entering liquidity auction",
                                                      "type": "number"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "metadata": {
                                                  "description": "Optional new market meta data, tags",
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "price_monitoring_parameters": {
                                                  "description": "Price monitoring parameters",
                                                  "properties": {
                                                    "triggers": {
                                                      "items": {
                                                        "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                                        "properties": {
                                                          "auction_extension": {
                                                            "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                                            "format": "int64",
                                                            "type": "integer"
                                                          },
                                                          "horizon": {
                                                            "description": "Price monitoring projection horizon τ in seconds",
                                                            "format": "int64",
                                                            "type": "integer"
                                                          },
                                                          "probability": {
                                                            "description": "Price monitoring probability level p",
                                                            "type": "number"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "risk_parameters": {
                                                  "oneOf": [
                                                    {
                                                      "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                                                      "properties": {
                                                        "factor_long": {
                                                          "description": "Pre-defined risk factor value for long",
                                                          "type": "number"
                                                        },
                                                        "factor_short": {
                                                          "description": "Pre-defined risk factor value for short",
                                                          "type": "number"
                                                        },
                                                        "max_move_up": {
                                                          "description": "Pre-defined maximum price move up that the model considers as valid",
                                                          "type": "number"
                                                        },
                                                        "min_move_down": {
                                                          "description": "Pre-defined minimum price move down that the model considers as valid",
                                                          "type": "number"
                                                        },
                                                        "probability_of_trading": {
                                                          "description": "Pre-defined constant probability of trading",
                                                          "type": "number"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    {
                                                      "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                                                      "properties": {
                                                        "params": {
                                                          "description": "Risk model parameters for log normal",
                                                          "properties": {
                                                            "mu": {
                                                              "description": "Mu param",
                                                              "type": "number"
                                                            },
                                                            "r": {
                                                              "description": "R param",
                                                              "type": "number"
                                                            },
                                                            "sigma": {
                                                              "description": "Sigma param",
                                                              "type": "number"
                                                            }
                                                          },
                                                          "type": "object"
                                                        },
                                                        "risk_aversion_parameter": {
                                                          "description": "Risk Aversion Parameter",
                                                          "type": "number"
                                                        },
                                                        "tau": {
                                                          "description": "Tau",
                                                          "type": "number"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  ]
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "liquidity_commitment": {
                                              "description": "The commitment from the party creating the NewMarket proposal",
                                              "properties": {
                                                "buys": {
                                                  "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                                                  "items": {
                                                    "description": "Represents a liquidity order",
                                                    "properties": {
                                                      "offset": {
                                                        "description": "The offset/amount of units away for the order",
                                                        "type": "string"
                                                      },
                                                      "proportion": {
                                                        "description": "The relative proportion of the commitment to be allocated at a price level",
                                                        "format": "int32",
                                                        "type": "integer"
                                                      },
                                                      "reference": {
                                                        "description": "The pegged reference point for the order",
                                                        "enum": [
                                                          [
                                                            "PEGGED_REFERENCE_UNSPECIFIED",
                                                            "PEGGED_REFERENCE_MID",
                                                            "PEGGED_REFERENCE_BEST_BID",
                                                            "PEGGED_REFERENCE_BEST_ASK"
                                                          ]
                                                        ],
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "type": "array"
                                                },
                                                "commitment_amount": {
                                                  "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                                                  "type": "string"
                                                },
                                                "fee": {
                                                  "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                                                  "type": "string"
                                                },
                                                "reference": {
                                                  "description": "A reference to be associated to all orders created from this commitment",
                                                  "type": "string"
                                                },
                                                "sells": {
                                                  "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                                                  "items": {
                                                    "description": "Represents a liquidity order",
                                                    "properties": {
                                                      "offset": {
                                                        "description": "The offset/amount of units away for the order",
                                                        "type": "string"
                                                      },
                                                      "proportion": {
                                                        "description": "The relative proportion of the commitment to be allocated at a price level",
                                                        "format": "int32",
                                                        "type": "integer"
                                                      },
                                                      "reference": {
                                                        "description": "The pegged reference point for the order",
                                                        "enum": [
                                                          [
                                                            "PEGGED_REFERENCE_UNSPECIFIED",
                                                            "PEGGED_REFERENCE_MID",
                                                            "PEGGED_REFERENCE_BEST_BID",
                                                            "PEGGED_REFERENCE_BEST_ASK"
                                                          ]
                                                        ],
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "type": "array"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "Proposal change for updating Vega network parameters",
                                          "properties": {
                                            "changes": {
                                              "description": "The network parameter to update",
                                              "properties": {
                                                "key": {
                                                  "description": "The unique key",
                                                  "type": "string"
                                                },
                                                "value": {
                                                  "description": "The value for the network parameter",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "Proposal change for creating new assets on Vega",
                                          "properties": {
                                            "changes": {
                                              "description": "The configuration of the new asset",
                                              "properties": {
                                                "decimals": {
                                                  "description": "Number of decimal / precision handled by this asset",
                                                  "format": "int64",
                                                  "type": "integer"
                                                },
                                                "name": {
                                                  "description": "Name of the asset (e.g: Great British Pound)",
                                                  "type": "string"
                                                },
                                                "quantum": {
                                                  "description": "The minimum economically meaningful amount in the asset",
                                                  "type": "string"
                                                },
                                                "source": {
                                                  "oneOf": [
                                                    {
                                                      "description": "A built-in asset",
                                                      "properties": {
                                                        "max_faucet_amount_mint": {
                                                          "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    {
                                                      "description": "An Ethereum ERC20 asset",
                                                      "properties": {
                                                        "contract_address": {
                                                          "description": "The address of the contract for the token, on the ethereum network",
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  ]
                                                },
                                                "symbol": {
                                                  "description": "Symbol of the asset (e.g: GBP)",
                                                  "type": "string"
                                                },
                                                "total_supply": {
                                                  "description": "Total circulating supply for the asset",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        {
                                          "description": "Proposal change for a freeform voting thing",
                                          "properties": {
                                            "changes": {
                                              "description": "The configuration of the new freeform",
                                              "properties": {
                                                "description": {
                                                  "description": "A short description of what is being proposed",
                                                  "type": "string"
                                                },
                                                "hash": {
                                                  "description": "The hash on the content of the URL",
                                                  "type": "string"
                                                },
                                                "url": {
                                                  "description": "The URL containing content that describes the proposal",
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    },
                                    "closing_timestamp": {
                                      "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "enactment_timestamp": {
                                      "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "validation_timestamp": {
                                      "description": "Validation timestamp (Unix time in seconds)",
                                      "format": "int64",
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "proposal_id": {
                                  "description": "The ID of the proposal to vote for.",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The actual value of the vote",
                                  "enum": [
                                    [
                                      "VALUE_UNSPECIFIED",
                                      "VALUE_NO",
                                      "VALUE_YES"
                                    ]
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "buys": {
                                  "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                                  "items": {
                                    "description": "Represents a liquidity order",
                                    "properties": {
                                      "offset": {
                                        "description": "The offset/amount of units away for the order",
                                        "type": "string"
                                      },
                                      "proportion": {
                                        "description": "The relative proportion of the commitment to be allocated at a price level",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "reference": {
                                        "description": "The pegged reference point for the order",
                                        "enum": [
                                          [
                                            "PEGGED_REFERENCE_UNSPECIFIED",
                                            "PEGGED_REFERENCE_MID",
                                            "PEGGED_REFERENCE_BEST_BID",
                                            "PEGGED_REFERENCE_BEST_ASK"
                                          ]
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "commitment_amount": {
                                  "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                                  "type": "string"
                                },
                                "fee": {
                                  "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                                  "type": "string"
                                },
                                "market_id": {
                                  "description": "Market identifier for the order, required field",
                                  "type": "string"
                                },
                                "reference": {
                                  "description": "A reference to be added to every order created out of this liquidityProvisionSubmission",
                                  "type": "string"
                                },
                                "sells": {
                                  "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                                  "items": {
                                    "description": "Represents a liquidity order",
                                    "properties": {
                                      "offset": {
                                        "description": "The offset/amount of units away for the order",
                                        "type": "string"
                                      },
                                      "proportion": {
                                        "description": "The relative proportion of the commitment to be allocated at a price level",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "reference": {
                                        "description": "The pegged reference point for the order",
                                        "enum": [
                                          [
                                            "PEGGED_REFERENCE_UNSPECIFIED",
                                            "PEGGED_REFERENCE_MID",
                                            "PEGGED_REFERENCE_BEST_BID",
                                            "PEGGED_REFERENCE_BEST_ASK"
                                          ]
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "amount": {
                                  "description": "The amount to be withdrawn",
                                  "type": "string"
                                },
                                "asset": {
                                  "description": "The asset we want to withdraw",
                                  "type": "string"
                                },
                                "ext": {
                                  "description": "Foreign chain specifics",
                                  "properties": {
                                    "ext": {
                                      "oneOf": [
                                        {
                                          "description": "ERC20 withdrawal details",
                                          "properties": {
                                            "receiver_address": {
                                              "description": "The address into which the bridge will release the funds",
                                              "type": "string"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "amount": {
                                  "description": "The amount of stake to delegate",
                                  "type": "string"
                                },
                                "node_id": {
                                  "description": "The ID for the node to delegate to",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "amount": {
                                  "description": "optional, if not specified = ALL",
                                  "type": "string"
                                },
                                "method": {
                                  "enum": [
                                    [
                                      "METHOD_UNSPECIFIED",
                                      "METHOD_NOW",
                                      "METHOD_AT_END_OF_EPOCH",
                                      "METHOD_IN_ANGER"
                                    ]
                                  ],
                                  "type": "string"
                                },
                                "node_id": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "data": {
                                  "format": "byte",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "market_id": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "buys": {
                                  "items": {
                                    "description": "Represents a liquidity order",
                                    "properties": {
                                      "offset": {
                                        "description": "The offset/amount of units away for the order",
                                        "type": "string"
                                      },
                                      "proportion": {
                                        "description": "The relative proportion of the commitment to be allocated at a price level",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "reference": {
                                        "description": "The pegged reference point for the order",
                                        "enum": [
                                          [
                                            "PEGGED_REFERENCE_UNSPECIFIED",
                                            "PEGGED_REFERENCE_MID",
                                            "PEGGED_REFERENCE_BEST_BID",
                                            "PEGGED_REFERENCE_BEST_ASK"
                                          ]
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "commitment_amount": {
                                  "description": "From here at least one of the following is required to consider the command valid",
                                  "type": "string"
                                },
                                "fee": {
                                  "type": "string"
                                },
                                "market_id": {
                                  "type": "string"
                                },
                                "reference": {
                                  "type": "string"
                                },
                                "sells": {
                                  "items": {
                                    "description": "Represents a liquidity order",
                                    "properties": {
                                      "offset": {
                                        "description": "The offset/amount of units away for the order",
                                        "type": "string"
                                      },
                                      "proportion": {
                                        "description": "The relative proportion of the commitment to be allocated at a price level",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "reference": {
                                        "description": "The pegged reference point for the order",
                                        "enum": [
                                          [
                                            "PEGGED_REFERENCE_UNSPECIFIED",
                                            "PEGGED_REFERENCE_MID",
                                            "PEGGED_REFERENCE_BEST_BID",
                                            "PEGGED_REFERENCE_BEST_ASK"
                                          ]
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "amount": {
                                  "description": "The amount to be taken from the source account",
                                  "type": "string"
                                },
                                "asset": {
                                  "description": "The asset",
                                  "type": "string"
                                },
                                "from_account_type": {
                                  "description": "The account type from which the funds of the party should be taken",
                                  "enum": [
                                    [
                                      "ACCOUNT_TYPE_UNSPECIFIED",
                                      "ACCOUNT_TYPE_INSURANCE",
                                      "ACCOUNT_TYPE_SETTLEMENT",
                                      "ACCOUNT_TYPE_MARGIN",
                                      "ACCOUNT_TYPE_GENERAL",
                                      "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                                      "ACCOUNT_TYPE_FEES_LIQUIDITY",
                                      "ACCOUNT_TYPE_FEES_MAKER",
                                      "ACCOUNT_TYPE_LOCK_WITHDRAW",
                                      "ACCOUNT_TYPE_BOND",
                                      "ACCOUNT_TYPE_EXTERNAL",
                                      "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                                      "ACCOUNT_TYPE_GLOBAL_REWARD",
                                      "ACCOUNT_TYPE_PENDING_TRANSFERS",
                                      "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                                      "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                                      "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                                      "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                                    ]
                                  ],
                                  "type": "string"
                                },
                                "kind": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "deliver_on": {
                                          "description": "A unix timestamp in second. Time at which the transfer should be delivered in the to account",
                                          "format": "int64",
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "end_epoch": {
                                          "description": "The last epoch at which this transfer shall be paid",
                                          "properties": {
                                            "value": {
                                              "format": "int64",
                                              "type": "integer"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "factor": {
                                          "description": "factor needs to be \u003e 0",
                                          "type": "string"
                                        },
                                        "start_epoch": {
                                          "description": "The first epoch from which this transfer shall be paid",
                                          "format": "int64",
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  ]
                                },
                                "reference": {
                                  "description": "The reference to be attached to the transfer",
                                  "type": "string"
                                },
                                "to": {
                                  "description": "The public key of the destination account",
                                  "type": "string"
                                },
                                "to_account_type": {
                                  "description": "The type of the destination account",
                                  "enum": [
                                    [
                                      "ACCOUNT_TYPE_UNSPECIFIED",
                                      "ACCOUNT_TYPE_INSURANCE",
                                      "ACCOUNT_TYPE_SETTLEMENT",
                                      "ACCOUNT_TYPE_MARGIN",
                                      "ACCOUNT_TYPE_GENERAL",
                                      "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                                      "ACCOUNT_TYPE_FEES_LIQUIDITY",
                                      "ACCOUNT_TYPE_FEES_MAKER",
                                      "ACCOUNT_TYPE_LOCK_WITHDRAW",
                                      "ACCOUNT_TYPE_BOND",
                                      "ACCOUNT_TYPE_EXTERNAL",
                                      "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                                      "ACCOUNT_TYPE_GLOBAL_REWARD",
                                      "ACCOUNT_TYPE_PENDING_TRANSFERS",
                                      "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                                      "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                                      "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                                      "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                                    ]
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "properties": {
                                "transfer_id": {
                                  "description": "The ID of the transfer to cancel",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  ]
                },
                "id": {
                  "description": "A unique event identifier for the message",
                  "type": "string"
                },
                "tx_hash": {
                  "type": "string"
                },
                "type": {
                  "description": "The type of bus event (one of the list below)",
                  "enum": [
                    [
                      "BUS_EVENT_TYPE_UNSPECIFIED",
                      "BUS_EVENT_TYPE_ALL",
                      "BUS_EVENT_TYPE_TIME_UPDATE",
                      "BUS_EVENT_TYPE_TRANSFER_RESPONSES",
                      "BUS_EVENT_TYPE_POSITION_RESOLUTION",
                      "BUS_EVENT_TYPE_ORDER",
                      "BUS_EVENT_TYPE_ACCOUNT",
                      "BUS_EVENT_TYPE_PARTY",
                      "BUS_EVENT_TYPE_TRADE",
                      "BUS_EVENT_TYPE_MARGIN_LEVELS",
                      "BUS_EVENT_TYPE_PROPOSAL",
                      "BUS_EVENT_TYPE_VOTE",
                      "BUS_EVENT_TYPE_MARKET_DATA",
                      "BUS_EVENT_TYPE_NODE_SIGNATURE",
                      "BUS_EVENT_TYPE_LOSS_SOCIALIZATION",
                      "BUS_EVENT_TYPE_SETTLE_POSITION",
                      "BUS_EVENT_TYPE_SETTLE_DISTRESSED",
                      "BUS_EVENT_TYPE_MARKET_CREATED",
                      "BUS_EVENT_TYPE_ASSET",
                      "BUS_EVENT_TYPE_MARKET_TICK",
                      "BUS_EVENT_TYPE_WITHDRAWAL",
                      "BUS_EVENT_TYPE_DEPOSIT",
                      "BUS_EVENT_TYPE_AUCTION",
                      "BUS_EVENT_TYPE_RISK_FACTOR",
                      "BUS_EVENT_TYPE_NETWORK_PARAMETER",
                      "BUS_EVENT_TYPE_LIQUIDITY_PROVISION",
                      "BUS_EVENT_TYPE_MARKET_UPDATED",
                      "BUS_EVENT_TYPE_ORACLE_SPEC",
                      "BUS_EVENT_TYPE_ORACLE_DATA",
                      "BUS_EVENT_TYPE_DELEGATION_BALANCE",
                      "BUS_EVENT_TYPE_VALIDATOR_SCORE",
                      "BUS_EVENT_TYPE_EPOCH_UPDATE",
                      "BUS_EVENT_TYPE_VALIDATOR_UPDATE",
                      "BUS_EVENT_TYPE_STAKE_LINKING",
                      "BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT",
                      "BUS_EVENT_TYPE_CHECKPOINT",
                      "BUS_EVENT_TYPE_STREAM_START",
                      "BUS_EVENT_TYPE_KEY_ROTATION",
                      "BUS_EVENT_TYPE_STATE_VAR",
                      "BUS_EVENT_TYPE_NETWORK_LIMITS",
                      "BUS_EVENT_TYPE_TRANSFER",
                      "BUS_EVENT_TYPE_VALIDATOR_RANKING",
                      "BUS_EVENT_TYPE_MARKET",
                      "BUS_EVENT_TYPE_TX_ERROR"
                    ]
                  ],
                  "type": "string"
                },
                "version": {
                  "description": "Version of bus event",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.ObserveGovernanceRequest": {
        "description": "Request to obsever all event related to governance",
        "type": "object"
      },
      "datanode.api.v1.ObserveGovernanceResponse": {
        "description": "All events related to governance",
        "properties": {
          "data": {
            "properties": {
              "no": {
                "description": "All \"no\" votes against the proposal above",
                "items": {
                  "description": "Governance vote",
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "no_party": {
                "additionalProperties": {
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "description": "All latest NO votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                "type": "object"
              },
              "proposal": {
                "description": "The governance proposal",
                "properties": {
                  "error_details": {
                    "description": "The detailed error associated to the reason.",
                    "type": "string"
                  },
                  "id": {
                    "description": "Unique proposal identifier",
                    "type": "string"
                  },
                  "party_id": {
                    "description": "Party identifier of the author (the party submitting the proposal)",
                    "type": "string"
                  },
                  "reason": {
                    "description": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses",
                    "enum": [
                      [
                        "PROPOSAL_ERROR_UNSPECIFIED",
                        "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
                        "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
                        "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
                        "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
                        "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
                        "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
                        "PROPOSAL_ERROR_NO_PRODUCT",
                        "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
                        "PROPOSAL_ERROR_NO_TRADING_MODE",
                        "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
                        "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
                        "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
                        "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
                        "PROPOSAL_ERROR_INVALID_ASSET",
                        "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
                        "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
                        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
                        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
                        "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
                        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
                        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
                        "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
                        "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
                        "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
                        "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
                        "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
                        "PROPOSAL_ERROR_INVALID_SHAPE",
                        "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
                        "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
                        "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
                        "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
                      ]
                    ],
                    "type": "string"
                  },
                  "reference": {
                    "description": "Proposal reference",
                    "type": "string"
                  },
                  "state": {
                    "description": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition",
                    "enum": [
                      [
                        "STATE_UNSPECIFIED",
                        "STATE_FAILED",
                        "STATE_OPEN",
                        "STATE_PASSED",
                        "STATE_REJECTED",
                        "STATE_DECLINED",
                        "STATE_ENACTED",
                        "STATE_WAITING_FOR_NODE_VOTE"
                      ]
                    ],
                    "type": "string"
                  },
                  "terms": {
                    "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted",
                    "properties": {
                      "change": {
                        "oneOf": [
                          {
                            "description": "Proposal change for modifying an existing market on Vega",
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for creating new market on Vega",
                            "properties": {
                              "changes": {
                                "description": "The configuration of the new market",
                                "properties": {
                                  "decimal_places": {
                                    "description": "Decimal places used for the new market",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "instrument": {
                                    "description": "New market instrument configuration",
                                    "properties": {
                                      "code": {
                                        "description": "Instrument code",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Instrument name",
                                        "type": "string"
                                      },
                                      "product": {
                                        "oneOf": [
                                          {
                                            "description": "Future",
                                            "properties": {
                                              "oracle_spec_binding": {
                                                "description": "The binding between the oracle spec and the settlement price",
                                                "properties": {
                                                  "settlement_price_property": {
                                                    "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                                    "type": "string"
                                                  },
                                                  "trading_termination_property": {
                                                    "description": "the name of the property in the oracle data that signals termination of trading",
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "oracle_spec_for_settlement_price": {
                                                "description": "The oracle spec describing the oracle data of settlement price",
                                                "properties": {
                                                  "filters": {
                                                    "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                    "items": {
                                                      "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                      "properties": {
                                                        "conditions": {
                                                          "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                          "items": {
                                                            "description": "Condition describes the condition that must be validated by the",
                                                            "properties": {
                                                              "operator": {
                                                                "description": "comparator is the type of comparison to make on the value.",
                                                                "enum": [
                                                                  [
                                                                    "OPERATOR_UNSPECIFIED",
                                                                    "OPERATOR_EQUALS",
                                                                    "OPERATOR_GREATER_THAN",
                                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                    "OPERATOR_LESS_THAN",
                                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              },
                                                              "value": {
                                                                "description": "value is used by the comparator.",
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          },
                                                          "type": "array"
                                                        },
                                                        "key": {
                                                          "description": "key is the oracle data property key targeted by the filter.",
                                                          "properties": {
                                                            "name": {
                                                              "description": "name is the name of the property.",
                                                              "type": "string"
                                                            },
                                                            "type": {
                                                              "description": "type is the type of the property.",
                                                              "enum": [
                                                                [
                                                                  "TYPE_UNSPECIFIED",
                                                                  "TYPE_EMPTY",
                                                                  "TYPE_INTEGER",
                                                                  "TYPE_STRING",
                                                                  "TYPE_BOOLEAN",
                                                                  "TYPE_DECIMAL",
                                                                  "TYPE_TIMESTAMP"
                                                                ]
                                                              ],
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "pub_keys": {
                                                    "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "oracle_spec_for_trading_termination": {
                                                "description": "The oracle spec describing the oracle data of trading termination",
                                                "properties": {
                                                  "filters": {
                                                    "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                    "items": {
                                                      "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                      "properties": {
                                                        "conditions": {
                                                          "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                          "items": {
                                                            "description": "Condition describes the condition that must be validated by the",
                                                            "properties": {
                                                              "operator": {
                                                                "description": "comparator is the type of comparison to make on the value.",
                                                                "enum": [
                                                                  [
                                                                    "OPERATOR_UNSPECIFIED",
                                                                    "OPERATOR_EQUALS",
                                                                    "OPERATOR_GREATER_THAN",
                                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                    "OPERATOR_LESS_THAN",
                                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              },
                                                              "value": {
                                                                "description": "value is used by the comparator.",
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          },
                                                          "type": "array"
                                                        },
                                                        "key": {
                                                          "description": "key is the oracle data property key targeted by the filter.",
                                                          "properties": {
                                                            "name": {
                                                              "description": "name is the name of the property.",
                                                              "type": "string"
                                                            },
                                                            "type": {
                                                              "description": "type is the type of the property.",
                                                              "enum": [
                                                                [
                                                                  "TYPE_UNSPECIFIED",
                                                                  "TYPE_EMPTY",
                                                                  "TYPE_INTEGER",
                                                                  "TYPE_STRING",
                                                                  "TYPE_BOOLEAN",
                                                                  "TYPE_DECIMAL",
                                                                  "TYPE_TIMESTAMP"
                                                                ]
                                                              ],
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "pub_keys": {
                                                    "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "quote_name": {
                                                "description": "Product quote name",
                                                "type": "string"
                                              },
                                              "settlement_asset": {
                                                "description": "Product settlement asset identifier",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "liquidity_monitoring_parameters": {
                                    "description": "Liquidity monitoring parameters",
                                    "properties": {
                                      "auction_extension": {
                                        "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "target_stake_parameters": {
                                        "description": "Specifies parameters related to target stake calculation",
                                        "properties": {
                                          "scaling_factor": {
                                            "description": "Specifies scaling factors used in target stake calculation",
                                            "type": "number"
                                          },
                                          "time_window": {
                                            "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                            "format": "int64",
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "triggering_ratio": {
                                        "description": "Specifies the triggering ratio for entering liquidity auction",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "metadata": {
                                    "description": "Optional new market meta data, tags",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "price_monitoring_parameters": {
                                    "description": "Price monitoring parameters",
                                    "properties": {
                                      "triggers": {
                                        "items": {
                                          "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                          "properties": {
                                            "auction_extension": {
                                              "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                              "format": "int64",
                                              "type": "integer"
                                            },
                                            "horizon": {
                                              "description": "Price monitoring projection horizon τ in seconds",
                                              "format": "int64",
                                              "type": "integer"
                                            },
                                            "probability": {
                                              "description": "Price monitoring probability level p",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "risk_parameters": {
                                    "oneOf": [
                                      {
                                        "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                                        "properties": {
                                          "factor_long": {
                                            "description": "Pre-defined risk factor value for long",
                                            "type": "number"
                                          },
                                          "factor_short": {
                                            "description": "Pre-defined risk factor value for short",
                                            "type": "number"
                                          },
                                          "max_move_up": {
                                            "description": "Pre-defined maximum price move up that the model considers as valid",
                                            "type": "number"
                                          },
                                          "min_move_down": {
                                            "description": "Pre-defined minimum price move down that the model considers as valid",
                                            "type": "number"
                                          },
                                          "probability_of_trading": {
                                            "description": "Pre-defined constant probability of trading",
                                            "type": "number"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      {
                                        "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                                        "properties": {
                                          "params": {
                                            "description": "Risk model parameters for log normal",
                                            "properties": {
                                              "mu": {
                                                "description": "Mu param",
                                                "type": "number"
                                              },
                                              "r": {
                                                "description": "R param",
                                                "type": "number"
                                              },
                                              "sigma": {
                                                "description": "Sigma param",
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "risk_aversion_parameter": {
                                            "description": "Risk Aversion Parameter",
                                            "type": "number"
                                          },
                                          "tau": {
                                            "description": "Tau",
                                            "type": "number"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "liquidity_commitment": {
                                "description": "The commitment from the party creating the NewMarket proposal",
                                "properties": {
                                  "buys": {
                                    "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                                    "items": {
                                      "description": "Represents a liquidity order",
                                      "properties": {
                                        "offset": {
                                          "description": "The offset/amount of units away for the order",
                                          "type": "string"
                                        },
                                        "proportion": {
                                          "description": "The relative proportion of the commitment to be allocated at a price level",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "reference": {
                                          "description": "The pegged reference point for the order",
                                          "enum": [
                                            [
                                              "PEGGED_REFERENCE_UNSPECIFIED",
                                              "PEGGED_REFERENCE_MID",
                                              "PEGGED_REFERENCE_BEST_BID",
                                              "PEGGED_REFERENCE_BEST_ASK"
                                            ]
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "commitment_amount": {
                                    "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                                    "type": "string"
                                  },
                                  "fee": {
                                    "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                                    "type": "string"
                                  },
                                  "reference": {
                                    "description": "A reference to be associated to all orders created from this commitment",
                                    "type": "string"
                                  },
                                  "sells": {
                                    "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                                    "items": {
                                      "description": "Represents a liquidity order",
                                      "properties": {
                                        "offset": {
                                          "description": "The offset/amount of units away for the order",
                                          "type": "string"
                                        },
                                        "proportion": {
                                          "description": "The relative proportion of the commitment to be allocated at a price level",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "reference": {
                                          "description": "The pegged reference point for the order",
                                          "enum": [
                                            [
                                              "PEGGED_REFERENCE_UNSPECIFIED",
                                              "PEGGED_REFERENCE_MID",
                                              "PEGGED_REFERENCE_BEST_BID",
                                              "PEGGED_REFERENCE_BEST_ASK"
                                            ]
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for updating Vega network parameters",
                            "properties": {
                              "changes": {
                                "description": "The network parameter to update",
                                "properties": {
                                  "key": {
                                    "description": "The unique key",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "The value for the network parameter",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for creating new assets on Vega",
                            "properties": {
                              "changes": {
                                "description": "The configuration of the new asset",
                                "properties": {
                                  "decimals": {
                                    "description": "Number of decimal / precision handled by this asset",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "Name of the asset (e.g: Great British Pound)",
                                    "type": "string"
                                  },
                                  "quantum": {
                                    "description": "The minimum economically meaningful amount in the asset",
                                    "type": "string"
                                  },
                                  "source": {
                                    "oneOf": [
                                      {
                                        "description": "A built-in asset",
                                        "properties": {
                                          "max_faucet_amount_mint": {
                                            "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      {
                                        "description": "An Ethereum ERC20 asset",
                                        "properties": {
                                          "contract_address": {
                                            "description": "The address of the contract for the token, on the ethereum network",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  "symbol": {
                                    "description": "Symbol of the asset (e.g: GBP)",
                                    "type": "string"
                                  },
                                  "total_supply": {
                                    "description": "Total circulating supply for the asset",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for a freeform voting thing",
                            "properties": {
                              "changes": {
                                "description": "The configuration of the new freeform",
                                "properties": {
                                  "description": {
                                    "description": "A short description of what is being proposed",
                                    "type": "string"
                                  },
                                  "hash": {
                                    "description": "The hash on the content of the URL",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "The URL containing content that describes the proposal",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "closing_timestamp": {
                        "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
                        "format": "int64",
                        "type": "integer"
                      },
                      "enactment_timestamp": {
                        "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
                        "format": "int64",
                        "type": "integer"
                      },
                      "validation_timestamp": {
                        "description": "Validation timestamp (Unix time in seconds)",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "timestamp": {
                    "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "yes": {
                "description": "All \"yes\" votes in favour of the proposal above",
                "items": {
                  "description": "Governance vote",
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "yes_party": {
                "additionalProperties": {
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "description": "All latest YES votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.ObservePartyProposalsRequest": {
        "description": "Request to subscribe to a stream of governance proposals for a party",
        "properties": {
          "party_id": {
            "description": "Party identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.ObservePartyProposalsResponse": {
        "properties": {
          "data": {
            "properties": {
              "no": {
                "description": "All \"no\" votes against the proposal above",
                "items": {
                  "description": "Governance vote",
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "no_party": {
                "additionalProperties": {
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "description": "All latest NO votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                "type": "object"
              },
              "proposal": {
                "description": "The governance proposal",
                "properties": {
                  "error_details": {
                    "description": "The detailed error associated to the reason.",
                    "type": "string"
                  },
                  "id": {
                    "description": "Unique proposal identifier",
                    "type": "string"
                  },
                  "party_id": {
                    "description": "Party identifier of the author (the party submitting the proposal)",
                    "type": "string"
                  },
                  "reason": {
                    "description": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses",
                    "enum": [
                      [
                        "PROPOSAL_ERROR_UNSPECIFIED",
                        "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
                        "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
                        "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
                        "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
                        "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
                        "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
                        "PROPOSAL_ERROR_NO_PRODUCT",
                        "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
                        "PROPOSAL_ERROR_NO_TRADING_MODE",
                        "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
                        "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
                        "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
                        "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
                        "PROPOSAL_ERROR_INVALID_ASSET",
                        "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
                        "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
                        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
                        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
                        "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
                        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
                        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
                        "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
                        "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
                        "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
                        "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
                        "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
                        "PROPOSAL_ERROR_INVALID_SHAPE",
                        "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
                        "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
                        "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
                        "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
                      ]
                    ],
                    "type": "string"
                  },
                  "reference": {
                    "description": "Proposal reference",
                    "type": "string"
                  },
                  "state": {
                    "description": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition",
                    "enum": [
                      [
                        "STATE_UNSPECIFIED",
                        "STATE_FAILED",
                        "STATE_OPEN",
                        "STATE_PASSED",
                        "STATE_REJECTED",
                        "STATE_DECLINED",
                        "STATE_ENACTED",
                        "STATE_WAITING_FOR_NODE_VOTE"
                      ]
                    ],
                    "type": "string"
                  },
                  "terms": {
                    "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted",
                    "properties": {
                      "change": {
                        "oneOf": [
                          {
                            "description": "Proposal change for modifying an existing market on Vega",
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for creating new market on Vega",
                            "properties": {
                              "changes": {
                                "description": "The configuration of the new market",
                                "properties": {
                                  "decimal_places": {
                                    "description": "Decimal places used for the new market",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "instrument": {
                                    "description": "New market instrument configuration",
                                    "properties": {
                                      "code": {
                                        "description": "Instrument code",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "Instrument name",
                                        "type": "string"
                                      },
                                      "product": {
                                        "oneOf": [
                                          {
                                            "description": "Future",
                                            "properties": {
                                              "oracle_spec_binding": {
                                                "description": "The binding between the oracle spec and the settlement price",
                                                "properties": {
                                                  "settlement_price_property": {
                                                    "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                                    "type": "string"
                                                  },
                                                  "trading_termination_property": {
                                                    "description": "the name of the property in the oracle data that signals termination of trading",
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "oracle_spec_for_settlement_price": {
                                                "description": "The oracle spec describing the oracle data of settlement price",
                                                "properties": {
                                                  "filters": {
                                                    "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                    "items": {
                                                      "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                      "properties": {
                                                        "conditions": {
                                                          "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                          "items": {
                                                            "description": "Condition describes the condition that must be validated by the",
                                                            "properties": {
                                                              "operator": {
                                                                "description": "comparator is the type of comparison to make on the value.",
                                                                "enum": [
                                                                  [
                                                                    "OPERATOR_UNSPECIFIED",
                                                                    "OPERATOR_EQUALS",
                                                                    "OPERATOR_GREATER_THAN",
                                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                    "OPERATOR_LESS_THAN",
                                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              },
                                                              "value": {
                                                                "description": "value is used by the comparator.",
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          },
                                                          "type": "array"
                                                        },
                                                        "key": {
                                                          "description": "key is the oracle data property key targeted by the filter.",
                                                          "properties": {
                                                            "name": {
                                                              "description": "name is the name of the property.",
                                                              "type": "string"
                                                            },
                                                            "type": {
                                                              "description": "type is the type of the property.",
                                                              "enum": [
                                                                [
                                                                  "TYPE_UNSPECIFIED",
                                                                  "TYPE_EMPTY",
                                                                  "TYPE_INTEGER",
                                                                  "TYPE_STRING",
                                                                  "TYPE_BOOLEAN",
                                                                  "TYPE_DECIMAL",
                                                                  "TYPE_TIMESTAMP"
                                                                ]
                                                              ],
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "pub_keys": {
                                                    "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "oracle_spec_for_trading_termination": {
                                                "description": "The oracle spec describing the oracle data of trading termination",
                                                "properties": {
                                                  "filters": {
                                                    "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                    "items": {
                                                      "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                      "properties": {
                                                        "conditions": {
                                                          "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                          "items": {
                                                            "description": "Condition describes the condition that must be validated by the",
                                                            "properties": {
                                                              "operator": {
                                                                "description": "comparator is the type of comparison to make on the value.",
                                                                "enum": [
                                                                  [
                                                                    "OPERATOR_UNSPECIFIED",
                                                                    "OPERATOR_EQUALS",
                                                                    "OPERATOR_GREATER_THAN",
                                                                    "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                    "OPERATOR_LESS_THAN",
                                                                    "OPERATOR_LESS_THAN_OR_EQUAL"
                                                                  ]
                                                                ],
                                                                "type": "string"
                                                              },
                                                              "value": {
                                                                "description": "value is used by the comparator.",
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          },
                                                          "type": "array"
                                                        },
                                                        "key": {
                                                          "description": "key is the oracle data property key targeted by the filter.",
                                                          "properties": {
                                                            "name": {
                                                              "description": "name is the name of the property.",
                                                              "type": "string"
                                                            },
                                                            "type": {
                                                              "description": "type is the type of the property.",
                                                              "enum": [
                                                                [
                                                                  "TYPE_UNSPECIFIED",
                                                                  "TYPE_EMPTY",
                                                                  "TYPE_INTEGER",
                                                                  "TYPE_STRING",
                                                                  "TYPE_BOOLEAN",
                                                                  "TYPE_DECIMAL",
                                                                  "TYPE_TIMESTAMP"
                                                                ]
                                                              ],
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "pub_keys": {
                                                    "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "quote_name": {
                                                "description": "Product quote name",
                                                "type": "string"
                                              },
                                              "settlement_asset": {
                                                "description": "Product settlement asset identifier",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "liquidity_monitoring_parameters": {
                                    "description": "Liquidity monitoring parameters",
                                    "properties": {
                                      "auction_extension": {
                                        "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "target_stake_parameters": {
                                        "description": "Specifies parameters related to target stake calculation",
                                        "properties": {
                                          "scaling_factor": {
                                            "description": "Specifies scaling factors used in target stake calculation",
                                            "type": "number"
                                          },
                                          "time_window": {
                                            "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                            "format": "int64",
                                            "type": "integer"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "triggering_ratio": {
                                        "description": "Specifies the triggering ratio for entering liquidity auction",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "metadata": {
                                    "description": "Optional new market meta data, tags",
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "price_monitoring_parameters": {
                                    "description": "Price monitoring parameters",
                                    "properties": {
                                      "triggers": {
                                        "items": {
                                          "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                          "properties": {
                                            "auction_extension": {
                                              "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                              "format": "int64",
                                              "type": "integer"
                                            },
                                            "horizon": {
                                              "description": "Price monitoring projection horizon τ in seconds",
                                              "format": "int64",
                                              "type": "integer"
                                            },
                                            "probability": {
                                              "description": "Price monitoring probability level p",
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "risk_parameters": {
                                    "oneOf": [
                                      {
                                        "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                                        "properties": {
                                          "factor_long": {
                                            "description": "Pre-defined risk factor value for long",
                                            "type": "number"
                                          },
                                          "factor_short": {
                                            "description": "Pre-defined risk factor value for short",
                                            "type": "number"
                                          },
                                          "max_move_up": {
                                            "description": "Pre-defined maximum price move up that the model considers as valid",
                                            "type": "number"
                                          },
                                          "min_move_down": {
                                            "description": "Pre-defined minimum price move down that the model considers as valid",
                                            "type": "number"
                                          },
                                          "probability_of_trading": {
                                            "description": "Pre-defined constant probability of trading",
                                            "type": "number"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      {
                                        "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                                        "properties": {
                                          "params": {
                                            "description": "Risk model parameters for log normal",
                                            "properties": {
                                              "mu": {
                                                "description": "Mu param",
                                                "type": "number"
                                              },
                                              "r": {
                                                "description": "R param",
                                                "type": "number"
                                              },
                                              "sigma": {
                                                "description": "Sigma param",
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "risk_aversion_parameter": {
                                            "description": "Risk Aversion Parameter",
                                            "type": "number"
                                          },
                                          "tau": {
                                            "description": "Tau",
                                            "type": "number"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "liquidity_commitment": {
                                "description": "The commitment from the party creating the NewMarket proposal",
                                "properties": {
                                  "buys": {
                                    "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                                    "items": {
                                      "description": "Represents a liquidity order",
                                      "properties": {
                                        "offset": {
                                          "description": "The offset/amount of units away for the order",
                                          "type": "string"
                                        },
                                        "proportion": {
                                          "description": "The relative proportion of the commitment to be allocated at a price level",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "reference": {
                                          "description": "The pegged reference point for the order",
                                          "enum": [
                                            [
                                              "PEGGED_REFERENCE_UNSPECIFIED",
                                              "PEGGED_REFERENCE_MID",
                                              "PEGGED_REFERENCE_BEST_BID",
                                              "PEGGED_REFERENCE_BEST_ASK"
                                            ]
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "commitment_amount": {
                                    "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                                    "type": "string"
                                  },
                                  "fee": {
                                    "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                                    "type": "string"
                                  },
                                  "reference": {
                                    "description": "A reference to be associated to all orders created from this commitment",
                                    "type": "string"
                                  },
                                  "sells": {
                                    "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                                    "items": {
                                      "description": "Represents a liquidity order",
                                      "properties": {
                                        "offset": {
                                          "description": "The offset/amount of units away for the order",
                                          "type": "string"
                                        },
                                        "proportion": {
                                          "description": "The relative proportion of the commitment to be allocated at a price level",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "reference": {
                                          "description": "The pegged reference point for the order",
                                          "enum": [
                                            [
                                              "PEGGED_REFERENCE_UNSPECIFIED",
                                              "PEGGED_REFERENCE_MID",
                                              "PEGGED_REFERENCE_BEST_BID",
                                              "PEGGED_REFERENCE_BEST_ASK"
                                            ]
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for updating Vega network parameters",
                            "properties": {
                              "changes": {
                                "description": "The network parameter to update",
                                "properties": {
                                  "key": {
                                    "description": "The unique key",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "The value for the network parameter",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for creating new assets on Vega",
                            "properties": {
                              "changes": {
                                "description": "The configuration of the new asset",
                                "properties": {
                                  "decimals": {
                                    "description": "Number of decimal / precision handled by this asset",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "Name of the asset (e.g: Great British Pound)",
                                    "type": "string"
                                  },
                                  "quantum": {
                                    "description": "The minimum economically meaningful amount in the asset",
                                    "type": "string"
                                  },
                                  "source": {
                                    "oneOf": [
                                      {
                                        "description": "A built-in asset",
                                        "properties": {
                                          "max_faucet_amount_mint": {
                                            "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      {
                                        "description": "An Ethereum ERC20 asset",
                                        "properties": {
                                          "contract_address": {
                                            "description": "The address of the contract for the token, on the ethereum network",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  "symbol": {
                                    "description": "Symbol of the asset (e.g: GBP)",
                                    "type": "string"
                                  },
                                  "total_supply": {
                                    "description": "Total circulating supply for the asset",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Proposal change for a freeform voting thing",
                            "properties": {
                              "changes": {
                                "description": "The configuration of the new freeform",
                                "properties": {
                                  "description": {
                                    "description": "A short description of what is being proposed",
                                    "type": "string"
                                  },
                                  "hash": {
                                    "description": "The hash on the content of the URL",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "The URL containing content that describes the proposal",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "closing_timestamp": {
                        "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
                        "format": "int64",
                        "type": "integer"
                      },
                      "enactment_timestamp": {
                        "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
                        "format": "int64",
                        "type": "integer"
                      },
                      "validation_timestamp": {
                        "description": "Validation timestamp (Unix time in seconds)",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "timestamp": {
                    "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "yes": {
                "description": "All \"yes\" votes in favour of the proposal above",
                "items": {
                  "description": "Governance vote",
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "yes_party": {
                "additionalProperties": {
                  "properties": {
                    "party_id": {
                      "description": "Voter's party identifier",
                      "type": "string"
                    },
                    "proposal_id": {
                      "description": "Identifier of the proposal being voted on",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                      "format": "int64",
                      "type": "integer"
                    },
                    "total_governance_token_balance": {
                      "description": "Total number of governance token for the party that casted the vote",
                      "type": "string"
                    },
                    "total_governance_token_weight": {
                      "description": "The weight of this vote based on the total of governance token",
                      "type": "string"
                    },
                    "value": {
                      "description": "Actual vote",
                      "enum": [
                        [
                          "VALUE_UNSPECIFIED",
                          "VALUE_NO",
                          "VALUE_YES"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "description": "All latest YES votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.ObservePartyVotesRequest": {
        "description": "Request to subscribe to a stream of governance votes for a party",
        "properties": {
          "party_id": {
            "description": "Party identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.ObservePartyVotesResponse": {
        "properties": {
          "vote": {
            "properties": {
              "party_id": {
                "description": "Voter's party identifier",
                "type": "string"
              },
              "proposal_id": {
                "description": "Identifier of the proposal being voted on",
                "type": "string"
              },
              "timestamp": {
                "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                "format": "int64",
                "type": "integer"
              },
              "total_governance_token_balance": {
                "description": "Total number of governance token for the party that casted the vote",
                "type": "string"
              },
              "total_governance_token_weight": {
                "description": "The weight of this vote based on the total of governance token",
                "type": "string"
              },
              "value": {
                "description": "Actual vote",
                "enum": [
                  [
                    "VALUE_UNSPECIFIED",
                    "VALUE_NO",
                    "VALUE_YES"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.ObserveProposalVotesRequest": {
        "description": "Request to subscribe to a stream of governance votes for a proposal",
        "properties": {
          "proposal_id": {
            "description": "Proposal identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.ObserveProposalVotesResponse": {
        "properties": {
          "vote": {
            "properties": {
              "party_id": {
                "description": "Voter's party identifier",
                "type": "string"
              },
              "proposal_id": {
                "description": "Identifier of the proposal being voted on",
                "type": "string"
              },
              "timestamp": {
                "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                "format": "int64",
                "type": "integer"
              },
              "total_governance_token_balance": {
                "description": "Total number of governance token for the party that casted the vote",
                "type": "string"
              },
              "total_governance_token_weight": {
                "description": "The weight of this vote based on the total of governance token",
                "type": "string"
              },
              "value": {
                "description": "Actual vote",
                "enum": [
                  [
                    "VALUE_UNSPECIFIED",
                    "VALUE_NO",
                    "VALUE_YES"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.ObserveRewardsRequest": {
        "properties": {
          "asset_id": {
            "type": "string"
          },
          "party": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.ObserveRewardsResponse": {
        "properties": {
          "reward": {
            "properties": {
              "amount": {
                "type": "string"
              },
              "asset_id": {
                "type": "string"
              },
              "epoch": {
                "format": "int64",
                "type": "integer"
              },
              "party_id": {
                "type": "string"
              },
              "percentage_of_total": {
                "type": "string"
              },
              "received_at": {
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OptionalProposalState": {
        "description": "Optional proposal state",
        "properties": {
          "value": {
            "description": "Proposal state value",
            "enum": [
              [
                "STATE_UNSPECIFIED",
                "STATE_FAILED",
                "STATE_OPEN",
                "STATE_PASSED",
                "STATE_REJECTED",
                "STATE_DECLINED",
                "STATE_ENACTED",
                "STATE_WAITING_FOR_NODE_VOTE"
              ]
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OracleDataBySpecRequest": {
        "description": "A request to all oracle data broadcast to a given spec",
        "properties": {
          "id": {
            "description": "The id to get the oracle spec for",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OracleDataBySpecResponse": {
        "description": "The response for a list of all oracle data broadcast to a given spec",
        "properties": {
          "oracle_data": {
            "description": "The list of oracle data broadcast to a given spec",
            "items": {
              "description": "OracleData describes an oracle data that has been broadcast.",
              "properties": {
                "broadcast_at": {
                  "description": "broadcast_at is the time at which the data was broadcast for the first time.",
                  "format": "int64",
                  "type": "integer"
                },
                "data": {
                  "description": "data holds all the properties of the oracle data",
                  "items": {
                    "description": "Property describes one property of an oracle spec with a key with its value.",
                    "properties": {
                      "name": {
                        "description": "name is the name of the property.",
                        "type": "string"
                      },
                      "value": {
                        "description": "value is the value of the property.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "matched_spec_ids": {
                  "description": "matched_specs_ids lists all the oracle specs that matched this oracle data.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "pub_keys": {
                  "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OracleSpecRequest": {
        "description": "A request to get a specific oracle spec by identifier",
        "properties": {
          "id": {
            "description": "The id to get the oracle spec for",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OracleSpecResponse": {
        "description": "A response for a oracle spec",
        "properties": {
          "oracle_spec": {
            "description": "The withdrawal matching the identifier from the request",
            "properties": {
              "created_at": {
                "description": "Creation Date time",
                "format": "int64",
                "type": "integer"
              },
              "filters": {
                "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                "items": {
                  "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                  "properties": {
                    "conditions": {
                      "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                      "items": {
                        "description": "Condition describes the condition that must be validated by the",
                        "properties": {
                          "operator": {
                            "description": "comparator is the type of comparison to make on the value.",
                            "enum": [
                              [
                                "OPERATOR_UNSPECIFIED",
                                "OPERATOR_EQUALS",
                                "OPERATOR_GREATER_THAN",
                                "OPERATOR_GREATER_THAN_OR_EQUAL",
                                "OPERATOR_LESS_THAN",
                                "OPERATOR_LESS_THAN_OR_EQUAL"
                              ]
                            ],
                            "type": "string"
                          },
                          "value": {
                            "description": "value is used by the comparator.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "key": {
                      "description": "key is the oracle data property key targeted by the filter.",
                      "properties": {
                        "name": {
                          "description": "name is the name of the property.",
                          "type": "string"
                        },
                        "type": {
                          "description": "type is the type of the property.",
                          "enum": [
                            [
                              "TYPE_UNSPECIFIED",
                              "TYPE_EMPTY",
                              "TYPE_INTEGER",
                              "TYPE_STRING",
                              "TYPE_BOOLEAN",
                              "TYPE_DECIMAL",
                              "TYPE_TIMESTAMP"
                            ]
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "id": {
                "description": "id is a hash generated from the OracleSpec data.",
                "type": "string"
              },
              "pub_keys": {
                "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "status": {
                "description": "status describes the status of the oracle spec",
                "enum": [
                  [
                    "STATUS_UNSPECIFIED",
                    "STATUS_ACTIVE",
                    "STATUS_DEACTIVATED"
                  ]
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "Last Updated timestamp",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OracleSpecsRequest": {
        "description": "A request to get a specific oracle spec by identifier",
        "type": "object"
      },
      "datanode.api.v1.OracleSpecsResponse": {
        "description": "The response for a list of withdrawals",
        "properties": {
          "oracle_specs": {
            "description": "The list of oracle specs",
            "items": {
              "description": "An oracle spec describe the oracle data that a product (or a risk model) wants to get from the oracle engine. This message contains additional information used by the API.",
              "properties": {
                "created_at": {
                  "description": "Creation Date time",
                  "format": "int64",
                  "type": "integer"
                },
                "filters": {
                  "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                  "items": {
                    "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                    "properties": {
                      "conditions": {
                        "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                        "items": {
                          "description": "Condition describes the condition that must be validated by the",
                          "properties": {
                            "operator": {
                              "description": "comparator is the type of comparison to make on the value.",
                              "enum": [
                                [
                                  "OPERATOR_UNSPECIFIED",
                                  "OPERATOR_EQUALS",
                                  "OPERATOR_GREATER_THAN",
                                  "OPERATOR_GREATER_THAN_OR_EQUAL",
                                  "OPERATOR_LESS_THAN",
                                  "OPERATOR_LESS_THAN_OR_EQUAL"
                                ]
                              ],
                              "type": "string"
                            },
                            "value": {
                              "description": "value is used by the comparator.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "key": {
                        "description": "key is the oracle data property key targeted by the filter.",
                        "properties": {
                          "name": {
                            "description": "name is the name of the property.",
                            "type": "string"
                          },
                          "type": {
                            "description": "type is the type of the property.",
                            "enum": [
                              [
                                "TYPE_UNSPECIFIED",
                                "TYPE_EMPTY",
                                "TYPE_INTEGER",
                                "TYPE_STRING",
                                "TYPE_BOOLEAN",
                                "TYPE_DECIMAL",
                                "TYPE_TIMESTAMP"
                              ]
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "id": {
                  "description": "id is a hash generated from the OracleSpec data.",
                  "type": "string"
                },
                "pub_keys": {
                  "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "status": {
                  "description": "status describes the status of the oracle spec",
                  "enum": [
                    [
                      "STATUS_UNSPECIFIED",
                      "STATUS_ACTIVE",
                      "STATUS_DEACTIVATED"
                    ]
                  ],
                  "type": "string"
                },
                "updated_at": {
                  "description": "Last Updated timestamp",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OrderByIDRequest": {
        "description": "Request for an order with the specified order identifier Optionally, return a specific version of the order with the `version` field",
        "properties": {
          "order_id": {
            "description": "Order identifier, required field",
            "type": "string"
          },
          "version": {
            "description": "Version of the order: - Set `version` to 0 for most recent version of the order - Set `1` for original version of the order - Set `2` for first amendment, `3` for second amendment, etc",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OrderByIDResponse": {
        "properties": {
          "order": {
            "properties": {
              "batch_id": {
                "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)",
                "format": "int64",
                "type": "integer"
              },
              "created_at": {
                "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "expires_at": {
                "description": "Timestamp for when the order will expire, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`",
                "format": "int64",
                "type": "integer"
              },
              "id": {
                "description": "Unique identifier for the order (set by the system after consensus)",
                "type": "string"
              },
              "liquidity_provision_id": {
                "description": "Is this order created as part of a liquidity provision, will be empty if not.",
                "type": "string"
              },
              "market_id": {
                "description": "Market identifier for the order",
                "type": "string"
              },
              "party_id": {
                "description": "Party identifier for the order",
                "type": "string"
              },
              "pegged_order": {
                "description": "Pegged order details, used only if the order represents a pegged order.",
                "properties": {
                  "offset": {
                    "description": "Offset from the price reference",
                    "type": "string"
                  },
                  "reference": {
                    "description": "Which price point are we linked to",
                    "enum": [
                      [
                        "PEGGED_REFERENCE_UNSPECIFIED",
                        "PEGGED_REFERENCE_MID",
                        "PEGGED_REFERENCE_BEST_BID",
                        "PEGGED_REFERENCE_BEST_ASK"
                      ]
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "price": {
                "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "reason": {
                "description": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors",
                "enum": [
                  [
                    "ORDER_ERROR_UNSPECIFIED",
                    "ORDER_ERROR_INVALID_MARKET_ID",
                    "ORDER_ERROR_INVALID_ORDER_ID",
                    "ORDER_ERROR_OUT_OF_SEQUENCE",
                    "ORDER_ERROR_INVALID_REMAINING_SIZE",
                    "ORDER_ERROR_TIME_FAILURE",
                    "ORDER_ERROR_REMOVAL_FAILURE",
                    "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                    "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                    "ORDER_ERROR_EDIT_NOT_ALLOWED",
                    "ORDER_ERROR_AMEND_FAILURE",
                    "ORDER_ERROR_NOT_FOUND",
                    "ORDER_ERROR_INVALID_PARTY_ID",
                    "ORDER_ERROR_MARKET_CLOSED",
                    "ORDER_ERROR_MARGIN_CHECK_FAILED",
                    "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                    "ORDER_ERROR_INTERNAL_ERROR",
                    "ORDER_ERROR_INVALID_SIZE",
                    "ORDER_ERROR_INVALID_PERSISTENCE",
                    "ORDER_ERROR_INVALID_TYPE",
                    "ORDER_ERROR_SELF_TRADING",
                    "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                    "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                    "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                    "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                    "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                    "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                    "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                    "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                    "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                    "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                    "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                    "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                    "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                    "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                    "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                    "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                    "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                    "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                    "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                    "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                    "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                    "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                    "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                    "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                    "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
                  ]
                ],
                "type": "string"
              },
              "reference": {
                "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission",
                "type": "string"
              },
              "remaining": {
                "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED",
                "format": "int64",
                "type": "integer"
              },
              "side": {
                "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                "enum": [
                  [
                    "SIDE_UNSPECIFIED",
                    "SIDE_BUY",
                    "SIDE_SELL"
                  ]
                ],
                "type": "string"
              },
              "size": {
                "description": "Size for the order, for example, in a futures market the size equals the number of contracts",
                "format": "int64",
                "type": "integer"
              },
              "status": {
                "description": "The current status for the order. See [`Order.Status`](#vega.Order.Status) - For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field",
                "enum": [
                  [
                    "STATUS_UNSPECIFIED",
                    "STATUS_ACTIVE",
                    "STATUS_EXPIRED",
                    "STATUS_CANCELLED",
                    "STATUS_STOPPED",
                    "STATUS_FILLED",
                    "STATUS_REJECTED",
                    "STATUS_PARTIALLY_FILLED",
                    "STATUS_PARKED"
                  ]
                ],
                "type": "string"
              },
              "time_in_force": {
                "description": "Time in force indicates how long an order will remain active before it is executed or expires. - See [`Order.TimeInForce`](#vega.Order.TimeInForce)",
                "enum": [
                  [
                    "TIME_IN_FORCE_UNSPECIFIED",
                    "TIME_IN_FORCE_GTC",
                    "TIME_IN_FORCE_GTT",
                    "TIME_IN_FORCE_IOC",
                    "TIME_IN_FORCE_FOK",
                    "TIME_IN_FORCE_GFA",
                    "TIME_IN_FORCE_GFN"
                  ]
                ],
                "type": "string"
              },
              "type": {
                "description": "Type for the order - See [`Order.Type`](#vega.Order.Type)",
                "enum": [
                  [
                    "TYPE_UNSPECIFIED",
                    "TYPE_LIMIT",
                    "TYPE_MARKET",
                    "TYPE_NETWORK"
                  ]
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "version": {
                "description": "The version for the order, initial value is version 1 and is incremented after each successful amend",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OrderByMarketAndIDRequest": {
        "description": "Request for an order on a market given an order identifier",
        "properties": {
          "market_id": {
            "description": "Market identifier, required field",
            "type": "string"
          },
          "order_id": {
            "description": "Order identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OrderByMarketAndIDResponse": {
        "description": "Response for an order on a market given an order identifier",
        "properties": {
          "order": {
            "description": "An order, if found",
            "properties": {
              "batch_id": {
                "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)",
                "format": "int64",
                "type": "integer"
              },
              "created_at": {
                "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "expires_at": {
                "description": "Timestamp for when the order will expire, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`",
                "format": "int64",
                "type": "integer"
              },
              "id": {
                "description": "Unique identifier for the order (set by the system after consensus)",
                "type": "string"
              },
              "liquidity_provision_id": {
                "description": "Is this order created as part of a liquidity provision, will be empty if not.",
                "type": "string"
              },
              "market_id": {
                "description": "Market identifier for the order",
                "type": "string"
              },
              "party_id": {
                "description": "Party identifier for the order",
                "type": "string"
              },
              "pegged_order": {
                "description": "Pegged order details, used only if the order represents a pegged order.",
                "properties": {
                  "offset": {
                    "description": "Offset from the price reference",
                    "type": "string"
                  },
                  "reference": {
                    "description": "Which price point are we linked to",
                    "enum": [
                      [
                        "PEGGED_REFERENCE_UNSPECIFIED",
                        "PEGGED_REFERENCE_MID",
                        "PEGGED_REFERENCE_BEST_BID",
                        "PEGGED_REFERENCE_BEST_ASK"
                      ]
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "price": {
                "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "reason": {
                "description": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors",
                "enum": [
                  [
                    "ORDER_ERROR_UNSPECIFIED",
                    "ORDER_ERROR_INVALID_MARKET_ID",
                    "ORDER_ERROR_INVALID_ORDER_ID",
                    "ORDER_ERROR_OUT_OF_SEQUENCE",
                    "ORDER_ERROR_INVALID_REMAINING_SIZE",
                    "ORDER_ERROR_TIME_FAILURE",
                    "ORDER_ERROR_REMOVAL_FAILURE",
                    "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                    "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                    "ORDER_ERROR_EDIT_NOT_ALLOWED",
                    "ORDER_ERROR_AMEND_FAILURE",
                    "ORDER_ERROR_NOT_FOUND",
                    "ORDER_ERROR_INVALID_PARTY_ID",
                    "ORDER_ERROR_MARKET_CLOSED",
                    "ORDER_ERROR_MARGIN_CHECK_FAILED",
                    "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                    "ORDER_ERROR_INTERNAL_ERROR",
                    "ORDER_ERROR_INVALID_SIZE",
                    "ORDER_ERROR_INVALID_PERSISTENCE",
                    "ORDER_ERROR_INVALID_TYPE",
                    "ORDER_ERROR_SELF_TRADING",
                    "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                    "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                    "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                    "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                    "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                    "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                    "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                    "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                    "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                    "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                    "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                    "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                    "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                    "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                    "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                    "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                    "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                    "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                    "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                    "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                    "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                    "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                    "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                    "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                    "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
                  ]
                ],
                "type": "string"
              },
              "reference": {
                "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission",
                "type": "string"
              },
              "remaining": {
                "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED",
                "format": "int64",
                "type": "integer"
              },
              "side": {
                "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                "enum": [
                  [
                    "SIDE_UNSPECIFIED",
                    "SIDE_BUY",
                    "SIDE_SELL"
                  ]
                ],
                "type": "string"
              },
              "size": {
                "description": "Size for the order, for example, in a futures market the size equals the number of contracts",
                "format": "int64",
                "type": "integer"
              },
              "status": {
                "description": "The current status for the order. See [`Order.Status`](#vega.Order.Status) - For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field",
                "enum": [
                  [
                    "STATUS_UNSPECIFIED",
                    "STATUS_ACTIVE",
                    "STATUS_EXPIRED",
                    "STATUS_CANCELLED",
                    "STATUS_STOPPED",
                    "STATUS_FILLED",
                    "STATUS_REJECTED",
                    "STATUS_PARTIALLY_FILLED",
                    "STATUS_PARKED"
                  ]
                ],
                "type": "string"
              },
              "time_in_force": {
                "description": "Time in force indicates how long an order will remain active before it is executed or expires. - See [`Order.TimeInForce`](#vega.Order.TimeInForce)",
                "enum": [
                  [
                    "TIME_IN_FORCE_UNSPECIFIED",
                    "TIME_IN_FORCE_GTC",
                    "TIME_IN_FORCE_GTT",
                    "TIME_IN_FORCE_IOC",
                    "TIME_IN_FORCE_FOK",
                    "TIME_IN_FORCE_GFA",
                    "TIME_IN_FORCE_GFN"
                  ]
                ],
                "type": "string"
              },
              "type": {
                "description": "Type for the order - See [`Order.Type`](#vega.Order.Type)",
                "enum": [
                  [
                    "TYPE_UNSPECIFIED",
                    "TYPE_LIMIT",
                    "TYPE_MARKET",
                    "TYPE_NETWORK"
                  ]
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "version": {
                "description": "The version for the order, initial value is version 1 and is incremented after each successful amend",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OrderByReferenceRequest": {
        "description": "Request for an order given an order reference",
        "properties": {
          "reference": {
            "description": "Unique reference, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OrderByReferenceResponse": {
        "description": "Response for an order given an order reference",
        "properties": {
          "order": {
            "description": "An order, if found",
            "properties": {
              "batch_id": {
                "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)",
                "format": "int64",
                "type": "integer"
              },
              "created_at": {
                "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "expires_at": {
                "description": "Timestamp for when the order will expire, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`",
                "format": "int64",
                "type": "integer"
              },
              "id": {
                "description": "Unique identifier for the order (set by the system after consensus)",
                "type": "string"
              },
              "liquidity_provision_id": {
                "description": "Is this order created as part of a liquidity provision, will be empty if not.",
                "type": "string"
              },
              "market_id": {
                "description": "Market identifier for the order",
                "type": "string"
              },
              "party_id": {
                "description": "Party identifier for the order",
                "type": "string"
              },
              "pegged_order": {
                "description": "Pegged order details, used only if the order represents a pegged order.",
                "properties": {
                  "offset": {
                    "description": "Offset from the price reference",
                    "type": "string"
                  },
                  "reference": {
                    "description": "Which price point are we linked to",
                    "enum": [
                      [
                        "PEGGED_REFERENCE_UNSPECIFIED",
                        "PEGGED_REFERENCE_MID",
                        "PEGGED_REFERENCE_BEST_BID",
                        "PEGGED_REFERENCE_BEST_ASK"
                      ]
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "price": {
                "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "reason": {
                "description": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors",
                "enum": [
                  [
                    "ORDER_ERROR_UNSPECIFIED",
                    "ORDER_ERROR_INVALID_MARKET_ID",
                    "ORDER_ERROR_INVALID_ORDER_ID",
                    "ORDER_ERROR_OUT_OF_SEQUENCE",
                    "ORDER_ERROR_INVALID_REMAINING_SIZE",
                    "ORDER_ERROR_TIME_FAILURE",
                    "ORDER_ERROR_REMOVAL_FAILURE",
                    "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                    "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                    "ORDER_ERROR_EDIT_NOT_ALLOWED",
                    "ORDER_ERROR_AMEND_FAILURE",
                    "ORDER_ERROR_NOT_FOUND",
                    "ORDER_ERROR_INVALID_PARTY_ID",
                    "ORDER_ERROR_MARKET_CLOSED",
                    "ORDER_ERROR_MARGIN_CHECK_FAILED",
                    "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                    "ORDER_ERROR_INTERNAL_ERROR",
                    "ORDER_ERROR_INVALID_SIZE",
                    "ORDER_ERROR_INVALID_PERSISTENCE",
                    "ORDER_ERROR_INVALID_TYPE",
                    "ORDER_ERROR_SELF_TRADING",
                    "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                    "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                    "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                    "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                    "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                    "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                    "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                    "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                    "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                    "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                    "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                    "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                    "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                    "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                    "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                    "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                    "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                    "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                    "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                    "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                    "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                    "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                    "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                    "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                    "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
                  ]
                ],
                "type": "string"
              },
              "reference": {
                "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission",
                "type": "string"
              },
              "remaining": {
                "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED",
                "format": "int64",
                "type": "integer"
              },
              "side": {
                "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                "enum": [
                  [
                    "SIDE_UNSPECIFIED",
                    "SIDE_BUY",
                    "SIDE_SELL"
                  ]
                ],
                "type": "string"
              },
              "size": {
                "description": "Size for the order, for example, in a futures market the size equals the number of contracts",
                "format": "int64",
                "type": "integer"
              },
              "status": {
                "description": "The current status for the order. See [`Order.Status`](#vega.Order.Status) - For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field",
                "enum": [
                  [
                    "STATUS_UNSPECIFIED",
                    "STATUS_ACTIVE",
                    "STATUS_EXPIRED",
                    "STATUS_CANCELLED",
                    "STATUS_STOPPED",
                    "STATUS_FILLED",
                    "STATUS_REJECTED",
                    "STATUS_PARTIALLY_FILLED",
                    "STATUS_PARKED"
                  ]
                ],
                "type": "string"
              },
              "time_in_force": {
                "description": "Time in force indicates how long an order will remain active before it is executed or expires. - See [`Order.TimeInForce`](#vega.Order.TimeInForce)",
                "enum": [
                  [
                    "TIME_IN_FORCE_UNSPECIFIED",
                    "TIME_IN_FORCE_GTC",
                    "TIME_IN_FORCE_GTT",
                    "TIME_IN_FORCE_IOC",
                    "TIME_IN_FORCE_FOK",
                    "TIME_IN_FORCE_GFA",
                    "TIME_IN_FORCE_GFN"
                  ]
                ],
                "type": "string"
              },
              "type": {
                "description": "Type for the order - See [`Order.Type`](#vega.Order.Type)",
                "enum": [
                  [
                    "TYPE_UNSPECIFIED",
                    "TYPE_LIMIT",
                    "TYPE_MARKET",
                    "TYPE_NETWORK"
                  ]
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "version": {
                "description": "The version for the order, initial value is version 1 and is incremented after each successful amend",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OrderVersionsByIDRequest": {
        "description": "Request for a list of all versions of an order given the specified order identifier",
        "properties": {
          "order_id": {
            "description": "Order identifier, required field",
            "type": "string"
          },
          "pagination": {
            "description": "Pagination controls",
            "properties": {
              "descending": {
                "description": "Descending reverses the order of the records returned, default is true, if false the results will be returned in ascending order",
                "type": "boolean"
              },
              "limit": {
                "description": "Limit the number of returned records to the value specified, default is 50",
                "format": "int64",
                "type": "integer"
              },
              "skip": {
                "description": "Skip the number of records specified, default is 0",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OrderVersionsByIDResponse": {
        "description": "Response to a request for a list of all versions of an order",
        "properties": {
          "orders": {
            "description": "A list of 0 or more orders (list will contain the same order but with different versions, if it has been amended)",
            "items": {
              "description": "An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties",
              "properties": {
                "batch_id": {
                  "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)",
                  "format": "int64",
                  "type": "integer"
                },
                "created_at": {
                  "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "expires_at": {
                  "description": "Timestamp for when the order will expire, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`",
                  "format": "int64",
                  "type": "integer"
                },
                "id": {
                  "description": "Unique identifier for the order (set by the system after consensus)",
                  "type": "string"
                },
                "liquidity_provision_id": {
                  "description": "Is this order created as part of a liquidity provision, will be empty if not.",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier for the order",
                  "type": "string"
                },
                "party_id": {
                  "description": "Party identifier for the order",
                  "type": "string"
                },
                "pegged_order": {
                  "description": "Pegged order details, used only if the order represents a pegged order.",
                  "properties": {
                    "offset": {
                      "description": "Offset from the price reference",
                      "type": "string"
                    },
                    "reference": {
                      "description": "Which price point are we linked to",
                      "enum": [
                        [
                          "PEGGED_REFERENCE_UNSPECIFIED",
                          "PEGGED_REFERENCE_MID",
                          "PEGGED_REFERENCE_BEST_BID",
                          "PEGGED_REFERENCE_BEST_ASK"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "price": {
                  "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "reason": {
                  "description": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors",
                  "enum": [
                    [
                      "ORDER_ERROR_UNSPECIFIED",
                      "ORDER_ERROR_INVALID_MARKET_ID",
                      "ORDER_ERROR_INVALID_ORDER_ID",
                      "ORDER_ERROR_OUT_OF_SEQUENCE",
                      "ORDER_ERROR_INVALID_REMAINING_SIZE",
                      "ORDER_ERROR_TIME_FAILURE",
                      "ORDER_ERROR_REMOVAL_FAILURE",
                      "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                      "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                      "ORDER_ERROR_EDIT_NOT_ALLOWED",
                      "ORDER_ERROR_AMEND_FAILURE",
                      "ORDER_ERROR_NOT_FOUND",
                      "ORDER_ERROR_INVALID_PARTY_ID",
                      "ORDER_ERROR_MARKET_CLOSED",
                      "ORDER_ERROR_MARGIN_CHECK_FAILED",
                      "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                      "ORDER_ERROR_INTERNAL_ERROR",
                      "ORDER_ERROR_INVALID_SIZE",
                      "ORDER_ERROR_INVALID_PERSISTENCE",
                      "ORDER_ERROR_INVALID_TYPE",
                      "ORDER_ERROR_SELF_TRADING",
                      "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                      "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                      "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                      "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                      "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                      "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                      "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                      "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                      "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                      "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                      "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                      "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                      "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                      "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                      "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                      "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                      "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                      "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                      "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                      "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                      "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                      "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                      "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                      "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                      "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
                    ]
                  ],
                  "type": "string"
                },
                "reference": {
                  "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission",
                  "type": "string"
                },
                "remaining": {
                  "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED",
                  "format": "int64",
                  "type": "integer"
                },
                "side": {
                  "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                  "enum": [
                    [
                      "SIDE_UNSPECIFIED",
                      "SIDE_BUY",
                      "SIDE_SELL"
                    ]
                  ],
                  "type": "string"
                },
                "size": {
                  "description": "Size for the order, for example, in a futures market the size equals the number of contracts",
                  "format": "int64",
                  "type": "integer"
                },
                "status": {
                  "description": "The current status for the order. See [`Order.Status`](#vega.Order.Status) - For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field",
                  "enum": [
                    [
                      "STATUS_UNSPECIFIED",
                      "STATUS_ACTIVE",
                      "STATUS_EXPIRED",
                      "STATUS_CANCELLED",
                      "STATUS_STOPPED",
                      "STATUS_FILLED",
                      "STATUS_REJECTED",
                      "STATUS_PARTIALLY_FILLED",
                      "STATUS_PARKED"
                    ]
                  ],
                  "type": "string"
                },
                "time_in_force": {
                  "description": "Time in force indicates how long an order will remain active before it is executed or expires. - See [`Order.TimeInForce`](#vega.Order.TimeInForce)",
                  "enum": [
                    [
                      "TIME_IN_FORCE_UNSPECIFIED",
                      "TIME_IN_FORCE_GTC",
                      "TIME_IN_FORCE_GTT",
                      "TIME_IN_FORCE_IOC",
                      "TIME_IN_FORCE_FOK",
                      "TIME_IN_FORCE_GFA",
                      "TIME_IN_FORCE_GFN"
                    ]
                  ],
                  "type": "string"
                },
                "type": {
                  "description": "Type for the order - See [`Order.Type`](#vega.Order.Type)",
                  "enum": [
                    [
                      "TYPE_UNSPECIFIED",
                      "TYPE_LIMIT",
                      "TYPE_MARKET",
                      "TYPE_NETWORK"
                    ]
                  ],
                  "type": "string"
                },
                "updated_at": {
                  "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "version": {
                  "description": "The version for the order, initial value is version 1 and is incremented after each successful amend",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OrdersByMarketRequest": {
        "description": "Request for a list of orders for a market",
        "properties": {
          "market_id": {
            "description": "Market identifier, required field",
            "type": "string"
          },
          "pagination": {
            "description": "Optional pagination controls",
            "properties": {
              "descending": {
                "description": "Descending reverses the order of the records returned, default is true, if false the results will be returned in ascending order",
                "type": "boolean"
              },
              "limit": {
                "description": "Limit the number of returned records to the value specified, default is 50",
                "format": "int64",
                "type": "integer"
              },
              "skip": {
                "description": "Skip the number of records specified, default is 0",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OrdersByMarketResponse": {
        "description": "Response for a list of orders for a market",
        "properties": {
          "orders": {
            "description": "A list of 0 or more orders",
            "items": {
              "description": "An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties",
              "properties": {
                "batch_id": {
                  "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)",
                  "format": "int64",
                  "type": "integer"
                },
                "created_at": {
                  "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "expires_at": {
                  "description": "Timestamp for when the order will expire, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`",
                  "format": "int64",
                  "type": "integer"
                },
                "id": {
                  "description": "Unique identifier for the order (set by the system after consensus)",
                  "type": "string"
                },
                "liquidity_provision_id": {
                  "description": "Is this order created as part of a liquidity provision, will be empty if not.",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier for the order",
                  "type": "string"
                },
                "party_id": {
                  "description": "Party identifier for the order",
                  "type": "string"
                },
                "pegged_order": {
                  "description": "Pegged order details, used only if the order represents a pegged order.",
                  "properties": {
                    "offset": {
                      "description": "Offset from the price reference",
                      "type": "string"
                    },
                    "reference": {
                      "description": "Which price point are we linked to",
                      "enum": [
                        [
                          "PEGGED_REFERENCE_UNSPECIFIED",
                          "PEGGED_REFERENCE_MID",
                          "PEGGED_REFERENCE_BEST_BID",
                          "PEGGED_REFERENCE_BEST_ASK"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "price": {
                  "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "reason": {
                  "description": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors",
                  "enum": [
                    [
                      "ORDER_ERROR_UNSPECIFIED",
                      "ORDER_ERROR_INVALID_MARKET_ID",
                      "ORDER_ERROR_INVALID_ORDER_ID",
                      "ORDER_ERROR_OUT_OF_SEQUENCE",
                      "ORDER_ERROR_INVALID_REMAINING_SIZE",
                      "ORDER_ERROR_TIME_FAILURE",
                      "ORDER_ERROR_REMOVAL_FAILURE",
                      "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                      "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                      "ORDER_ERROR_EDIT_NOT_ALLOWED",
                      "ORDER_ERROR_AMEND_FAILURE",
                      "ORDER_ERROR_NOT_FOUND",
                      "ORDER_ERROR_INVALID_PARTY_ID",
                      "ORDER_ERROR_MARKET_CLOSED",
                      "ORDER_ERROR_MARGIN_CHECK_FAILED",
                      "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                      "ORDER_ERROR_INTERNAL_ERROR",
                      "ORDER_ERROR_INVALID_SIZE",
                      "ORDER_ERROR_INVALID_PERSISTENCE",
                      "ORDER_ERROR_INVALID_TYPE",
                      "ORDER_ERROR_SELF_TRADING",
                      "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                      "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                      "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                      "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                      "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                      "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                      "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                      "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                      "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                      "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                      "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                      "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                      "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                      "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                      "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                      "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                      "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                      "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                      "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                      "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                      "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                      "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                      "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                      "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                      "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
                    ]
                  ],
                  "type": "string"
                },
                "reference": {
                  "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission",
                  "type": "string"
                },
                "remaining": {
                  "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED",
                  "format": "int64",
                  "type": "integer"
                },
                "side": {
                  "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                  "enum": [
                    [
                      "SIDE_UNSPECIFIED",
                      "SIDE_BUY",
                      "SIDE_SELL"
                    ]
                  ],
                  "type": "string"
                },
                "size": {
                  "description": "Size for the order, for example, in a futures market the size equals the number of contracts",
                  "format": "int64",
                  "type": "integer"
                },
                "status": {
                  "description": "The current status for the order. See [`Order.Status`](#vega.Order.Status) - For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field",
                  "enum": [
                    [
                      "STATUS_UNSPECIFIED",
                      "STATUS_ACTIVE",
                      "STATUS_EXPIRED",
                      "STATUS_CANCELLED",
                      "STATUS_STOPPED",
                      "STATUS_FILLED",
                      "STATUS_REJECTED",
                      "STATUS_PARTIALLY_FILLED",
                      "STATUS_PARKED"
                    ]
                  ],
                  "type": "string"
                },
                "time_in_force": {
                  "description": "Time in force indicates how long an order will remain active before it is executed or expires. - See [`Order.TimeInForce`](#vega.Order.TimeInForce)",
                  "enum": [
                    [
                      "TIME_IN_FORCE_UNSPECIFIED",
                      "TIME_IN_FORCE_GTC",
                      "TIME_IN_FORCE_GTT",
                      "TIME_IN_FORCE_IOC",
                      "TIME_IN_FORCE_FOK",
                      "TIME_IN_FORCE_GFA",
                      "TIME_IN_FORCE_GFN"
                    ]
                  ],
                  "type": "string"
                },
                "type": {
                  "description": "Type for the order - See [`Order.Type`](#vega.Order.Type)",
                  "enum": [
                    [
                      "TYPE_UNSPECIFIED",
                      "TYPE_LIMIT",
                      "TYPE_MARKET",
                      "TYPE_NETWORK"
                    ]
                  ],
                  "type": "string"
                },
                "updated_at": {
                  "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "version": {
                  "description": "The version for the order, initial value is version 1 and is incremented after each successful amend",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OrdersByPartyRequest": {
        "description": "Request for a list of orders for a party",
        "properties": {
          "pagination": {
            "description": "Pagination controls",
            "properties": {
              "descending": {
                "description": "Descending reverses the order of the records returned, default is true, if false the results will be returned in ascending order",
                "type": "boolean"
              },
              "limit": {
                "description": "Limit the number of returned records to the value specified, default is 50",
                "format": "int64",
                "type": "integer"
              },
              "skip": {
                "description": "Skip the number of records specified, default is 0",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "party_id": {
            "description": "Party identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OrdersByPartyResponse": {
        "description": "Response for a list of orders for a party",
        "properties": {
          "orders": {
            "description": "A list of 0 or more orders",
            "items": {
              "description": "An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties",
              "properties": {
                "batch_id": {
                  "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)",
                  "format": "int64",
                  "type": "integer"
                },
                "created_at": {
                  "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "expires_at": {
                  "description": "Timestamp for when the order will expire, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`",
                  "format": "int64",
                  "type": "integer"
                },
                "id": {
                  "description": "Unique identifier for the order (set by the system after consensus)",
                  "type": "string"
                },
                "liquidity_provision_id": {
                  "description": "Is this order created as part of a liquidity provision, will be empty if not.",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier for the order",
                  "type": "string"
                },
                "party_id": {
                  "description": "Party identifier for the order",
                  "type": "string"
                },
                "pegged_order": {
                  "description": "Pegged order details, used only if the order represents a pegged order.",
                  "properties": {
                    "offset": {
                      "description": "Offset from the price reference",
                      "type": "string"
                    },
                    "reference": {
                      "description": "Which price point are we linked to",
                      "enum": [
                        [
                          "PEGGED_REFERENCE_UNSPECIFIED",
                          "PEGGED_REFERENCE_MID",
                          "PEGGED_REFERENCE_BEST_BID",
                          "PEGGED_REFERENCE_BEST_ASK"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "price": {
                  "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "reason": {
                  "description": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors",
                  "enum": [
                    [
                      "ORDER_ERROR_UNSPECIFIED",
                      "ORDER_ERROR_INVALID_MARKET_ID",
                      "ORDER_ERROR_INVALID_ORDER_ID",
                      "ORDER_ERROR_OUT_OF_SEQUENCE",
                      "ORDER_ERROR_INVALID_REMAINING_SIZE",
                      "ORDER_ERROR_TIME_FAILURE",
                      "ORDER_ERROR_REMOVAL_FAILURE",
                      "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                      "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                      "ORDER_ERROR_EDIT_NOT_ALLOWED",
                      "ORDER_ERROR_AMEND_FAILURE",
                      "ORDER_ERROR_NOT_FOUND",
                      "ORDER_ERROR_INVALID_PARTY_ID",
                      "ORDER_ERROR_MARKET_CLOSED",
                      "ORDER_ERROR_MARGIN_CHECK_FAILED",
                      "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                      "ORDER_ERROR_INTERNAL_ERROR",
                      "ORDER_ERROR_INVALID_SIZE",
                      "ORDER_ERROR_INVALID_PERSISTENCE",
                      "ORDER_ERROR_INVALID_TYPE",
                      "ORDER_ERROR_SELF_TRADING",
                      "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                      "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                      "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                      "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                      "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                      "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                      "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                      "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                      "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                      "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                      "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                      "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                      "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                      "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                      "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                      "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                      "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                      "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                      "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                      "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                      "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                      "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                      "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                      "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                      "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
                    ]
                  ],
                  "type": "string"
                },
                "reference": {
                  "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission",
                  "type": "string"
                },
                "remaining": {
                  "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED",
                  "format": "int64",
                  "type": "integer"
                },
                "side": {
                  "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                  "enum": [
                    [
                      "SIDE_UNSPECIFIED",
                      "SIDE_BUY",
                      "SIDE_SELL"
                    ]
                  ],
                  "type": "string"
                },
                "size": {
                  "description": "Size for the order, for example, in a futures market the size equals the number of contracts",
                  "format": "int64",
                  "type": "integer"
                },
                "status": {
                  "description": "The current status for the order. See [`Order.Status`](#vega.Order.Status) - For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field",
                  "enum": [
                    [
                      "STATUS_UNSPECIFIED",
                      "STATUS_ACTIVE",
                      "STATUS_EXPIRED",
                      "STATUS_CANCELLED",
                      "STATUS_STOPPED",
                      "STATUS_FILLED",
                      "STATUS_REJECTED",
                      "STATUS_PARTIALLY_FILLED",
                      "STATUS_PARKED"
                    ]
                  ],
                  "type": "string"
                },
                "time_in_force": {
                  "description": "Time in force indicates how long an order will remain active before it is executed or expires. - See [`Order.TimeInForce`](#vega.Order.TimeInForce)",
                  "enum": [
                    [
                      "TIME_IN_FORCE_UNSPECIFIED",
                      "TIME_IN_FORCE_GTC",
                      "TIME_IN_FORCE_GTT",
                      "TIME_IN_FORCE_IOC",
                      "TIME_IN_FORCE_FOK",
                      "TIME_IN_FORCE_GFA",
                      "TIME_IN_FORCE_GFN"
                    ]
                  ],
                  "type": "string"
                },
                "type": {
                  "description": "Type for the order - See [`Order.Type`](#vega.Order.Type)",
                  "enum": [
                    [
                      "TYPE_UNSPECIFIED",
                      "TYPE_LIMIT",
                      "TYPE_MARKET",
                      "TYPE_NETWORK"
                    ]
                  ],
                  "type": "string"
                },
                "updated_at": {
                  "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "version": {
                  "description": "The version for the order, initial value is version 1 and is incremented after each successful amend",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OrdersSubscribeRequest": {
        "description": "Request to subscribe to a stream of (Orders)[#vega.Order]",
        "properties": {
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          },
          "party_id": {
            "description": "Party identifier",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.OrdersSubscribeResponse": {
        "description": "A stream of orders",
        "properties": {
          "orders": {
            "description": "A list of 0 or more orders",
            "items": {
              "description": "An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties",
              "properties": {
                "batch_id": {
                  "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)",
                  "format": "int64",
                  "type": "integer"
                },
                "created_at": {
                  "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "expires_at": {
                  "description": "Timestamp for when the order will expire, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`",
                  "format": "int64",
                  "type": "integer"
                },
                "id": {
                  "description": "Unique identifier for the order (set by the system after consensus)",
                  "type": "string"
                },
                "liquidity_provision_id": {
                  "description": "Is this order created as part of a liquidity provision, will be empty if not.",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier for the order",
                  "type": "string"
                },
                "party_id": {
                  "description": "Party identifier for the order",
                  "type": "string"
                },
                "pegged_order": {
                  "description": "Pegged order details, used only if the order represents a pegged order.",
                  "properties": {
                    "offset": {
                      "description": "Offset from the price reference",
                      "type": "string"
                    },
                    "reference": {
                      "description": "Which price point are we linked to",
                      "enum": [
                        [
                          "PEGGED_REFERENCE_UNSPECIFIED",
                          "PEGGED_REFERENCE_MID",
                          "PEGGED_REFERENCE_BEST_BID",
                          "PEGGED_REFERENCE_BEST_ASK"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "price": {
                  "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "reason": {
                  "description": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors",
                  "enum": [
                    [
                      "ORDER_ERROR_UNSPECIFIED",
                      "ORDER_ERROR_INVALID_MARKET_ID",
                      "ORDER_ERROR_INVALID_ORDER_ID",
                      "ORDER_ERROR_OUT_OF_SEQUENCE",
                      "ORDER_ERROR_INVALID_REMAINING_SIZE",
                      "ORDER_ERROR_TIME_FAILURE",
                      "ORDER_ERROR_REMOVAL_FAILURE",
                      "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                      "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                      "ORDER_ERROR_EDIT_NOT_ALLOWED",
                      "ORDER_ERROR_AMEND_FAILURE",
                      "ORDER_ERROR_NOT_FOUND",
                      "ORDER_ERROR_INVALID_PARTY_ID",
                      "ORDER_ERROR_MARKET_CLOSED",
                      "ORDER_ERROR_MARGIN_CHECK_FAILED",
                      "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                      "ORDER_ERROR_INTERNAL_ERROR",
                      "ORDER_ERROR_INVALID_SIZE",
                      "ORDER_ERROR_INVALID_PERSISTENCE",
                      "ORDER_ERROR_INVALID_TYPE",
                      "ORDER_ERROR_SELF_TRADING",
                      "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                      "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                      "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                      "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                      "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                      "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                      "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                      "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                      "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                      "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                      "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                      "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                      "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                      "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                      "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                      "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                      "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                      "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                      "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                      "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                      "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                      "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                      "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                      "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                      "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
                    ]
                  ],
                  "type": "string"
                },
                "reference": {
                  "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission",
                  "type": "string"
                },
                "remaining": {
                  "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED",
                  "format": "int64",
                  "type": "integer"
                },
                "side": {
                  "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                  "enum": [
                    [
                      "SIDE_UNSPECIFIED",
                      "SIDE_BUY",
                      "SIDE_SELL"
                    ]
                  ],
                  "type": "string"
                },
                "size": {
                  "description": "Size for the order, for example, in a futures market the size equals the number of contracts",
                  "format": "int64",
                  "type": "integer"
                },
                "status": {
                  "description": "The current status for the order. See [`Order.Status`](#vega.Order.Status) - For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field",
                  "enum": [
                    [
                      "STATUS_UNSPECIFIED",
                      "STATUS_ACTIVE",
                      "STATUS_EXPIRED",
                      "STATUS_CANCELLED",
                      "STATUS_STOPPED",
                      "STATUS_FILLED",
                      "STATUS_REJECTED",
                      "STATUS_PARTIALLY_FILLED",
                      "STATUS_PARKED"
                    ]
                  ],
                  "type": "string"
                },
                "time_in_force": {
                  "description": "Time in force indicates how long an order will remain active before it is executed or expires. - See [`Order.TimeInForce`](#vega.Order.TimeInForce)",
                  "enum": [
                    [
                      "TIME_IN_FORCE_UNSPECIFIED",
                      "TIME_IN_FORCE_GTC",
                      "TIME_IN_FORCE_GTT",
                      "TIME_IN_FORCE_IOC",
                      "TIME_IN_FORCE_FOK",
                      "TIME_IN_FORCE_GFA",
                      "TIME_IN_FORCE_GFN"
                    ]
                  ],
                  "type": "string"
                },
                "type": {
                  "description": "Type for the order - See [`Order.Type`](#vega.Order.Type)",
                  "enum": [
                    [
                      "TYPE_UNSPECIFIED",
                      "TYPE_LIMIT",
                      "TYPE_MARKET",
                      "TYPE_NETWORK"
                    ]
                  ],
                  "type": "string"
                },
                "updated_at": {
                  "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "version": {
                  "description": "The version for the order, initial value is version 1 and is incremented after each successful amend",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.Pagination": {
        "description": "Pagination controls",
        "properties": {
          "descending": {
            "description": "Descending reverses the order of the records returned, default is true, if false the results will be returned in ascending order",
            "type": "boolean"
          },
          "limit": {
            "description": "Limit the number of returned records to the value specified, default is 50",
            "format": "int64",
            "type": "integer"
          },
          "skip": {
            "description": "Skip the number of records specified, default is 0",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.PartiesRequest": {
        "description": "Request for a list of all parties",
        "type": "object"
      },
      "datanode.api.v1.PartiesResponse": {
        "description": "Response to a request for a list of parties",
        "properties": {
          "parties": {
            "description": "A list of 0 or more parties",
            "items": {
              "description": "A party represents an entity who wishes to trade on or query a Vega network",
              "properties": {
                "id": {
                  "description": "A unique identifier for the party, typically represented by a public key",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.PartyAccountsRequest": {
        "description": "Request for a list of accounts for a party",
        "properties": {
          "asset": {
            "description": "Asset identifier",
            "type": "string"
          },
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          },
          "party_id": {
            "description": "Party identifier",
            "type": "string"
          },
          "type": {
            "description": "Account type, required field",
            "enum": [
              [
                "ACCOUNT_TYPE_UNSPECIFIED",
                "ACCOUNT_TYPE_INSURANCE",
                "ACCOUNT_TYPE_SETTLEMENT",
                "ACCOUNT_TYPE_MARGIN",
                "ACCOUNT_TYPE_GENERAL",
                "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                "ACCOUNT_TYPE_FEES_LIQUIDITY",
                "ACCOUNT_TYPE_FEES_MAKER",
                "ACCOUNT_TYPE_LOCK_WITHDRAW",
                "ACCOUNT_TYPE_BOND",
                "ACCOUNT_TYPE_EXTERNAL",
                "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                "ACCOUNT_TYPE_GLOBAL_REWARD",
                "ACCOUNT_TYPE_PENDING_TRANSFERS",
                "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
              ]
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.PartyAccountsResponse": {
        "description": "Response for a list of accounts for a party",
        "properties": {
          "accounts": {
            "description": "A list of 0 or more accounts",
            "items": {
              "description": "Represents an account for an asset on Vega for a particular owner or party",
              "properties": {
                "asset": {
                  "description": "Asset identifier for the account",
                  "type": "string"
                },
                "balance": {
                  "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places and importantly balances cannot be negative",
                  "type": "string"
                },
                "id": {
                  "description": "Unique account identifier (used internally by Vega)",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty",
                  "type": "string"
                },
                "owner": {
                  "description": "The party that the account belongs to, special values include `network`, which represents the Vega network and is most commonly seen during liquidation of distressed trading positions",
                  "type": "string"
                },
                "type": {
                  "description": "The account type related to this account",
                  "enum": [
                    [
                      "ACCOUNT_TYPE_UNSPECIFIED",
                      "ACCOUNT_TYPE_INSURANCE",
                      "ACCOUNT_TYPE_SETTLEMENT",
                      "ACCOUNT_TYPE_MARGIN",
                      "ACCOUNT_TYPE_GENERAL",
                      "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                      "ACCOUNT_TYPE_FEES_LIQUIDITY",
                      "ACCOUNT_TYPE_FEES_MAKER",
                      "ACCOUNT_TYPE_LOCK_WITHDRAW",
                      "ACCOUNT_TYPE_BOND",
                      "ACCOUNT_TYPE_EXTERNAL",
                      "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                      "ACCOUNT_TYPE_GLOBAL_REWARD",
                      "ACCOUNT_TYPE_PENDING_TRANSFERS",
                      "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                      "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.PartyByIDRequest": {
        "description": "Request for a party given a party identifier",
        "properties": {
          "party_id": {
            "description": "Party identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.PartyByIDResponse": {
        "description": "Response for a party given a party identifier",
        "properties": {
          "party": {
            "description": "A party, if found",
            "properties": {
              "id": {
                "description": "A unique identifier for the party, typically represented by a public key",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.PartyStakeRequest": {
        "properties": {
          "party": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.PartyStakeResponse": {
        "properties": {
          "current_stake_available": {
            "type": "string"
          },
          "stake_linkings": {
            "items": {
              "description": "StakeLinking - an event notifying of stake being deposited or removed for a given party These events are emitted for every Staking deposit or removed accepted by the network",
              "properties": {
                "amount": {
                  "description": "The amount of stake deposited or removed",
                  "type": "string"
                },
                "finalized_at": {
                  "description": "The time at which the vega network finalized the state of the event",
                  "format": "int64",
                  "type": "integer"
                },
                "id": {
                  "description": "The internal ID for this staking event",
                  "type": "string"
                },
                "party": {
                  "description": "The party to whom the event is directed at.",
                  "type": "string"
                },
                "status": {
                  "description": "The status of the event",
                  "enum": [
                    [
                      "STATUS_UNSPECIFIED",
                      "STATUS_PENDING",
                      "STATUS_ACCEPTED",
                      "STATUS_REJECTED"
                    ]
                  ],
                  "type": "string"
                },
                "ts": {
                  "description": "The timestamps at which the event was emitted by ethereum",
                  "format": "int64",
                  "type": "integer"
                },
                "tx_hash": {
                  "description": "The hash of the transaction from which the events happen",
                  "type": "string"
                },
                "type": {
                  "description": "The type of event",
                  "enum": [
                    [
                      "TYPE_UNSPECIFIED",
                      "TYPE_LINK",
                      "TYPE_UNLINK"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.PositionsByPartyRequest": {
        "description": "Request for a list of positions for a party Optionally, if a market identifier is set, the results will be filtered for that market only",
        "properties": {
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          },
          "party_id": {
            "description": "Party identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.PositionsByPartyResponse": {
        "description": "Response for a list of positions for a party",
        "properties": {
          "positions": {
            "description": "A list of 0 or more positions",
            "items": {
              "description": "Represents position data for a party on the specified market on Vega",
              "properties": {
                "average_entry_price": {
                  "description": "Average entry price for the position, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier",
                  "type": "string"
                },
                "open_volume": {
                  "description": "Open volume for the position, value is signed +ve for long and -ve for short",
                  "format": "int64",
                  "type": "integer"
                },
                "party_id": {
                  "description": "Party identifier",
                  "type": "string"
                },
                "realised_pnl": {
                  "description": "Realised profit and loss for the position, value is signed +ve for long and -ve for short",
                  "type": "string"
                },
                "unrealised_pnl": {
                  "description": "Unrealised profit and loss for the position, value is signed +ve for long and -ve for short",
                  "type": "string"
                },
                "updated_at": {
                  "description": "Timestamp for the latest time the position was updated",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.PositionsSubscribeRequest": {
        "description": "Request to subscribe to a stream of (Positions)[#vega.Position]",
        "properties": {
          "market_id": {
            "description": "Market identifier, optional field",
            "type": "string"
          },
          "party_id": {
            "description": "Party identifier, optional field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.PositionsSubscribeResponse": {
        "properties": {
          "position": {
            "properties": {
              "average_entry_price": {
                "description": "Average entry price for the position, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "market_id": {
                "description": "Market identifier",
                "type": "string"
              },
              "open_volume": {
                "description": "Open volume for the position, value is signed +ve for long and -ve for short",
                "format": "int64",
                "type": "integer"
              },
              "party_id": {
                "description": "Party identifier",
                "type": "string"
              },
              "realised_pnl": {
                "description": "Realised profit and loss for the position, value is signed +ve for long and -ve for short",
                "type": "string"
              },
              "unrealised_pnl": {
                "description": "Unrealised profit and loss for the position, value is signed +ve for long and -ve for short",
                "type": "string"
              },
              "updated_at": {
                "description": "Timestamp for the latest time the position was updated",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.TradesByMarketRequest": {
        "description": "Request for a list of trades on a market",
        "properties": {
          "market_id": {
            "description": "Market identifier, required field",
            "type": "string"
          },
          "pagination": {
            "description": "Pagination controls",
            "properties": {
              "descending": {
                "description": "Descending reverses the order of the records returned, default is true, if false the results will be returned in ascending order",
                "type": "boolean"
              },
              "limit": {
                "description": "Limit the number of returned records to the value specified, default is 50",
                "format": "int64",
                "type": "integer"
              },
              "skip": {
                "description": "Skip the number of records specified, default is 0",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.TradesByMarketResponse": {
        "description": "Response for a list of trades on a market",
        "properties": {
          "trades": {
            "description": "A list of 0 or more trades",
            "items": {
              "description": "A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega",
              "properties": {
                "aggressor": {
                  "description": "Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                  "enum": [
                    [
                      "SIDE_UNSPECIFIED",
                      "SIDE_BUY",
                      "SIDE_SELL"
                    ]
                  ],
                  "type": "string"
                },
                "buy_order": {
                  "description": "Identifier of the order from the buy side",
                  "type": "string"
                },
                "buyer": {
                  "description": "Unique party identifier for the buyer",
                  "type": "string"
                },
                "buyer_auction_batch": {
                  "description": "Auction batch number that the buy side order was placed in",
                  "format": "int64",
                  "type": "integer"
                },
                "buyer_fee": {
                  "description": "Fee amount charged to the buyer party for the trade",
                  "properties": {
                    "infrastructure_fee": {
                      "description": "Fee amount paid for maintaining the Vega infrastructure",
                      "type": "string"
                    },
                    "liquidity_fee": {
                      "description": "Fee amount paid to market makers",
                      "type": "string"
                    },
                    "maker_fee": {
                      "description": "Fee amount paid to the non-aggressive party of the trade",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique identifier for the trade (generated by Vega)",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier (the market that the trade occurred on)",
                  "type": "string"
                },
                "price": {
                  "description": "Price for the trade, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "sell_order": {
                  "description": "Identifier of the order from the sell side",
                  "type": "string"
                },
                "seller": {
                  "description": "Unique party identifier for the seller",
                  "type": "string"
                },
                "seller_auction_batch": {
                  "description": "Auction batch number that the sell side order was placed in",
                  "format": "int64",
                  "type": "integer"
                },
                "seller_fee": {
                  "description": "Fee amount charged to the seller party for the trade",
                  "properties": {
                    "infrastructure_fee": {
                      "description": "Fee amount paid for maintaining the Vega infrastructure",
                      "type": "string"
                    },
                    "liquidity_fee": {
                      "description": "Fee amount paid to market makers",
                      "type": "string"
                    },
                    "maker_fee": {
                      "description": "Fee amount paid to the non-aggressive party of the trade",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "size": {
                  "description": "Size filled for the trade",
                  "format": "int64",
                  "type": "integer"
                },
                "timestamp": {
                  "description": "Timestamp for when the trade occurred, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "type": {
                  "description": "Type for the trade - See [`Trade.Type`](#vega.Trade.Type)",
                  "enum": [
                    [
                      "TYPE_UNSPECIFIED",
                      "TYPE_DEFAULT",
                      "TYPE_NETWORK_CLOSE_OUT_GOOD",
                      "TYPE_NETWORK_CLOSE_OUT_BAD"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.TradesByOrderRequest": {
        "description": "Request for a list of trades related to an order",
        "properties": {
          "order_id": {
            "description": "Order identifier, required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.TradesByOrderResponse": {
        "description": "Response for a list of trades related to an order",
        "properties": {
          "trades": {
            "description": "A list of 0 or more trades",
            "items": {
              "description": "A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega",
              "properties": {
                "aggressor": {
                  "description": "Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                  "enum": [
                    [
                      "SIDE_UNSPECIFIED",
                      "SIDE_BUY",
                      "SIDE_SELL"
                    ]
                  ],
                  "type": "string"
                },
                "buy_order": {
                  "description": "Identifier of the order from the buy side",
                  "type": "string"
                },
                "buyer": {
                  "description": "Unique party identifier for the buyer",
                  "type": "string"
                },
                "buyer_auction_batch": {
                  "description": "Auction batch number that the buy side order was placed in",
                  "format": "int64",
                  "type": "integer"
                },
                "buyer_fee": {
                  "description": "Fee amount charged to the buyer party for the trade",
                  "properties": {
                    "infrastructure_fee": {
                      "description": "Fee amount paid for maintaining the Vega infrastructure",
                      "type": "string"
                    },
                    "liquidity_fee": {
                      "description": "Fee amount paid to market makers",
                      "type": "string"
                    },
                    "maker_fee": {
                      "description": "Fee amount paid to the non-aggressive party of the trade",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique identifier for the trade (generated by Vega)",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier (the market that the trade occurred on)",
                  "type": "string"
                },
                "price": {
                  "description": "Price for the trade, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "sell_order": {
                  "description": "Identifier of the order from the sell side",
                  "type": "string"
                },
                "seller": {
                  "description": "Unique party identifier for the seller",
                  "type": "string"
                },
                "seller_auction_batch": {
                  "description": "Auction batch number that the sell side order was placed in",
                  "format": "int64",
                  "type": "integer"
                },
                "seller_fee": {
                  "description": "Fee amount charged to the seller party for the trade",
                  "properties": {
                    "infrastructure_fee": {
                      "description": "Fee amount paid for maintaining the Vega infrastructure",
                      "type": "string"
                    },
                    "liquidity_fee": {
                      "description": "Fee amount paid to market makers",
                      "type": "string"
                    },
                    "maker_fee": {
                      "description": "Fee amount paid to the non-aggressive party of the trade",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "size": {
                  "description": "Size filled for the trade",
                  "format": "int64",
                  "type": "integer"
                },
                "timestamp": {
                  "description": "Timestamp for when the trade occurred, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "type": {
                  "description": "Type for the trade - See [`Trade.Type`](#vega.Trade.Type)",
                  "enum": [
                    [
                      "TYPE_UNSPECIFIED",
                      "TYPE_DEFAULT",
                      "TYPE_NETWORK_CLOSE_OUT_GOOD",
                      "TYPE_NETWORK_CLOSE_OUT_BAD"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.TradesByPartyRequest": {
        "description": "Request for a list of trades relating to the given party Optionally, the list can be additionally filtered for trades by market",
        "properties": {
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          },
          "pagination": {
            "description": "Pagination controls",
            "properties": {
              "descending": {
                "description": "Descending reverses the order of the records returned, default is true, if false the results will be returned in ascending order",
                "type": "boolean"
              },
              "limit": {
                "description": "Limit the number of returned records to the value specified, default is 50",
                "format": "int64",
                "type": "integer"
              },
              "skip": {
                "description": "Skip the number of records specified, default is 0",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "party_id": {
            "description": "Party identifier. Required field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.TradesByPartyResponse": {
        "description": "Response for a list of trades relating to a party",
        "properties": {
          "trades": {
            "description": "A list of 0 or more trades",
            "items": {
              "description": "A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega",
              "properties": {
                "aggressor": {
                  "description": "Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                  "enum": [
                    [
                      "SIDE_UNSPECIFIED",
                      "SIDE_BUY",
                      "SIDE_SELL"
                    ]
                  ],
                  "type": "string"
                },
                "buy_order": {
                  "description": "Identifier of the order from the buy side",
                  "type": "string"
                },
                "buyer": {
                  "description": "Unique party identifier for the buyer",
                  "type": "string"
                },
                "buyer_auction_batch": {
                  "description": "Auction batch number that the buy side order was placed in",
                  "format": "int64",
                  "type": "integer"
                },
                "buyer_fee": {
                  "description": "Fee amount charged to the buyer party for the trade",
                  "properties": {
                    "infrastructure_fee": {
                      "description": "Fee amount paid for maintaining the Vega infrastructure",
                      "type": "string"
                    },
                    "liquidity_fee": {
                      "description": "Fee amount paid to market makers",
                      "type": "string"
                    },
                    "maker_fee": {
                      "description": "Fee amount paid to the non-aggressive party of the trade",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique identifier for the trade (generated by Vega)",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier (the market that the trade occurred on)",
                  "type": "string"
                },
                "price": {
                  "description": "Price for the trade, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "sell_order": {
                  "description": "Identifier of the order from the sell side",
                  "type": "string"
                },
                "seller": {
                  "description": "Unique party identifier for the seller",
                  "type": "string"
                },
                "seller_auction_batch": {
                  "description": "Auction batch number that the sell side order was placed in",
                  "format": "int64",
                  "type": "integer"
                },
                "seller_fee": {
                  "description": "Fee amount charged to the seller party for the trade",
                  "properties": {
                    "infrastructure_fee": {
                      "description": "Fee amount paid for maintaining the Vega infrastructure",
                      "type": "string"
                    },
                    "liquidity_fee": {
                      "description": "Fee amount paid to market makers",
                      "type": "string"
                    },
                    "maker_fee": {
                      "description": "Fee amount paid to the non-aggressive party of the trade",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "size": {
                  "description": "Size filled for the trade",
                  "format": "int64",
                  "type": "integer"
                },
                "timestamp": {
                  "description": "Timestamp for when the trade occurred, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "type": {
                  "description": "Type for the trade - See [`Trade.Type`](#vega.Trade.Type)",
                  "enum": [
                    [
                      "TYPE_UNSPECIFIED",
                      "TYPE_DEFAULT",
                      "TYPE_NETWORK_CLOSE_OUT_GOOD",
                      "TYPE_NETWORK_CLOSE_OUT_BAD"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.TradesSubscribeRequest": {
        "description": "Request to subscribe to a stream of (Trades)[#vega.Trade]",
        "properties": {
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          },
          "party_id": {
            "description": "Party identifier",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.TradesSubscribeResponse": {
        "description": "A stream of trades",
        "properties": {
          "trades": {
            "description": "A list of 0 or more trades",
            "items": {
              "description": "A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega",
              "properties": {
                "aggressor": {
                  "description": "Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                  "enum": [
                    [
                      "SIDE_UNSPECIFIED",
                      "SIDE_BUY",
                      "SIDE_SELL"
                    ]
                  ],
                  "type": "string"
                },
                "buy_order": {
                  "description": "Identifier of the order from the buy side",
                  "type": "string"
                },
                "buyer": {
                  "description": "Unique party identifier for the buyer",
                  "type": "string"
                },
                "buyer_auction_batch": {
                  "description": "Auction batch number that the buy side order was placed in",
                  "format": "int64",
                  "type": "integer"
                },
                "buyer_fee": {
                  "description": "Fee amount charged to the buyer party for the trade",
                  "properties": {
                    "infrastructure_fee": {
                      "description": "Fee amount paid for maintaining the Vega infrastructure",
                      "type": "string"
                    },
                    "liquidity_fee": {
                      "description": "Fee amount paid to market makers",
                      "type": "string"
                    },
                    "maker_fee": {
                      "description": "Fee amount paid to the non-aggressive party of the trade",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique identifier for the trade (generated by Vega)",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier (the market that the trade occurred on)",
                  "type": "string"
                },
                "price": {
                  "description": "Price for the trade, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "sell_order": {
                  "description": "Identifier of the order from the sell side",
                  "type": "string"
                },
                "seller": {
                  "description": "Unique party identifier for the seller",
                  "type": "string"
                },
                "seller_auction_batch": {
                  "description": "Auction batch number that the sell side order was placed in",
                  "format": "int64",
                  "type": "integer"
                },
                "seller_fee": {
                  "description": "Fee amount charged to the seller party for the trade",
                  "properties": {
                    "infrastructure_fee": {
                      "description": "Fee amount paid for maintaining the Vega infrastructure",
                      "type": "string"
                    },
                    "liquidity_fee": {
                      "description": "Fee amount paid to market makers",
                      "type": "string"
                    },
                    "maker_fee": {
                      "description": "Fee amount paid to the non-aggressive party of the trade",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "size": {
                  "description": "Size filled for the trade",
                  "format": "int64",
                  "type": "integer"
                },
                "timestamp": {
                  "description": "Timestamp for when the trade occurred, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "type": {
                  "description": "Type for the trade - See [`Trade.Type`](#vega.Trade.Type)",
                  "enum": [
                    [
                      "TYPE_UNSPECIFIED",
                      "TYPE_DEFAULT",
                      "TYPE_NETWORK_CLOSE_OUT_GOOD",
                      "TYPE_NETWORK_CLOSE_OUT_BAD"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.TransferResponsesSubscribeRequest": {
        "type": "object"
      },
      "datanode.api.v1.TransferResponsesSubscribeResponse": {
        "properties": {
          "response": {
            "properties": {
              "balances": {
                "description": "One or more account balances",
                "items": {
                  "description": "Represents the balance for an account during a transfer",
                  "properties": {
                    "account": {
                      "description": "The account relating to the transfer",
                      "properties": {
                        "asset": {
                          "description": "Asset identifier for the account",
                          "type": "string"
                        },
                        "balance": {
                          "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places and importantly balances cannot be negative",
                          "type": "string"
                        },
                        "id": {
                          "description": "Unique account identifier (used internally by Vega)",
                          "type": "string"
                        },
                        "market_id": {
                          "description": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty",
                          "type": "string"
                        },
                        "owner": {
                          "description": "The party that the account belongs to, special values include `network`, which represents the Vega network and is most commonly seen during liquidation of distressed trading positions",
                          "type": "string"
                        },
                        "type": {
                          "description": "The account type related to this account",
                          "enum": [
                            [
                              "ACCOUNT_TYPE_UNSPECIFIED",
                              "ACCOUNT_TYPE_INSURANCE",
                              "ACCOUNT_TYPE_SETTLEMENT",
                              "ACCOUNT_TYPE_MARGIN",
                              "ACCOUNT_TYPE_GENERAL",
                              "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                              "ACCOUNT_TYPE_FEES_LIQUIDITY",
                              "ACCOUNT_TYPE_FEES_MAKER",
                              "ACCOUNT_TYPE_LOCK_WITHDRAW",
                              "ACCOUNT_TYPE_BOND",
                              "ACCOUNT_TYPE_EXTERNAL",
                              "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                              "ACCOUNT_TYPE_GLOBAL_REWARD",
                              "ACCOUNT_TYPE_PENDING_TRANSFERS",
                              "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                              "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                              "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                              "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                            ]
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "balance": {
                      "description": "The balance relating to the transfer",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "transfers": {
                "description": "One or more ledger entries representing the transfers",
                "items": {
                  "description": "Represents a ledger entry on Vega",
                  "properties": {
                    "amount": {
                      "description": "An amount to transfer",
                      "type": "string"
                    },
                    "from_account": {
                      "description": "One or more accounts to transfer from",
                      "type": "string"
                    },
                    "reference": {
                      "description": "A reference for auditing purposes",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                      "format": "int64",
                      "type": "integer"
                    },
                    "to_account": {
                      "description": "One or more accounts to transfer to",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type of ledger entry",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.TransfersRequest": {
        "properties": {
          "is_from": {
            "type": "boolean"
          },
          "is_to": {
            "type": "boolean"
          },
          "pubkey": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.TransfersResponse": {
        "properties": {
          "transfers": {
            "items": {
              "properties": {
                "amount": {
                  "type": "string"
                },
                "asset": {
                  "type": "string"
                },
                "from": {
                  "type": "string"
                },
                "from_account_type": {
                  "enum": [
                    [
                      "ACCOUNT_TYPE_UNSPECIFIED",
                      "ACCOUNT_TYPE_INSURANCE",
                      "ACCOUNT_TYPE_SETTLEMENT",
                      "ACCOUNT_TYPE_MARGIN",
                      "ACCOUNT_TYPE_GENERAL",
                      "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                      "ACCOUNT_TYPE_FEES_LIQUIDITY",
                      "ACCOUNT_TYPE_FEES_MAKER",
                      "ACCOUNT_TYPE_LOCK_WITHDRAW",
                      "ACCOUNT_TYPE_BOND",
                      "ACCOUNT_TYPE_EXTERNAL",
                      "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                      "ACCOUNT_TYPE_GLOBAL_REWARD",
                      "ACCOUNT_TYPE_PENDING_TRANSFERS",
                      "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                      "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                    ]
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "kind": {
                  "oneOf": [
                    {
                      "properties": {
                        "deliver_on": {
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "end_epoch": {
                          "properties": {
                            "value": {
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "factor": {
                          "type": "string"
                        },
                        "start_epoch": {
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                },
                "reference": {
                  "type": "string"
                },
                "status": {
                  "enum": [
                    [
                      "STATUS_UNSPECIFIED",
                      "STATUS_PENDING",
                      "STATUS_DONE",
                      "STATUS_REJECTED",
                      "STATUS_STOPPED",
                      "STATUS_CANCELLED"
                    ]
                  ],
                  "type": "string"
                },
                "timestamp": {
                  "format": "int64",
                  "type": "integer"
                },
                "to": {
                  "type": "string"
                },
                "to_account_type": {
                  "enum": [
                    [
                      "ACCOUNT_TYPE_UNSPECIFIED",
                      "ACCOUNT_TYPE_INSURANCE",
                      "ACCOUNT_TYPE_SETTLEMENT",
                      "ACCOUNT_TYPE_MARGIN",
                      "ACCOUNT_TYPE_GENERAL",
                      "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                      "ACCOUNT_TYPE_FEES_LIQUIDITY",
                      "ACCOUNT_TYPE_FEES_MAKER",
                      "ACCOUNT_TYPE_LOCK_WITHDRAW",
                      "ACCOUNT_TYPE_BOND",
                      "ACCOUNT_TYPE_EXTERNAL",
                      "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                      "ACCOUNT_TYPE_GLOBAL_REWARD",
                      "ACCOUNT_TYPE_PENDING_TRANSFERS",
                      "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                      "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.WithdrawalRequest": {
        "description": "A request to get a specific withdrawal by identifier",
        "properties": {
          "id": {
            "description": "The identifier of the withdrawal",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.WithdrawalResponse": {
        "description": "A response for a withdrawal",
        "properties": {
          "withdrawal": {
            "description": "The withdrawal matching the identifier from the request",
            "properties": {
              "amount": {
                "description": "The amount to be withdrawn",
                "type": "string"
              },
              "asset": {
                "description": "The asset we want to withdraw funds from",
                "type": "string"
              },
              "created_timestamp": {
                "description": "Timestamp for when the network started to process this withdrawal",
                "format": "int64",
                "type": "integer"
              },
              "expiry": {
                "description": "The time until when the withdrawal is valid",
                "format": "int64",
                "type": "integer"
              },
              "ext": {
                "description": "Foreign chain specifics",
                "properties": {
                  "ext": {
                    "oneOf": [
                      {
                        "description": "ERC20 withdrawal details",
                        "properties": {
                          "receiver_address": {
                            "description": "The address into which the bridge will release the funds",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "Unique identifier for the withdrawal",
                "type": "string"
              },
              "party_id": {
                "description": "Unique party identifier of the user initiating the withdrawal",
                "type": "string"
              },
              "ref": {
                "description": "The reference which is used by the foreign chain to refer to this withdrawal",
                "type": "string"
              },
              "status": {
                "description": "The status of the withdrawal",
                "enum": [
                  [
                    "STATUS_UNSPECIFIED",
                    "STATUS_OPEN",
                    "STATUS_REJECTED",
                    "STATUS_FINALIZED"
                  ]
                ],
                "type": "string"
              },
              "tx_hash": {
                "description": "The hash of the foreign chain for this transaction",
                "type": "string"
              },
              "withdrawn_timestamp": {
                "description": "Timestamp for when the withdrawal was finalised by the network",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.WithdrawalsRequest": {
        "description": "A request to get a list of withdrawal from a given party",
        "properties": {
          "party_id": {
            "description": "The party to get the withdrawals for",
            "type": "string"
          }
        },
        "type": "object"
      },
      "datanode.api.v1.WithdrawalsResponse": {
        "description": "The response for a list of withdrawals",
        "properties": {
          "withdrawals": {
            "description": "The list of withdrawals for the specified party",
            "items": {
              "description": "A withdrawal from the Vega network",
              "properties": {
                "amount": {
                  "description": "The amount to be withdrawn",
                  "type": "string"
                },
                "asset": {
                  "description": "The asset we want to withdraw funds from",
                  "type": "string"
                },
                "created_timestamp": {
                  "description": "Timestamp for when the network started to process this withdrawal",
                  "format": "int64",
                  "type": "integer"
                },
                "expiry": {
                  "description": "The time until when the withdrawal is valid",
                  "format": "int64",
                  "type": "integer"
                },
                "ext": {
                  "description": "Foreign chain specifics",
                  "properties": {
                    "ext": {
                      "oneOf": [
                        {
                          "description": "ERC20 withdrawal details",
                          "properties": {
                            "receiver_address": {
                              "description": "The address into which the bridge will release the funds",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique identifier for the withdrawal",
                  "type": "string"
                },
                "party_id": {
                  "description": "Unique party identifier of the user initiating the withdrawal",
                  "type": "string"
                },
                "ref": {
                  "description": "The reference which is used by the foreign chain to refer to this withdrawal",
                  "type": "string"
                },
                "status": {
                  "description": "The status of the withdrawal",
                  "enum": [
                    [
                      "STATUS_UNSPECIFIED",
                      "STATUS_OPEN",
                      "STATUS_REJECTED",
                      "STATUS_FINALIZED"
                    ]
                  ],
                  "type": "string"
                },
                "tx_hash": {
                  "description": "The hash of the foreign chain for this transaction",
                  "type": "string"
                },
                "withdrawn_timestamp": {
                  "description": "Timestamp for when the withdrawal was finalised by the network",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  }
}