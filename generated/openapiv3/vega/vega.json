{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI Spec for Istio APIs.",
    "version": "vega"
  },
  "components": {
    "schemas": {
      "vega.Account": {
        "description": "Represents an account for an asset on Vega for a particular owner or party",
        "properties": {
          "asset": {
            "description": "Asset identifier for the account",
            "type": "string"
          },
          "balance": {
            "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places and importantly balances cannot be negative",
            "type": "string"
          },
          "id": {
            "description": "Unique account identifier (used internally by Vega)",
            "type": "string"
          },
          "market_id": {
            "description": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty",
            "type": "string"
          },
          "owner": {
            "description": "The party that the account belongs to, special values include `network`, which represents the Vega network and is most commonly seen during liquidation of distressed trading positions",
            "type": "string"
          },
          "type": {
            "description": "The account type related to this account",
            "enum": [
              [
                "ACCOUNT_TYPE_UNSPECIFIED",
                "ACCOUNT_TYPE_INSURANCE",
                "ACCOUNT_TYPE_SETTLEMENT",
                "ACCOUNT_TYPE_MARGIN",
                "ACCOUNT_TYPE_GENERAL",
                "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                "ACCOUNT_TYPE_FEES_LIQUIDITY",
                "ACCOUNT_TYPE_FEES_MAKER",
                "ACCOUNT_TYPE_LOCK_WITHDRAW",
                "ACCOUNT_TYPE_BOND",
                "ACCOUNT_TYPE_EXTERNAL",
                "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                "ACCOUNT_TYPE_GLOBAL_REWARD",
                "ACCOUNT_TYPE_PENDING_TRANSFERS",
                "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
              ]
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.AccountType": {
        "description": "Various collateral/account types as used by Vega",
        "enum": [
          [
            "ACCOUNT_TYPE_UNSPECIFIED",
            "ACCOUNT_TYPE_INSURANCE",
            "ACCOUNT_TYPE_SETTLEMENT",
            "ACCOUNT_TYPE_MARGIN",
            "ACCOUNT_TYPE_GENERAL",
            "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
            "ACCOUNT_TYPE_FEES_LIQUIDITY",
            "ACCOUNT_TYPE_FEES_MAKER",
            "ACCOUNT_TYPE_LOCK_WITHDRAW",
            "ACCOUNT_TYPE_BOND",
            "ACCOUNT_TYPE_EXTERNAL",
            "ACCOUNT_TYPE_GLOBAL_INSURANCE",
            "ACCOUNT_TYPE_GLOBAL_REWARD",
            "ACCOUNT_TYPE_PENDING_TRANSFERS",
            "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
            "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
            "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
            "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
          ]
        ],
        "type": "string"
      },
      "vega.AddValidator": {
        "description": "A message to notify when a new validator is being added to the Vega network",
        "properties": {
          "id": {
            "description": "The identifier of the validator",
            "properties": {
              "identifier": {
                "oneOf": [
                  {
                    "description": "Ethereum network",
                    "properties": {
                      "address": {
                        "description": "An Ethereum address",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "description": "Bitcoin network",
                    "properties": {
                      "address": {
                        "description": "A Bitcoin address",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "vega.Asset": {
        "description": "The Vega representation of an external asset",
        "properties": {
          "details": {
            "description": "The definition of the external source for this asset",
            "properties": {
              "decimals": {
                "description": "Number of decimal / precision handled by this asset",
                "format": "int64",
                "type": "integer"
              },
              "name": {
                "description": "Name of the asset (e.g: Great British Pound)",
                "type": "string"
              },
              "quantum": {
                "description": "The minimum economically meaningful amount in the asset",
                "type": "string"
              },
              "source": {
                "oneOf": [
                  {
                    "description": "A built-in asset",
                    "properties": {
                      "max_faucet_amount_mint": {
                        "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "description": "An Ethereum ERC20 asset",
                    "properties": {
                      "contract_address": {
                        "description": "The address of the contract for the token, on the ethereum network",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              },
              "symbol": {
                "description": "Symbol of the asset (e.g: GBP)",
                "type": "string"
              },
              "total_supply": {
                "description": "Total circulating supply for the asset",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "Internal identifier of the asset",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.AssetDetails": {
        "description": "The Vega representation of an external asset",
        "properties": {
          "decimals": {
            "description": "Number of decimal / precision handled by this asset",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "Name of the asset (e.g: Great British Pound)",
            "type": "string"
          },
          "quantum": {
            "description": "The minimum economically meaningful amount in the asset",
            "type": "string"
          },
          "source": {
            "oneOf": [
              {
                "description": "A built-in asset",
                "properties": {
                  "max_faucet_amount_mint": {
                    "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "description": "An Ethereum ERC20 asset",
                "properties": {
                  "contract_address": {
                    "description": "The address of the contract for the token, on the ethereum network",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          },
          "symbol": {
            "description": "Symbol of the asset (e.g: GBP)",
            "type": "string"
          },
          "total_supply": {
            "description": "Total circulating supply for the asset",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.AuctionDuration": {
        "description": "An auction duration is used to configure 3 auction periods: 1. `duration \u003e 0`, `volume == 0`: The auction will last for at least N seconds 2. `duration == 0`, `volume \u003e 0`: The auction will end once we can close with given traded volume 3. `duration \u003e 0`, `volume \u003e 0`: The auction will take at least N seconds, but can end sooner if we can trade a certain volume",
        "properties": {
          "duration": {
            "description": "Duration of the auction in seconds",
            "format": "int64",
            "type": "integer"
          },
          "volume": {
            "description": "Target uncrossing trading volume",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.AuctionIndicativeState": {
        "description": "AuctionIndicativeState is used to emit an event with the indicative price/volume per market during an auction",
        "properties": {
          "auction_end": {
            "description": "The timestamp at which the auction is meant to stop",
            "format": "int64",
            "type": "integer"
          },
          "auction_start": {
            "description": "The timestamp at which the auction started",
            "format": "int64",
            "type": "integer"
          },
          "indicative_price": {
            "description": "The Indicative Uncrossing Price is the price at which all trades would occur if we uncrossed the auction now",
            "type": "string"
          },
          "indicative_volume": {
            "description": "The Indicative Uncrossing Volume is the volume available at the Indicative crossing price if we uncrossed the auction now",
            "format": "int64",
            "type": "integer"
          },
          "market_id": {
            "description": "The market identifier for which this state relates to",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.AuctionTrigger": {
        "description": "Auction triggers indicate what condition triggered an auction (if market is in auction mode)",
        "enum": [
          [
            "AUCTION_TRIGGER_UNSPECIFIED",
            "AUCTION_TRIGGER_BATCH",
            "AUCTION_TRIGGER_OPENING",
            "AUCTION_TRIGGER_PRICE",
            "AUCTION_TRIGGER_LIQUIDITY"
          ]
        ],
        "type": "string"
      },
      "vega.BTCDeposit": {
        "description": "A Bitcoin deposit into Vega",
        "properties": {
          "source_btc_address": {
            "description": "The BTC wallet initiating the deposit",
            "type": "string"
          },
          "target_party_id": {
            "description": "The Vega party identifier (pub-key) which is the target of the deposit",
            "type": "string"
          },
          "vega_asset_id": {
            "description": "The Vega network internal identifier of the asset",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.BTCEvent": {
        "description": "An event from the Bitcoin network",
        "properties": {
          "action": {
            "oneOf": [
              {
                "description": "Deposit BTC asset",
                "properties": {
                  "source_btc_address": {
                    "description": "The BTC wallet initiating the deposit",
                    "type": "string"
                  },
                  "target_party_id": {
                    "description": "The Vega party identifier (pub-key) which is the target of the deposit",
                    "type": "string"
                  },
                  "vega_asset_id": {
                    "description": "The Vega network internal identifier of the asset",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "description": "Withdraw BTC asset",
                "properties": {
                  "reference_nonce": {
                    "description": "The nonce reference of the transaction",
                    "type": "string"
                  },
                  "source_party_id": {
                    "description": "The party identifier (pub-key) initiating the withdrawal",
                    "type": "string"
                  },
                  "target_btc_address": {
                    "description": "Target Bitcoin wallet address",
                    "type": "string"
                  },
                  "vega_asset_id": {
                    "description": "The vega network internal identifier of the asset",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          },
          "block": {
            "description": "The block in which the transaction happened",
            "format": "int64",
            "type": "integer"
          },
          "index": {
            "description": "The index of the transaction",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.BTCWithdrawal": {
        "description": "A Bitcoin withdrawal from Vega",
        "properties": {
          "reference_nonce": {
            "description": "The nonce reference of the transaction",
            "type": "string"
          },
          "source_party_id": {
            "description": "The party identifier (pub-key) initiating the withdrawal",
            "type": "string"
          },
          "target_btc_address": {
            "description": "Target Bitcoin wallet address",
            "type": "string"
          },
          "vega_asset_id": {
            "description": "The vega network internal identifier of the asset",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.BitcoinAddress": {
        "description": "Used as a wrapper for a Bitcoin address (wallet)",
        "properties": {
          "address": {
            "description": "A Bitcoin address",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.BuiltinAsset": {
        "description": "A Vega internal asset",
        "properties": {
          "max_faucet_amount_mint": {
            "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.BuiltinAssetDeposit": {
        "description": "A deposit for a Vega built-in asset",
        "properties": {
          "amount": {
            "description": "The amount to be deposited",
            "type": "string"
          },
          "party_id": {
            "description": "A Vega party identifier (pub-key)",
            "type": "string"
          },
          "vega_asset_id": {
            "description": "A Vega network internal asset identifier",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.BuiltinAssetEvent": {
        "description": "An event related to a Vega built-in asset",
        "properties": {
          "action": {
            "oneOf": [
              {
                "description": "Built-in asset deposit",
                "properties": {
                  "amount": {
                    "description": "The amount to be deposited",
                    "type": "string"
                  },
                  "party_id": {
                    "description": "A Vega party identifier (pub-key)",
                    "type": "string"
                  },
                  "vega_asset_id": {
                    "description": "A Vega network internal asset identifier",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "description": "Built-in asset withdrawal",
                "properties": {
                  "amount": {
                    "description": "The amount to be withdrawn",
                    "type": "string"
                  },
                  "party_id": {
                    "description": "A Vega network party identifier (pub-key)",
                    "type": "string"
                  },
                  "vega_asset_id": {
                    "description": "A Vega network internal asset identifier",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object"
      },
      "vega.BuiltinAssetWithdrawal": {
        "description": "A withdrawal for a Vega built-in asset",
        "properties": {
          "amount": {
            "description": "The amount to be withdrawn",
            "type": "string"
          },
          "party_id": {
            "description": "A Vega network party identifier (pub-key)",
            "type": "string"
          },
          "vega_asset_id": {
            "description": "A Vega network internal asset identifier",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.Candle": {
        "description": "Represents the high, low, open, and closing prices for an interval of trading, referred to commonly as a candlestick or candle",
        "properties": {
          "close": {
            "description": "Closing trade price",
            "type": "string"
          },
          "datetime": {
            "description": "An ISO-8601 datetime with nanosecond precision for when the candle was last updated",
            "type": "string"
          },
          "high": {
            "description": "Highest price for trading during the candle interval",
            "type": "string"
          },
          "interval": {
            "description": "Time interval for the candle - See [`Interval`](#vega.Interval)",
            "enum": [
              [
                "INTERVAL_UNSPECIFIED",
                "INTERVAL_I1M",
                "INTERVAL_I5M",
                "INTERVAL_I15M",
                "INTERVAL_I1H",
                "INTERVAL_I6H",
                "INTERVAL_I1D"
              ]
            ],
            "type": "string"
          },
          "low": {
            "description": "Lowest price for trading during the candle interval",
            "type": "string"
          },
          "open": {
            "description": "Open trade price",
            "type": "string"
          },
          "timestamp": {
            "description": "Timestamp for the point in time when the candle was initially created/opened, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
            "format": "int64",
            "type": "integer"
          },
          "volume": {
            "description": "Total trading volume during the candle interval",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.ChainStatus": {
        "description": "The Vega blockchain status as reported by the node the caller is connected to",
        "enum": [
          [
            "CHAIN_STATUS_UNSPECIFIED",
            "CHAIN_STATUS_DISCONNECTED",
            "CHAIN_STATUS_REPLAYING",
            "CHAIN_STATUS_CONNECTED"
          ]
        ],
        "type": "string"
      },
      "vega.Delegation": {
        "properties": {
          "amount": {
            "description": "Amount delegated",
            "type": "string"
          },
          "epoch_seq": {
            "description": "Epoch of delegation",
            "type": "string"
          },
          "node_id": {
            "description": "Node ID",
            "type": "string"
          },
          "party": {
            "description": "Party which is delegating",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.Deposit": {
        "description": "A deposit on to the Vega network",
        "properties": {
          "amount": {
            "description": "The amount to be deposited",
            "type": "string"
          },
          "asset": {
            "description": "The Vega asset targeted by this deposit",
            "type": "string"
          },
          "created_timestamp": {
            "description": "Timestamp for when the deposit was created on the Vega network",
            "format": "int64",
            "type": "integer"
          },
          "credited_timestamp": {
            "description": "Timestamp for when the Vega account was updated with the deposit",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier for the deposit",
            "type": "string"
          },
          "party_id": {
            "description": "Party identifier of the user initiating the deposit",
            "type": "string"
          },
          "status": {
            "description": "Status of the deposit",
            "enum": [
              [
                "STATUS_UNSPECIFIED",
                "STATUS_OPEN",
                "STATUS_CANCELLED",
                "STATUS_FINALIZED"
              ]
            ],
            "type": "string"
          },
          "tx_hash": {
            "description": "The hash of the transaction from the foreign chain",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.ERC20": {
        "description": "An ERC20 token based asset, living on the ethereum network",
        "properties": {
          "contract_address": {
            "description": "The address of the contract for the token, on the ethereum network",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.ERC20AssetDelist": {
        "description": "An asset deny-listing for an ERC20 token",
        "properties": {
          "vega_asset_id": {
            "description": "The Vega network internal identifier of the asset",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.ERC20AssetList": {
        "description": "An asset allow-listing for an ERC20 token",
        "properties": {
          "vega_asset_id": {
            "description": "The Vega network internal identifier of the asset",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.ERC20Deposit": {
        "description": "An asset deposit for an ERC20 token",
        "properties": {
          "amount": {
            "description": "The amount to be deposited",
            "type": "string"
          },
          "source_ethereum_address": {
            "description": "The Ethereum wallet that initiated the deposit",
            "type": "string"
          },
          "target_party_id": {
            "description": "The Vega party identifier (pub-key) which is the target of the deposit",
            "type": "string"
          },
          "vega_asset_id": {
            "description": "The vega network internal identifier of the asset",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.ERC20Event": {
        "description": "An event related to an ERC20 token",
        "properties": {
          "action": {
            "oneOf": [
              {
                "description": "List an ERC20 asset",
                "properties": {
                  "vega_asset_id": {
                    "description": "The Vega network internal identifier of the asset",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "description": "De-list an ERC20 asset",
                "properties": {
                  "vega_asset_id": {
                    "description": "The Vega network internal identifier of the asset",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "description": "Deposit ERC20 asset",
                "properties": {
                  "amount": {
                    "description": "The amount to be deposited",
                    "type": "string"
                  },
                  "source_ethereum_address": {
                    "description": "The Ethereum wallet that initiated the deposit",
                    "type": "string"
                  },
                  "target_party_id": {
                    "description": "The Vega party identifier (pub-key) which is the target of the deposit",
                    "type": "string"
                  },
                  "vega_asset_id": {
                    "description": "The vega network internal identifier of the asset",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "description": "Withdraw ERC20 asset",
                "properties": {
                  "reference_nonce": {
                    "description": "The reference nonce used for the transaction",
                    "type": "string"
                  },
                  "target_ethereum_address": {
                    "description": "The target Ethereum wallet address",
                    "type": "string"
                  },
                  "vega_asset_id": {
                    "description": "The Vega network internal identifier of the asset",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          },
          "block": {
            "description": "The block in which the transaction was added",
            "format": "int64",
            "type": "integer"
          },
          "index": {
            "description": "Index of the log in the transaction",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.ERC20Withdrawal": {
        "description": "An asset withdrawal for an ERC20 token",
        "properties": {
          "reference_nonce": {
            "description": "The reference nonce used for the transaction",
            "type": "string"
          },
          "target_ethereum_address": {
            "description": "The target Ethereum wallet address",
            "type": "string"
          },
          "vega_asset_id": {
            "description": "The Vega network internal identifier of the asset",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.Epoch": {
        "properties": {
          "delegations": {
            "description": "List of all delegations in epoch",
            "items": {
              "properties": {
                "amount": {
                  "description": "Amount delegated",
                  "type": "string"
                },
                "epoch_seq": {
                  "description": "Epoch of delegation",
                  "type": "string"
                },
                "node_id": {
                  "description": "Node ID",
                  "type": "string"
                },
                "party": {
                  "description": "Party which is delegating",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "seq": {
            "description": "Sequence is used as epoch identifier",
            "format": "int64",
            "type": "integer"
          },
          "timestamps": {
            "description": "Timestamps for start/end etc",
            "properties": {
              "end_time": {
                "description": "Timestamp of epoch end in nanoseconds, empty if not started - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "expiry_time": {
                "description": "Timestamp of epoch expiry in nanoseconds - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "first_block": {
                "description": "Height of first block in the epoch",
                "format": "int64",
                "type": "integer"
              },
              "last_block": {
                "description": "Height of last block in the epoch, empty if not ended",
                "format": "int64",
                "type": "integer"
              },
              "start_time": {
                "description": "Timestamp of epoch start in nanoseconds - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "validators": {
            "description": "Validators that participated in this epoch",
            "items": {
              "properties": {
                "avatar_url": {
                  "description": "Avatar url",
                  "type": "string"
                },
                "delegations": {
                  "description": "Node's delegations",
                  "items": {
                    "properties": {
                      "amount": {
                        "description": "Amount delegated",
                        "type": "string"
                      },
                      "epoch_seq": {
                        "description": "Epoch of delegation",
                        "type": "string"
                      },
                      "node_id": {
                        "description": "Node ID",
                        "type": "string"
                      },
                      "party": {
                        "description": "Party which is delegating",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "epoch_data": {
                  "description": "Informantion about epoch",
                  "properties": {
                    "offline": {
                      "description": "Total number of offline epochs since node was created",
                      "format": "int32",
                      "type": "integer"
                    },
                    "online": {
                      "description": "Total number of online epochs since node was created",
                      "format": "int32",
                      "type": "integer"
                    },
                    "total": {
                      "description": "Total number of epochs since node was created",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "ethereum_adddress": {
                  "description": "Ethereum public key of the node",
                  "type": "string"
                },
                "id": {
                  "description": "The node ID (wallet ID)",
                  "type": "string"
                },
                "info_url": {
                  "description": "URL where I can find out more info on the node",
                  "type": "string"
                },
                "location": {
                  "description": "Country code for the location of the node",
                  "type": "string"
                },
                "max_intended_stake": {
                  "description": "Max amount of (wanted) stake, is this a network param or a node param",
                  "type": "string"
                },
                "name": {
                  "description": "Node name",
                  "type": "string"
                },
                "normalised_score": {
                  "description": "Node normalised score",
                  "type": "string"
                },
                "pending_stake": {
                  "description": "Amount of stake on the next epoch",
                  "type": "string"
                },
                "performance": {
                  "description": "Performance",
                  "type": "string"
                },
                "pub_key": {
                  "description": "Pub key of the node operator",
                  "type": "string"
                },
                "raw_score": {
                  "description": "Raw Score",
                  "type": "string"
                },
                "score": {
                  "description": "Node score",
                  "type": "string"
                },
                "staked_by_delegates": {
                  "description": "The amount of stake that has been delegated by token holders",
                  "type": "string"
                },
                "staked_by_operator": {
                  "description": "The amount the node has put up themselves",
                  "type": "string"
                },
                "staked_total": {
                  "description": "Total amount staked on node",
                  "type": "string"
                },
                "status": {
                  "description": "Node status",
                  "enum": [
                    [
                      "NODE_STATUS_UNSPECIFIED",
                      "NODE_STATUS_VALIDATOR",
                      "NODE_STATUS_NON_VALIDATOR"
                    ]
                  ],
                  "type": "string"
                },
                "tm_pub_key": {
                  "description": "Public key of Tendermint",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "vega.EpochAction": {
        "description": "What epoch action has occurred",
        "enum": [
          [
            "EPOCH_ACTION_UNSPECIFIED",
            "EPOCH_ACTION_START",
            "EPOCH_ACTION_END"
          ]
        ],
        "type": "string"
      },
      "vega.EpochData": {
        "properties": {
          "offline": {
            "description": "Total number of offline epochs since node was created",
            "format": "int32",
            "type": "integer"
          },
          "online": {
            "description": "Total number of online epochs since node was created",
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "description": "Total number of epochs since node was created",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.EpochParticipation": {
        "properties": {
          "epoch": {
            "properties": {
              "delegations": {
                "description": "List of all delegations in epoch",
                "items": {
                  "properties": {
                    "amount": {
                      "description": "Amount delegated",
                      "type": "string"
                    },
                    "epoch_seq": {
                      "description": "Epoch of delegation",
                      "type": "string"
                    },
                    "node_id": {
                      "description": "Node ID",
                      "type": "string"
                    },
                    "party": {
                      "description": "Party which is delegating",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "seq": {
                "description": "Sequence is used as epoch identifier",
                "format": "int64",
                "type": "integer"
              },
              "timestamps": {
                "description": "Timestamps for start/end etc",
                "properties": {
                  "end_time": {
                    "description": "Timestamp of epoch end in nanoseconds, empty if not started - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                    "format": "int64",
                    "type": "integer"
                  },
                  "expiry_time": {
                    "description": "Timestamp of epoch expiry in nanoseconds - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                    "format": "int64",
                    "type": "integer"
                  },
                  "first_block": {
                    "description": "Height of first block in the epoch",
                    "format": "int64",
                    "type": "integer"
                  },
                  "last_block": {
                    "description": "Height of last block in the epoch, empty if not ended",
                    "format": "int64",
                    "type": "integer"
                  },
                  "start_time": {
                    "description": "Timestamp of epoch start in nanoseconds - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "validators": {
                "description": "Validators that participated in this epoch",
                "items": {
                  "properties": {
                    "avatar_url": {
                      "description": "Avatar url",
                      "type": "string"
                    },
                    "delegations": {
                      "description": "Node's delegations",
                      "items": {
                        "properties": {
                          "amount": {
                            "description": "Amount delegated",
                            "type": "string"
                          },
                          "epoch_seq": {
                            "description": "Epoch of delegation",
                            "type": "string"
                          },
                          "node_id": {
                            "description": "Node ID",
                            "type": "string"
                          },
                          "party": {
                            "description": "Party which is delegating",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "epoch_data": {
                      "description": "Informantion about epoch",
                      "properties": {
                        "offline": {
                          "description": "Total number of offline epochs since node was created",
                          "format": "int32",
                          "type": "integer"
                        },
                        "online": {
                          "description": "Total number of online epochs since node was created",
                          "format": "int32",
                          "type": "integer"
                        },
                        "total": {
                          "description": "Total number of epochs since node was created",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "ethereum_adddress": {
                      "description": "Ethereum public key of the node",
                      "type": "string"
                    },
                    "id": {
                      "description": "The node ID (wallet ID)",
                      "type": "string"
                    },
                    "info_url": {
                      "description": "URL where I can find out more info on the node",
                      "type": "string"
                    },
                    "location": {
                      "description": "Country code for the location of the node",
                      "type": "string"
                    },
                    "max_intended_stake": {
                      "description": "Max amount of (wanted) stake, is this a network param or a node param",
                      "type": "string"
                    },
                    "name": {
                      "description": "Node name",
                      "type": "string"
                    },
                    "normalised_score": {
                      "description": "Node normalised score",
                      "type": "string"
                    },
                    "pending_stake": {
                      "description": "Amount of stake on the next epoch",
                      "type": "string"
                    },
                    "performance": {
                      "description": "Performance",
                      "type": "string"
                    },
                    "pub_key": {
                      "description": "Pub key of the node operator",
                      "type": "string"
                    },
                    "raw_score": {
                      "description": "Raw Score",
                      "type": "string"
                    },
                    "score": {
                      "description": "Node score",
                      "type": "string"
                    },
                    "staked_by_delegates": {
                      "description": "The amount of stake that has been delegated by token holders",
                      "type": "string"
                    },
                    "staked_by_operator": {
                      "description": "The amount the node has put up themselves",
                      "type": "string"
                    },
                    "staked_total": {
                      "description": "Total amount staked on node",
                      "type": "string"
                    },
                    "status": {
                      "description": "Node status",
                      "enum": [
                        [
                          "NODE_STATUS_UNSPECIFIED",
                          "NODE_STATUS_VALIDATOR",
                          "NODE_STATUS_NON_VALIDATOR"
                        ]
                      ],
                      "type": "string"
                    },
                    "tm_pub_key": {
                      "description": "Public key of Tendermint",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "offline": {
            "format": "int64",
            "type": "integer"
          },
          "online": {
            "format": "int64",
            "type": "integer"
          },
          "total_rewards": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "vega.EpochTimestamps": {
        "description": "Describes in both human readable and block time when an epoch spans",
        "properties": {
          "end_time": {
            "description": "Timestamp of epoch end in nanoseconds, empty if not started - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
            "format": "int64",
            "type": "integer"
          },
          "expiry_time": {
            "description": "Timestamp of epoch expiry in nanoseconds - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
            "format": "int64",
            "type": "integer"
          },
          "first_block": {
            "description": "Height of first block in the epoch",
            "format": "int64",
            "type": "integer"
          },
          "last_block": {
            "description": "Height of last block in the epoch, empty if not ended",
            "format": "int64",
            "type": "integer"
          },
          "start_time": {
            "description": "Timestamp of epoch start in nanoseconds - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.Erc20WithdrawExt": {
        "description": "An extension of data required for the withdraw submissions",
        "properties": {
          "receiver_address": {
            "description": "The address into which the bridge will release the funds",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.ErrorDetail": {
        "description": "Represents Vega domain specific error information over gRPC/Protobuf",
        "properties": {
          "code": {
            "description": "A Vega API domain specific unique error code, useful for client side mappings, e.g. 10004",
            "format": "int32",
            "type": "integer"
          },
          "inner": {
            "description": "Any inner error information that could add more context, or be helpful for error reporting",
            "type": "string"
          },
          "message": {
            "description": "A message that describes the error in more detail, should describe the problem encountered",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.EthereumAddress": {
        "description": "Used as a wrapper for an Ethereum address (wallet/contract)",
        "properties": {
          "address": {
            "description": "An Ethereum address",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.EthereumConfig": {
        "description": "Ethereum configuration details.",
        "properties": {
          "chain_id": {
            "description": "Chain identifier of this Ethereum network.",
            "type": "string"
          },
          "collateral_bridge_contract": {
            "description": "// Contract configuration of the collateral bridge contract for this Ethereum network.",
            "properties": {
              "address": {
                "description": "Address of the contract for this Ethereum network. The address should start with \"0x\".",
                "type": "string"
              },
              "deployment_block_height": {
                "description": "Block height at which the stacking contract has been deployed for this Ethereum network.",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "confirmations": {
            "description": "Number of block confirmations to wait to consider an Ethereum transaction trusted. An Ethereum block is trusted when there are at least \"n\" blocks confirmed by the network, \"n\" being the number of `confirmations` required. If `confirmations` was set to `3`, and the current block to be forged (or mined) on Ethereum is block 14, block 10 would be considered as trusted, but not block 11.",
            "format": "int32",
            "type": "integer"
          },
          "network_id": {
            "description": "Network identifier of this Ethereum network.",
            "type": "string"
          },
          "staking_bridge_contract": {
            "description": "Contract configuration of the stacking bridge contract for this Ethereum network.",
            "properties": {
              "address": {
                "description": "Address of the contract for this Ethereum network. The address should start with \"0x\".",
                "type": "string"
              },
              "deployment_block_height": {
                "description": "Block height at which the stacking contract has been deployed for this Ethereum network.",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "token_vesting_contract": {
            "description": "Contract configuration of the token vesting contract for this Ethereum network.",
            "properties": {
              "address": {
                "description": "Address of the contract for this Ethereum network. The address should start with \"0x\".",
                "type": "string"
              },
              "deployment_block_height": {
                "description": "Block height at which the stacking contract has been deployed for this Ethereum network.",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "vega.EthereumContractConfig": {
        "properties": {
          "address": {
            "description": "Address of the contract for this Ethereum network. The address should start with \"0x\".",
            "type": "string"
          },
          "deployment_block_height": {
            "description": "Block height at which the stacking contract has been deployed for this Ethereum network.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.Fee": {
        "description": "Represents any fees paid by a party, resulting from a trade",
        "properties": {
          "infrastructure_fee": {
            "description": "Fee amount paid for maintaining the Vega infrastructure",
            "type": "string"
          },
          "liquidity_fee": {
            "description": "Fee amount paid to market makers",
            "type": "string"
          },
          "maker_fee": {
            "description": "Fee amount paid to the non-aggressive party of the trade",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.FeeFactors": {
        "description": "Fee factors definition",
        "properties": {
          "infrastructure_fee": {
            "description": "Infrastructure fee",
            "type": "string"
          },
          "liquidity_fee": {
            "description": "Liquidity fee",
            "type": "string"
          },
          "maker_fee": {
            "description": "Maker fee",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.Fees": {
        "description": "Fees definition",
        "properties": {
          "factors": {
            "description": "Fee factors",
            "properties": {
              "infrastructure_fee": {
                "description": "Infrastructure fee",
                "type": "string"
              },
              "liquidity_fee": {
                "description": "Liquidity fee",
                "type": "string"
              },
              "maker_fee": {
                "description": "Maker fee",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "vega.FinancialAmount": {
        "description": "Asset value information used within a transfer",
        "properties": {
          "amount": {
            "description": "A signed integer amount of asset",
            "type": "string"
          },
          "asset": {
            "description": "Asset identifier",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.Future": {
        "description": "Future product definition",
        "properties": {
          "oracle_spec_binding": {
            "description": "The binding between the oracle spec and the oracle data",
            "properties": {
              "settlement_price_property": {
                "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                "type": "string"
              },
              "trading_termination_property": {
                "description": "the name of the property in the oracle data that signals termination of trading",
                "type": "string"
              }
            },
            "type": "object"
          },
          "oracle_spec_for_settlement_price": {
            "description": "The oracle spec describing the settlement price oracle filter",
            "properties": {
              "created_at": {
                "description": "Creation Date time",
                "format": "int64",
                "type": "integer"
              },
              "filters": {
                "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                "items": {
                  "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                  "properties": {
                    "conditions": {
                      "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                      "items": {
                        "description": "Condition describes the condition that must be validated by the",
                        "properties": {
                          "operator": {
                            "description": "comparator is the type of comparison to make on the value.",
                            "enum": [
                              [
                                "OPERATOR_UNSPECIFIED",
                                "OPERATOR_EQUALS",
                                "OPERATOR_GREATER_THAN",
                                "OPERATOR_GREATER_THAN_OR_EQUAL",
                                "OPERATOR_LESS_THAN",
                                "OPERATOR_LESS_THAN_OR_EQUAL"
                              ]
                            ],
                            "type": "string"
                          },
                          "value": {
                            "description": "value is used by the comparator.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "key": {
                      "description": "key is the oracle data property key targeted by the filter.",
                      "properties": {
                        "name": {
                          "description": "name is the name of the property.",
                          "type": "string"
                        },
                        "type": {
                          "description": "type is the type of the property.",
                          "enum": [
                            [
                              "TYPE_UNSPECIFIED",
                              "TYPE_EMPTY",
                              "TYPE_INTEGER",
                              "TYPE_STRING",
                              "TYPE_BOOLEAN",
                              "TYPE_DECIMAL",
                              "TYPE_TIMESTAMP"
                            ]
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "id": {
                "description": "id is a hash generated from the OracleSpec data.",
                "type": "string"
              },
              "pub_keys": {
                "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "status": {
                "description": "status describes the status of the oracle spec",
                "enum": [
                  [
                    "STATUS_UNSPECIFIED",
                    "STATUS_ACTIVE",
                    "STATUS_DEACTIVATED"
                  ]
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "Last Updated timestamp",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "oracle_spec_for_trading_termination": {
            "description": "the oracle spec describing the trading termination oracle filter",
            "properties": {
              "created_at": {
                "description": "Creation Date time",
                "format": "int64",
                "type": "integer"
              },
              "filters": {
                "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                "items": {
                  "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                  "properties": {
                    "conditions": {
                      "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                      "items": {
                        "description": "Condition describes the condition that must be validated by the",
                        "properties": {
                          "operator": {
                            "description": "comparator is the type of comparison to make on the value.",
                            "enum": [
                              [
                                "OPERATOR_UNSPECIFIED",
                                "OPERATOR_EQUALS",
                                "OPERATOR_GREATER_THAN",
                                "OPERATOR_GREATER_THAN_OR_EQUAL",
                                "OPERATOR_LESS_THAN",
                                "OPERATOR_LESS_THAN_OR_EQUAL"
                              ]
                            ],
                            "type": "string"
                          },
                          "value": {
                            "description": "value is used by the comparator.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "key": {
                      "description": "key is the oracle data property key targeted by the filter.",
                      "properties": {
                        "name": {
                          "description": "name is the name of the property.",
                          "type": "string"
                        },
                        "type": {
                          "description": "type is the type of the property.",
                          "enum": [
                            [
                              "TYPE_UNSPECIFIED",
                              "TYPE_EMPTY",
                              "TYPE_INTEGER",
                              "TYPE_STRING",
                              "TYPE_BOOLEAN",
                              "TYPE_DECIMAL",
                              "TYPE_TIMESTAMP"
                            ]
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "id": {
                "description": "id is a hash generated from the OracleSpec data.",
                "type": "string"
              },
              "pub_keys": {
                "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "status": {
                "description": "status describes the status of the oracle spec",
                "enum": [
                  [
                    "STATUS_UNSPECIFIED",
                    "STATUS_ACTIVE",
                    "STATUS_DEACTIVATED"
                  ]
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "Last Updated timestamp",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "quote_name": {
            "description": "Quote name of the instrument",
            "type": "string"
          },
          "settlement_asset": {
            "description": "The asset for the future",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.FutureProduct": {
        "description": "Future product configuration",
        "properties": {
          "oracle_spec_binding": {
            "description": "The binding between the oracle spec and the settlement price",
            "properties": {
              "settlement_price_property": {
                "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                "type": "string"
              },
              "trading_termination_property": {
                "description": "the name of the property in the oracle data that signals termination of trading",
                "type": "string"
              }
            },
            "type": "object"
          },
          "oracle_spec_for_settlement_price": {
            "description": "The oracle spec describing the oracle data of settlement price",
            "properties": {
              "filters": {
                "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                "items": {
                  "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                  "properties": {
                    "conditions": {
                      "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                      "items": {
                        "description": "Condition describes the condition that must be validated by the",
                        "properties": {
                          "operator": {
                            "description": "comparator is the type of comparison to make on the value.",
                            "enum": [
                              [
                                "OPERATOR_UNSPECIFIED",
                                "OPERATOR_EQUALS",
                                "OPERATOR_GREATER_THAN",
                                "OPERATOR_GREATER_THAN_OR_EQUAL",
                                "OPERATOR_LESS_THAN",
                                "OPERATOR_LESS_THAN_OR_EQUAL"
                              ]
                            ],
                            "type": "string"
                          },
                          "value": {
                            "description": "value is used by the comparator.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "key": {
                      "description": "key is the oracle data property key targeted by the filter.",
                      "properties": {
                        "name": {
                          "description": "name is the name of the property.",
                          "type": "string"
                        },
                        "type": {
                          "description": "type is the type of the property.",
                          "enum": [
                            [
                              "TYPE_UNSPECIFIED",
                              "TYPE_EMPTY",
                              "TYPE_INTEGER",
                              "TYPE_STRING",
                              "TYPE_BOOLEAN",
                              "TYPE_DECIMAL",
                              "TYPE_TIMESTAMP"
                            ]
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "pub_keys": {
                "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "oracle_spec_for_trading_termination": {
            "description": "The oracle spec describing the oracle data of trading termination",
            "properties": {
              "filters": {
                "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                "items": {
                  "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                  "properties": {
                    "conditions": {
                      "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                      "items": {
                        "description": "Condition describes the condition that must be validated by the",
                        "properties": {
                          "operator": {
                            "description": "comparator is the type of comparison to make on the value.",
                            "enum": [
                              [
                                "OPERATOR_UNSPECIFIED",
                                "OPERATOR_EQUALS",
                                "OPERATOR_GREATER_THAN",
                                "OPERATOR_GREATER_THAN_OR_EQUAL",
                                "OPERATOR_LESS_THAN",
                                "OPERATOR_LESS_THAN_OR_EQUAL"
                              ]
                            ],
                            "type": "string"
                          },
                          "value": {
                            "description": "value is used by the comparator.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "key": {
                      "description": "key is the oracle data property key targeted by the filter.",
                      "properties": {
                        "name": {
                          "description": "name is the name of the property.",
                          "type": "string"
                        },
                        "type": {
                          "description": "type is the type of the property.",
                          "enum": [
                            [
                              "TYPE_UNSPECIFIED",
                              "TYPE_EMPTY",
                              "TYPE_INTEGER",
                              "TYPE_STRING",
                              "TYPE_BOOLEAN",
                              "TYPE_DECIMAL",
                              "TYPE_TIMESTAMP"
                            ]
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "pub_keys": {
                "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "quote_name": {
            "description": "Product quote name",
            "type": "string"
          },
          "settlement_asset": {
            "description": "Product settlement asset identifier",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.GovernanceData": {
        "description": "Governance data",
        "properties": {
          "no": {
            "description": "All \"no\" votes against the proposal above",
            "items": {
              "description": "Governance vote",
              "properties": {
                "party_id": {
                  "description": "Voter's party identifier",
                  "type": "string"
                },
                "proposal_id": {
                  "description": "Identifier of the proposal being voted on",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                  "format": "int64",
                  "type": "integer"
                },
                "total_governance_token_balance": {
                  "description": "Total number of governance token for the party that casted the vote",
                  "type": "string"
                },
                "total_governance_token_weight": {
                  "description": "The weight of this vote based on the total of governance token",
                  "type": "string"
                },
                "value": {
                  "description": "Actual vote",
                  "enum": [
                    [
                      "VALUE_UNSPECIFIED",
                      "VALUE_NO",
                      "VALUE_YES"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "no_party": {
            "additionalProperties": {
              "properties": {
                "party_id": {
                  "description": "Voter's party identifier",
                  "type": "string"
                },
                "proposal_id": {
                  "description": "Identifier of the proposal being voted on",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                  "format": "int64",
                  "type": "integer"
                },
                "total_governance_token_balance": {
                  "description": "Total number of governance token for the party that casted the vote",
                  "type": "string"
                },
                "total_governance_token_weight": {
                  "description": "The weight of this vote based on the total of governance token",
                  "type": "string"
                },
                "value": {
                  "description": "Actual vote",
                  "enum": [
                    [
                      "VALUE_UNSPECIFIED",
                      "VALUE_NO",
                      "VALUE_YES"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "All latest NO votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
            "type": "object"
          },
          "proposal": {
            "description": "The governance proposal",
            "properties": {
              "error_details": {
                "description": "The detailed error associated to the reason.",
                "type": "string"
              },
              "id": {
                "description": "Unique proposal identifier",
                "type": "string"
              },
              "party_id": {
                "description": "Party identifier of the author (the party submitting the proposal)",
                "type": "string"
              },
              "reason": {
                "description": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses",
                "enum": [
                  [
                    "PROPOSAL_ERROR_UNSPECIFIED",
                    "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
                    "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
                    "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
                    "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
                    "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
                    "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
                    "PROPOSAL_ERROR_NO_PRODUCT",
                    "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
                    "PROPOSAL_ERROR_NO_TRADING_MODE",
                    "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
                    "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
                    "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
                    "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
                    "PROPOSAL_ERROR_INVALID_ASSET",
                    "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
                    "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
                    "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
                    "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
                    "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
                    "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
                    "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
                    "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
                    "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
                    "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
                    "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
                    "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
                    "PROPOSAL_ERROR_INVALID_SHAPE",
                    "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
                    "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
                    "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
                    "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
                  ]
                ],
                "type": "string"
              },
              "reference": {
                "description": "Proposal reference",
                "type": "string"
              },
              "state": {
                "description": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition",
                "enum": [
                  [
                    "STATE_UNSPECIFIED",
                    "STATE_FAILED",
                    "STATE_OPEN",
                    "STATE_PASSED",
                    "STATE_REJECTED",
                    "STATE_DECLINED",
                    "STATE_ENACTED",
                    "STATE_WAITING_FOR_NODE_VOTE"
                  ]
                ],
                "type": "string"
              },
              "terms": {
                "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted",
                "properties": {
                  "change": {
                    "oneOf": [
                      {
                        "description": "Proposal change for modifying an existing market on Vega",
                        "type": "object"
                      },
                      {
                        "description": "Proposal change for creating new market on Vega",
                        "properties": {
                          "changes": {
                            "description": "The configuration of the new market",
                            "properties": {
                              "decimal_places": {
                                "description": "Decimal places used for the new market",
                                "format": "int64",
                                "type": "integer"
                              },
                              "instrument": {
                                "description": "New market instrument configuration",
                                "properties": {
                                  "code": {
                                    "description": "Instrument code",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Instrument name",
                                    "type": "string"
                                  },
                                  "product": {
                                    "oneOf": [
                                      {
                                        "description": "Future",
                                        "properties": {
                                          "oracle_spec_binding": {
                                            "description": "The binding between the oracle spec and the settlement price",
                                            "properties": {
                                              "settlement_price_property": {
                                                "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                                "type": "string"
                                              },
                                              "trading_termination_property": {
                                                "description": "the name of the property in the oracle data that signals termination of trading",
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "oracle_spec_for_settlement_price": {
                                            "description": "The oracle spec describing the oracle data of settlement price",
                                            "properties": {
                                              "filters": {
                                                "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                "items": {
                                                  "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                  "properties": {
                                                    "conditions": {
                                                      "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                      "items": {
                                                        "description": "Condition describes the condition that must be validated by the",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "comparator is the type of comparison to make on the value.",
                                                            "enum": [
                                                              [
                                                                "OPERATOR_UNSPECIFIED",
                                                                "OPERATOR_EQUALS",
                                                                "OPERATOR_GREATER_THAN",
                                                                "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                "OPERATOR_LESS_THAN",
                                                                "OPERATOR_LESS_THAN_OR_EQUAL"
                                                              ]
                                                            ],
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "description": "value is used by the comparator.",
                                                            "type": "string"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "key": {
                                                      "description": "key is the oracle data property key targeted by the filter.",
                                                      "properties": {
                                                        "name": {
                                                          "description": "name is the name of the property.",
                                                          "type": "string"
                                                        },
                                                        "type": {
                                                          "description": "type is the type of the property.",
                                                          "enum": [
                                                            [
                                                              "TYPE_UNSPECIFIED",
                                                              "TYPE_EMPTY",
                                                              "TYPE_INTEGER",
                                                              "TYPE_STRING",
                                                              "TYPE_BOOLEAN",
                                                              "TYPE_DECIMAL",
                                                              "TYPE_TIMESTAMP"
                                                            ]
                                                          ],
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "pub_keys": {
                                                "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "oracle_spec_for_trading_termination": {
                                            "description": "The oracle spec describing the oracle data of trading termination",
                                            "properties": {
                                              "filters": {
                                                "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                                "items": {
                                                  "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                                  "properties": {
                                                    "conditions": {
                                                      "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                      "items": {
                                                        "description": "Condition describes the condition that must be validated by the",
                                                        "properties": {
                                                          "operator": {
                                                            "description": "comparator is the type of comparison to make on the value.",
                                                            "enum": [
                                                              [
                                                                "OPERATOR_UNSPECIFIED",
                                                                "OPERATOR_EQUALS",
                                                                "OPERATOR_GREATER_THAN",
                                                                "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                                "OPERATOR_LESS_THAN",
                                                                "OPERATOR_LESS_THAN_OR_EQUAL"
                                                              ]
                                                            ],
                                                            "type": "string"
                                                          },
                                                          "value": {
                                                            "description": "value is used by the comparator.",
                                                            "type": "string"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "key": {
                                                      "description": "key is the oracle data property key targeted by the filter.",
                                                      "properties": {
                                                        "name": {
                                                          "description": "name is the name of the property.",
                                                          "type": "string"
                                                        },
                                                        "type": {
                                                          "description": "type is the type of the property.",
                                                          "enum": [
                                                            [
                                                              "TYPE_UNSPECIFIED",
                                                              "TYPE_EMPTY",
                                                              "TYPE_INTEGER",
                                                              "TYPE_STRING",
                                                              "TYPE_BOOLEAN",
                                                              "TYPE_DECIMAL",
                                                              "TYPE_TIMESTAMP"
                                                            ]
                                                          ],
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "pub_keys": {
                                                "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "quote_name": {
                                            "description": "Product quote name",
                                            "type": "string"
                                          },
                                          "settlement_asset": {
                                            "description": "Product settlement asset identifier",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "liquidity_monitoring_parameters": {
                                "description": "Liquidity monitoring parameters",
                                "properties": {
                                  "auction_extension": {
                                    "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "target_stake_parameters": {
                                    "description": "Specifies parameters related to target stake calculation",
                                    "properties": {
                                      "scaling_factor": {
                                        "description": "Specifies scaling factors used in target stake calculation",
                                        "type": "number"
                                      },
                                      "time_window": {
                                        "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                        "format": "int64",
                                        "type": "integer"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "triggering_ratio": {
                                    "description": "Specifies the triggering ratio for entering liquidity auction",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "metadata": {
                                "description": "Optional new market meta data, tags",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "price_monitoring_parameters": {
                                "description": "Price monitoring parameters",
                                "properties": {
                                  "triggers": {
                                    "items": {
                                      "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                      "properties": {
                                        "auction_extension": {
                                          "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "horizon": {
                                          "description": "Price monitoring projection horizon τ in seconds",
                                          "format": "int64",
                                          "type": "integer"
                                        },
                                        "probability": {
                                          "description": "Price monitoring probability level p",
                                          "type": "number"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              },
                              "risk_parameters": {
                                "oneOf": [
                                  {
                                    "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                                    "properties": {
                                      "factor_long": {
                                        "description": "Pre-defined risk factor value for long",
                                        "type": "number"
                                      },
                                      "factor_short": {
                                        "description": "Pre-defined risk factor value for short",
                                        "type": "number"
                                      },
                                      "max_move_up": {
                                        "description": "Pre-defined maximum price move up that the model considers as valid",
                                        "type": "number"
                                      },
                                      "min_move_down": {
                                        "description": "Pre-defined minimum price move down that the model considers as valid",
                                        "type": "number"
                                      },
                                      "probability_of_trading": {
                                        "description": "Pre-defined constant probability of trading",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  {
                                    "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                                    "properties": {
                                      "params": {
                                        "description": "Risk model parameters for log normal",
                                        "properties": {
                                          "mu": {
                                            "description": "Mu param",
                                            "type": "number"
                                          },
                                          "r": {
                                            "description": "R param",
                                            "type": "number"
                                          },
                                          "sigma": {
                                            "description": "Sigma param",
                                            "type": "number"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "risk_aversion_parameter": {
                                        "description": "Risk Aversion Parameter",
                                        "type": "number"
                                      },
                                      "tau": {
                                        "description": "Tau",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              }
                            },
                            "type": "object"
                          },
                          "liquidity_commitment": {
                            "description": "The commitment from the party creating the NewMarket proposal",
                            "properties": {
                              "buys": {
                                "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                                "items": {
                                  "description": "Represents a liquidity order",
                                  "properties": {
                                    "offset": {
                                      "description": "The offset/amount of units away for the order",
                                      "type": "string"
                                    },
                                    "proportion": {
                                      "description": "The relative proportion of the commitment to be allocated at a price level",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "reference": {
                                      "description": "The pegged reference point for the order",
                                      "enum": [
                                        [
                                          "PEGGED_REFERENCE_UNSPECIFIED",
                                          "PEGGED_REFERENCE_MID",
                                          "PEGGED_REFERENCE_BEST_BID",
                                          "PEGGED_REFERENCE_BEST_ASK"
                                        ]
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "commitment_amount": {
                                "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                                "type": "string"
                              },
                              "fee": {
                                "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                                "type": "string"
                              },
                              "reference": {
                                "description": "A reference to be associated to all orders created from this commitment",
                                "type": "string"
                              },
                              "sells": {
                                "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                                "items": {
                                  "description": "Represents a liquidity order",
                                  "properties": {
                                    "offset": {
                                      "description": "The offset/amount of units away for the order",
                                      "type": "string"
                                    },
                                    "proportion": {
                                      "description": "The relative proportion of the commitment to be allocated at a price level",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "reference": {
                                      "description": "The pegged reference point for the order",
                                      "enum": [
                                        [
                                          "PEGGED_REFERENCE_UNSPECIFIED",
                                          "PEGGED_REFERENCE_MID",
                                          "PEGGED_REFERENCE_BEST_BID",
                                          "PEGGED_REFERENCE_BEST_ASK"
                                        ]
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "description": "Proposal change for updating Vega network parameters",
                        "properties": {
                          "changes": {
                            "description": "The network parameter to update",
                            "properties": {
                              "key": {
                                "description": "The unique key",
                                "type": "string"
                              },
                              "value": {
                                "description": "The value for the network parameter",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "description": "Proposal change for creating new assets on Vega",
                        "properties": {
                          "changes": {
                            "description": "The configuration of the new asset",
                            "properties": {
                              "decimals": {
                                "description": "Number of decimal / precision handled by this asset",
                                "format": "int64",
                                "type": "integer"
                              },
                              "name": {
                                "description": "Name of the asset (e.g: Great British Pound)",
                                "type": "string"
                              },
                              "quantum": {
                                "description": "The minimum economically meaningful amount in the asset",
                                "type": "string"
                              },
                              "source": {
                                "oneOf": [
                                  {
                                    "description": "A built-in asset",
                                    "properties": {
                                      "max_faucet_amount_mint": {
                                        "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  {
                                    "description": "An Ethereum ERC20 asset",
                                    "properties": {
                                      "contract_address": {
                                        "description": "The address of the contract for the token, on the ethereum network",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              },
                              "symbol": {
                                "description": "Symbol of the asset (e.g: GBP)",
                                "type": "string"
                              },
                              "total_supply": {
                                "description": "Total circulating supply for the asset",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "description": "Proposal change for a freeform voting thing",
                        "properties": {
                          "changes": {
                            "description": "The configuration of the new freeform",
                            "properties": {
                              "description": {
                                "description": "A short description of what is being proposed",
                                "type": "string"
                              },
                              "hash": {
                                "description": "The hash on the content of the URL",
                                "type": "string"
                              },
                              "url": {
                                "description": "The URL containing content that describes the proposal",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "closing_timestamp": {
                    "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
                    "format": "int64",
                    "type": "integer"
                  },
                  "enactment_timestamp": {
                    "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
                    "format": "int64",
                    "type": "integer"
                  },
                  "validation_timestamp": {
                    "description": "Validation timestamp (Unix time in seconds)",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "timestamp": {
                "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "yes": {
            "description": "All \"yes\" votes in favour of the proposal above",
            "items": {
              "description": "Governance vote",
              "properties": {
                "party_id": {
                  "description": "Voter's party identifier",
                  "type": "string"
                },
                "proposal_id": {
                  "description": "Identifier of the proposal being voted on",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                  "format": "int64",
                  "type": "integer"
                },
                "total_governance_token_balance": {
                  "description": "Total number of governance token for the party that casted the vote",
                  "type": "string"
                },
                "total_governance_token_weight": {
                  "description": "The weight of this vote based on the total of governance token",
                  "type": "string"
                },
                "value": {
                  "description": "Actual vote",
                  "enum": [
                    [
                      "VALUE_UNSPECIFIED",
                      "VALUE_NO",
                      "VALUE_YES"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "yes_party": {
            "additionalProperties": {
              "properties": {
                "party_id": {
                  "description": "Voter's party identifier",
                  "type": "string"
                },
                "proposal_id": {
                  "description": "Identifier of the proposal being voted on",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
                  "format": "int64",
                  "type": "integer"
                },
                "total_governance_token_balance": {
                  "description": "Total number of governance token for the party that casted the vote",
                  "type": "string"
                },
                "total_governance_token_weight": {
                  "description": "The weight of this vote based on the total of governance token",
                  "type": "string"
                },
                "value": {
                  "description": "Actual vote",
                  "enum": [
                    [
                      "VALUE_UNSPECIFIED",
                      "VALUE_NO",
                      "VALUE_YES"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "All latest YES votes by party (guaranteed to be unique), where key (string) is the party ID (public key) and value (Vote) is the vote cast by the given party",
            "type": "object"
          }
        },
        "type": "object"
      },
      "vega.Identifier": {
        "description": "Used as a wrapper type on any possible network address supported by Vega",
        "properties": {
          "identifier": {
            "oneOf": [
              {
                "description": "Ethereum network",
                "properties": {
                  "address": {
                    "description": "An Ethereum address",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "description": "Bitcoin network",
                "properties": {
                  "address": {
                    "description": "A Bitcoin address",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object"
      },
      "vega.Instrument": {
        "description": "Instrument definition",
        "properties": {
          "code": {
            "description": "Code for the instrument",
            "type": "string"
          },
          "id": {
            "description": "Instrument identifier",
            "type": "string"
          },
          "metadata": {
            "description": "A collection of instrument meta-data",
            "properties": {
              "tags": {
                "description": "A list of 0 or more tags",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "name": {
            "description": "Name of the instrument",
            "type": "string"
          },
          "product": {
            "oneOf": [
              {
                "description": "Future",
                "properties": {
                  "oracle_spec_binding": {
                    "description": "The binding between the oracle spec and the oracle data",
                    "properties": {
                      "settlement_price_property": {
                        "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                        "type": "string"
                      },
                      "trading_termination_property": {
                        "description": "the name of the property in the oracle data that signals termination of trading",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "oracle_spec_for_settlement_price": {
                    "description": "The oracle spec describing the settlement price oracle filter",
                    "properties": {
                      "created_at": {
                        "description": "Creation Date time",
                        "format": "int64",
                        "type": "integer"
                      },
                      "filters": {
                        "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                        "items": {
                          "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                          "properties": {
                            "conditions": {
                              "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                              "items": {
                                "description": "Condition describes the condition that must be validated by the",
                                "properties": {
                                  "operator": {
                                    "description": "comparator is the type of comparison to make on the value.",
                                    "enum": [
                                      [
                                        "OPERATOR_UNSPECIFIED",
                                        "OPERATOR_EQUALS",
                                        "OPERATOR_GREATER_THAN",
                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                        "OPERATOR_LESS_THAN",
                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                      ]
                                    ],
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "value is used by the comparator.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "key": {
                              "description": "key is the oracle data property key targeted by the filter.",
                              "properties": {
                                "name": {
                                  "description": "name is the name of the property.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "type is the type of the property.",
                                  "enum": [
                                    [
                                      "TYPE_UNSPECIFIED",
                                      "TYPE_EMPTY",
                                      "TYPE_INTEGER",
                                      "TYPE_STRING",
                                      "TYPE_BOOLEAN",
                                      "TYPE_DECIMAL",
                                      "TYPE_TIMESTAMP"
                                    ]
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "id": {
                        "description": "id is a hash generated from the OracleSpec data.",
                        "type": "string"
                      },
                      "pub_keys": {
                        "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "status": {
                        "description": "status describes the status of the oracle spec",
                        "enum": [
                          [
                            "STATUS_UNSPECIFIED",
                            "STATUS_ACTIVE",
                            "STATUS_DEACTIVATED"
                          ]
                        ],
                        "type": "string"
                      },
                      "updated_at": {
                        "description": "Last Updated timestamp",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "oracle_spec_for_trading_termination": {
                    "description": "the oracle spec describing the trading termination oracle filter",
                    "properties": {
                      "created_at": {
                        "description": "Creation Date time",
                        "format": "int64",
                        "type": "integer"
                      },
                      "filters": {
                        "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                        "items": {
                          "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                          "properties": {
                            "conditions": {
                              "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                              "items": {
                                "description": "Condition describes the condition that must be validated by the",
                                "properties": {
                                  "operator": {
                                    "description": "comparator is the type of comparison to make on the value.",
                                    "enum": [
                                      [
                                        "OPERATOR_UNSPECIFIED",
                                        "OPERATOR_EQUALS",
                                        "OPERATOR_GREATER_THAN",
                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                        "OPERATOR_LESS_THAN",
                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                      ]
                                    ],
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "value is used by the comparator.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "key": {
                              "description": "key is the oracle data property key targeted by the filter.",
                              "properties": {
                                "name": {
                                  "description": "name is the name of the property.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "type is the type of the property.",
                                  "enum": [
                                    [
                                      "TYPE_UNSPECIFIED",
                                      "TYPE_EMPTY",
                                      "TYPE_INTEGER",
                                      "TYPE_STRING",
                                      "TYPE_BOOLEAN",
                                      "TYPE_DECIMAL",
                                      "TYPE_TIMESTAMP"
                                    ]
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "id": {
                        "description": "id is a hash generated from the OracleSpec data.",
                        "type": "string"
                      },
                      "pub_keys": {
                        "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "status": {
                        "description": "status describes the status of the oracle spec",
                        "enum": [
                          [
                            "STATUS_UNSPECIFIED",
                            "STATUS_ACTIVE",
                            "STATUS_DEACTIVATED"
                          ]
                        ],
                        "type": "string"
                      },
                      "updated_at": {
                        "description": "Last Updated timestamp",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "quote_name": {
                    "description": "Quote name of the instrument",
                    "type": "string"
                  },
                  "settlement_asset": {
                    "description": "The asset for the future",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object"
      },
      "vega.InstrumentConfiguration": {
        "description": "Instrument configuration",
        "properties": {
          "code": {
            "description": "Instrument code",
            "type": "string"
          },
          "name": {
            "description": "Instrument name",
            "type": "string"
          },
          "product": {
            "oneOf": [
              {
                "description": "Future",
                "properties": {
                  "oracle_spec_binding": {
                    "description": "The binding between the oracle spec and the settlement price",
                    "properties": {
                      "settlement_price_property": {
                        "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                        "type": "string"
                      },
                      "trading_termination_property": {
                        "description": "the name of the property in the oracle data that signals termination of trading",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "oracle_spec_for_settlement_price": {
                    "description": "The oracle spec describing the oracle data of settlement price",
                    "properties": {
                      "filters": {
                        "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                        "items": {
                          "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                          "properties": {
                            "conditions": {
                              "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                              "items": {
                                "description": "Condition describes the condition that must be validated by the",
                                "properties": {
                                  "operator": {
                                    "description": "comparator is the type of comparison to make on the value.",
                                    "enum": [
                                      [
                                        "OPERATOR_UNSPECIFIED",
                                        "OPERATOR_EQUALS",
                                        "OPERATOR_GREATER_THAN",
                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                        "OPERATOR_LESS_THAN",
                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                      ]
                                    ],
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "value is used by the comparator.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "key": {
                              "description": "key is the oracle data property key targeted by the filter.",
                              "properties": {
                                "name": {
                                  "description": "name is the name of the property.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "type is the type of the property.",
                                  "enum": [
                                    [
                                      "TYPE_UNSPECIFIED",
                                      "TYPE_EMPTY",
                                      "TYPE_INTEGER",
                                      "TYPE_STRING",
                                      "TYPE_BOOLEAN",
                                      "TYPE_DECIMAL",
                                      "TYPE_TIMESTAMP"
                                    ]
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "pub_keys": {
                        "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "oracle_spec_for_trading_termination": {
                    "description": "The oracle spec describing the oracle data of trading termination",
                    "properties": {
                      "filters": {
                        "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                        "items": {
                          "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                          "properties": {
                            "conditions": {
                              "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                              "items": {
                                "description": "Condition describes the condition that must be validated by the",
                                "properties": {
                                  "operator": {
                                    "description": "comparator is the type of comparison to make on the value.",
                                    "enum": [
                                      [
                                        "OPERATOR_UNSPECIFIED",
                                        "OPERATOR_EQUALS",
                                        "OPERATOR_GREATER_THAN",
                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                        "OPERATOR_LESS_THAN",
                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                      ]
                                    ],
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "value is used by the comparator.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "key": {
                              "description": "key is the oracle data property key targeted by the filter.",
                              "properties": {
                                "name": {
                                  "description": "name is the name of the property.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "type is the type of the property.",
                                  "enum": [
                                    [
                                      "TYPE_UNSPECIFIED",
                                      "TYPE_EMPTY",
                                      "TYPE_INTEGER",
                                      "TYPE_STRING",
                                      "TYPE_BOOLEAN",
                                      "TYPE_DECIMAL",
                                      "TYPE_TIMESTAMP"
                                    ]
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "pub_keys": {
                        "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "quote_name": {
                    "description": "Product quote name",
                    "type": "string"
                  },
                  "settlement_asset": {
                    "description": "Product settlement asset identifier",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object"
      },
      "vega.InstrumentMetadata": {
        "description": "Instrument metadata definition",
        "properties": {
          "tags": {
            "description": "A list of 0 or more tags",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "vega.Interval": {
        "description": "Represents a set of time intervals that are used when querying for candle-stick data",
        "enum": [
          [
            "INTERVAL_UNSPECIFIED",
            "INTERVAL_I1M",
            "INTERVAL_I5M",
            "INTERVAL_I15M",
            "INTERVAL_I1H",
            "INTERVAL_I6H",
            "INTERVAL_I1D"
          ]
        ],
        "type": "string"
      },
      "vega.KeyValueBundle": {
        "properties": {
          "key": {
            "type": "string"
          },
          "tolerance": {
            "type": "string"
          },
          "value": {
            "properties": {
              "value": {
                "oneOf": [
                  {
                    "properties": {
                      "value": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "properties": {
                      "value": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "properties": {
                      "value": {
                        "items": {
                          "properties": {
                            "value": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "vega.LedgerEntry": {
        "description": "Represents a ledger entry on Vega",
        "properties": {
          "amount": {
            "description": "An amount to transfer",
            "type": "string"
          },
          "from_account": {
            "description": "One or more accounts to transfer from",
            "type": "string"
          },
          "reference": {
            "description": "A reference for auditing purposes",
            "type": "string"
          },
          "timestamp": {
            "description": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
            "format": "int64",
            "type": "integer"
          },
          "to_account": {
            "description": "One or more accounts to transfer to",
            "type": "string"
          },
          "type": {
            "description": "Type of ledger entry",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.LiquidityMonitoringParameters": {
        "description": "LiquidityMonitoringParameters contains settings used for liquidity monitoring",
        "properties": {
          "auction_extension": {
            "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
            "format": "int64",
            "type": "integer"
          },
          "target_stake_parameters": {
            "description": "Specifies parameters related to target stake calculation",
            "properties": {
              "scaling_factor": {
                "description": "Specifies scaling factors used in target stake calculation",
                "type": "number"
              },
              "time_window": {
                "description": "Specifies length of time window expressed in seconds for target stake calculation",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "triggering_ratio": {
            "description": "Specifies the triggering ratio for entering liquidity auction",
            "type": "number"
          }
        },
        "type": "object"
      },
      "vega.LiquidityOrder": {
        "description": "Represents a liquidity order",
        "properties": {
          "offset": {
            "description": "The offset/amount of units away for the order",
            "type": "string"
          },
          "proportion": {
            "description": "The relative proportion of the commitment to be allocated at a price level",
            "format": "int32",
            "type": "integer"
          },
          "reference": {
            "description": "The pegged reference point for the order",
            "enum": [
              [
                "PEGGED_REFERENCE_UNSPECIFIED",
                "PEGGED_REFERENCE_MID",
                "PEGGED_REFERENCE_BEST_BID",
                "PEGGED_REFERENCE_BEST_ASK"
              ]
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.LiquidityOrderReference": {
        "description": "A pair of a liquidity order and the id of the generated order by the core",
        "properties": {
          "liquidity_order": {
            "description": "The liquidity order from the original submission",
            "properties": {
              "offset": {
                "description": "The offset/amount of units away for the order",
                "type": "string"
              },
              "proportion": {
                "description": "The relative proportion of the commitment to be allocated at a price level",
                "format": "int32",
                "type": "integer"
              },
              "reference": {
                "description": "The pegged reference point for the order",
                "enum": [
                  [
                    "PEGGED_REFERENCE_UNSPECIFIED",
                    "PEGGED_REFERENCE_MID",
                    "PEGGED_REFERENCE_BEST_BID",
                    "PEGGED_REFERENCE_BEST_ASK"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "order_id": {
            "description": "Unique identifier of the pegged order generated by the core to fulfil this liquidity order",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.LiquidityProviderFeeShare": {
        "description": "The equity like share of liquidity fee for each liquidity provider",
        "properties": {
          "average_entry_valuation": {
            "description": "The average entry valuation of the liquidity provider for the market",
            "type": "string"
          },
          "equity_like_share": {
            "description": "The share own by this liquidity provider (float)",
            "type": "string"
          },
          "party": {
            "description": "The liquidity provider party id",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.LiquidityProvision": {
        "description": "An Liquidity provider commitment",
        "properties": {
          "buys": {
            "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
            "items": {
              "description": "A pair of a liquidity order and the id of the generated order by the core",
              "properties": {
                "liquidity_order": {
                  "description": "The liquidity order from the original submission",
                  "properties": {
                    "offset": {
                      "description": "The offset/amount of units away for the order",
                      "type": "string"
                    },
                    "proportion": {
                      "description": "The relative proportion of the commitment to be allocated at a price level",
                      "format": "int32",
                      "type": "integer"
                    },
                    "reference": {
                      "description": "The pegged reference point for the order",
                      "enum": [
                        [
                          "PEGGED_REFERENCE_UNSPECIFIED",
                          "PEGGED_REFERENCE_MID",
                          "PEGGED_REFERENCE_BEST_BID",
                          "PEGGED_REFERENCE_BEST_ASK"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "order_id": {
                  "description": "Unique identifier of the pegged order generated by the core to fulfil this liquidity order",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "commitment_amount": {
            "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
            "format": "int64",
            "type": "integer"
          },
          "fee": {
            "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier",
            "type": "string"
          },
          "market_id": {
            "description": "Market identifier for the order, required field",
            "type": "string"
          },
          "party_id": {
            "description": "Unique party identifier for the creator of the provision",
            "type": "string"
          },
          "reference": {
            "description": "A reference shared between this liquidity provision and all it's orders",
            "type": "string"
          },
          "sells": {
            "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
            "items": {
              "description": "A pair of a liquidity order and the id of the generated order by the core",
              "properties": {
                "liquidity_order": {
                  "description": "The liquidity order from the original submission",
                  "properties": {
                    "offset": {
                      "description": "The offset/amount of units away for the order",
                      "type": "string"
                    },
                    "proportion": {
                      "description": "The relative proportion of the commitment to be allocated at a price level",
                      "format": "int32",
                      "type": "integer"
                    },
                    "reference": {
                      "description": "The pegged reference point for the order",
                      "enum": [
                        [
                          "PEGGED_REFERENCE_UNSPECIFIED",
                          "PEGGED_REFERENCE_MID",
                          "PEGGED_REFERENCE_BEST_BID",
                          "PEGGED_REFERENCE_BEST_ASK"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "order_id": {
                  "description": "Unique identifier of the pegged order generated by the core to fulfil this liquidity order",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "status": {
            "description": "Status of this liquidity provision order",
            "enum": [
              [
                "STATUS_UNSPECIFIED",
                "STATUS_ACTIVE",
                "STATUS_STOPPED",
                "STATUS_CANCELLED",
                "STATUS_REJECTED",
                "STATUS_UNDEPLOYED",
                "STATUS_PENDING"
              ]
            ],
            "type": "string"
          },
          "updated_at": {
            "description": "Timestamp for when the order was updated at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "description": "Version of this liquidity provision order",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.LogNormalModelParams": {
        "description": "Risk model parameters for log normal",
        "properties": {
          "mu": {
            "description": "Mu param",
            "type": "number"
          },
          "r": {
            "description": "R param",
            "type": "number"
          },
          "sigma": {
            "description": "Sigma param",
            "type": "number"
          }
        },
        "type": "object"
      },
      "vega.LogNormalRiskModel": {
        "description": "Risk model for log normal",
        "properties": {
          "params": {
            "description": "Risk model parameters for log normal",
            "properties": {
              "mu": {
                "description": "Mu param",
                "type": "number"
              },
              "r": {
                "description": "R param",
                "type": "number"
              },
              "sigma": {
                "description": "Sigma param",
                "type": "number"
              }
            },
            "type": "object"
          },
          "risk_aversion_parameter": {
            "description": "Risk Aversion Parameter",
            "type": "number"
          },
          "tau": {
            "description": "Tau",
            "type": "number"
          }
        },
        "type": "object"
      },
      "vega.MarginCalculator": {
        "description": "Margin Calculator definition",
        "properties": {
          "scaling_factors": {
            "description": "Scaling factors for margin calculation",
            "properties": {
              "collateral_release": {
                "description": "Collateral release level",
                "type": "number"
              },
              "initial_margin": {
                "description": "Initial margin level",
                "type": "number"
              },
              "search_level": {
                "description": "Search level",
                "type": "number"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "vega.MarginLevels": {
        "description": "Represents the margin levels for a party on a market at a given time",
        "properties": {
          "asset": {
            "description": "Asset identifier",
            "type": "string"
          },
          "collateral_release_level": {
            "description": "Collateral release level value",
            "type": "string"
          },
          "initial_margin": {
            "description": "Initial margin value",
            "type": "string"
          },
          "maintenance_margin": {
            "description": "Maintenance margin value",
            "type": "string"
          },
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          },
          "party_id": {
            "description": "Party identifier",
            "type": "string"
          },
          "search_level": {
            "description": "Search level value",
            "type": "string"
          },
          "timestamp": {
            "description": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.Market": {
        "description": "Market definition",
        "properties": {
          "decimal_places": {
            "description": "Number of decimal places that a price must be shifted by in order to get a correct price denominated in the currency of the market, for example: `realPrice = price / 10^decimalPlaces`",
            "format": "int64",
            "type": "integer"
          },
          "fees": {
            "description": "Fees configuration",
            "properties": {
              "factors": {
                "description": "Fee factors",
                "properties": {
                  "infrastructure_fee": {
                    "description": "Infrastructure fee",
                    "type": "string"
                  },
                  "liquidity_fee": {
                    "description": "Liquidity fee",
                    "type": "string"
                  },
                  "maker_fee": {
                    "description": "Maker fee",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "Unique identifier",
            "type": "string"
          },
          "liquidity_monitoring_parameters": {
            "description": "LiquidityMonitoringParameters for the market",
            "properties": {
              "auction_extension": {
                "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                "format": "int64",
                "type": "integer"
              },
              "target_stake_parameters": {
                "description": "Specifies parameters related to target stake calculation",
                "properties": {
                  "scaling_factor": {
                    "description": "Specifies scaling factors used in target stake calculation",
                    "type": "number"
                  },
                  "time_window": {
                    "description": "Specifies length of time window expressed in seconds for target stake calculation",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "triggering_ratio": {
                "description": "Specifies the triggering ratio for entering liquidity auction",
                "type": "number"
              }
            },
            "type": "object"
          },
          "market_timestamps": {
            "description": "Timestamps for when the market stay changes",
            "properties": {
              "close": {
                "description": "Time when the market is closed",
                "format": "int64",
                "type": "integer"
              },
              "open": {
                "description": "Time when the market has left the opening auction and is ready to accept trades",
                "format": "int64",
                "type": "integer"
              },
              "pending": {
                "description": "Time when the market has been voted in and is created into an opening auction",
                "format": "int64",
                "type": "integer"
              },
              "proposed": {
                "description": "Time when the market is first proposed",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "opening_auction": {
            "description": "Auction duration specifies how long the opening auction will run (minimum duration and optionally a minimum traded volume)",
            "properties": {
              "duration": {
                "description": "Duration of the auction in seconds",
                "format": "int64",
                "type": "integer"
              },
              "volume": {
                "description": "Target uncrossing trading volume",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "price_monitoring_settings": {
            "description": "PriceMonitoringSettings for the market",
            "properties": {
              "parameters": {
                "description": "Specifies price monitoring parameters to be used for price monitoring purposes",
                "properties": {
                  "triggers": {
                    "items": {
                      "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                      "properties": {
                        "auction_extension": {
                          "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                          "format": "int64",
                          "type": "integer"
                        },
                        "horizon": {
                          "description": "Price monitoring projection horizon τ in seconds",
                          "format": "int64",
                          "type": "integer"
                        },
                        "probability": {
                          "description": "Price monitoring probability level p",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "update_frequency": {
                "description": "Specifies how often (expressed in seconds) the price monitoring bounds should be updated",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "state": {
            "description": "Current state of the market",
            "enum": [
              [
                "STATE_UNSPECIFIED",
                "STATE_PROPOSED",
                "STATE_REJECTED",
                "STATE_PENDING",
                "STATE_CANCELLED",
                "STATE_ACTIVE",
                "STATE_SUSPENDED",
                "STATE_CLOSED",
                "STATE_TRADING_TERMINATED",
                "STATE_SETTLED"
              ]
            ],
            "type": "string"
          },
          "tradable_instrument": {
            "description": "Tradable instrument configuration",
            "properties": {
              "instrument": {
                "description": "Instrument details",
                "properties": {
                  "code": {
                    "description": "Code for the instrument",
                    "type": "string"
                  },
                  "id": {
                    "description": "Instrument identifier",
                    "type": "string"
                  },
                  "metadata": {
                    "description": "A collection of instrument meta-data",
                    "properties": {
                      "tags": {
                        "description": "A list of 0 or more tags",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "Name of the instrument",
                    "type": "string"
                  },
                  "product": {
                    "oneOf": [
                      {
                        "description": "Future",
                        "properties": {
                          "oracle_spec_binding": {
                            "description": "The binding between the oracle spec and the oracle data",
                            "properties": {
                              "settlement_price_property": {
                                "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                "type": "string"
                              },
                              "trading_termination_property": {
                                "description": "the name of the property in the oracle data that signals termination of trading",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "oracle_spec_for_settlement_price": {
                            "description": "The oracle spec describing the settlement price oracle filter",
                            "properties": {
                              "created_at": {
                                "description": "Creation Date time",
                                "format": "int64",
                                "type": "integer"
                              },
                              "filters": {
                                "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                "items": {
                                  "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                  "properties": {
                                    "conditions": {
                                      "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                      "items": {
                                        "description": "Condition describes the condition that must be validated by the",
                                        "properties": {
                                          "operator": {
                                            "description": "comparator is the type of comparison to make on the value.",
                                            "enum": [
                                              [
                                                "OPERATOR_UNSPECIFIED",
                                                "OPERATOR_EQUALS",
                                                "OPERATOR_GREATER_THAN",
                                                "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                "OPERATOR_LESS_THAN",
                                                "OPERATOR_LESS_THAN_OR_EQUAL"
                                              ]
                                            ],
                                            "type": "string"
                                          },
                                          "value": {
                                            "description": "value is used by the comparator.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "key": {
                                      "description": "key is the oracle data property key targeted by the filter.",
                                      "properties": {
                                        "name": {
                                          "description": "name is the name of the property.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "description": "type is the type of the property.",
                                          "enum": [
                                            [
                                              "TYPE_UNSPECIFIED",
                                              "TYPE_EMPTY",
                                              "TYPE_INTEGER",
                                              "TYPE_STRING",
                                              "TYPE_BOOLEAN",
                                              "TYPE_DECIMAL",
                                              "TYPE_TIMESTAMP"
                                            ]
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "id": {
                                "description": "id is a hash generated from the OracleSpec data.",
                                "type": "string"
                              },
                              "pub_keys": {
                                "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "status": {
                                "description": "status describes the status of the oracle spec",
                                "enum": [
                                  [
                                    "STATUS_UNSPECIFIED",
                                    "STATUS_ACTIVE",
                                    "STATUS_DEACTIVATED"
                                  ]
                                ],
                                "type": "string"
                              },
                              "updated_at": {
                                "description": "Last Updated timestamp",
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "oracle_spec_for_trading_termination": {
                            "description": "the oracle spec describing the trading termination oracle filter",
                            "properties": {
                              "created_at": {
                                "description": "Creation Date time",
                                "format": "int64",
                                "type": "integer"
                              },
                              "filters": {
                                "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                "items": {
                                  "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                  "properties": {
                                    "conditions": {
                                      "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                      "items": {
                                        "description": "Condition describes the condition that must be validated by the",
                                        "properties": {
                                          "operator": {
                                            "description": "comparator is the type of comparison to make on the value.",
                                            "enum": [
                                              [
                                                "OPERATOR_UNSPECIFIED",
                                                "OPERATOR_EQUALS",
                                                "OPERATOR_GREATER_THAN",
                                                "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                "OPERATOR_LESS_THAN",
                                                "OPERATOR_LESS_THAN_OR_EQUAL"
                                              ]
                                            ],
                                            "type": "string"
                                          },
                                          "value": {
                                            "description": "value is used by the comparator.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "key": {
                                      "description": "key is the oracle data property key targeted by the filter.",
                                      "properties": {
                                        "name": {
                                          "description": "name is the name of the property.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "description": "type is the type of the property.",
                                          "enum": [
                                            [
                                              "TYPE_UNSPECIFIED",
                                              "TYPE_EMPTY",
                                              "TYPE_INTEGER",
                                              "TYPE_STRING",
                                              "TYPE_BOOLEAN",
                                              "TYPE_DECIMAL",
                                              "TYPE_TIMESTAMP"
                                            ]
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "id": {
                                "description": "id is a hash generated from the OracleSpec data.",
                                "type": "string"
                              },
                              "pub_keys": {
                                "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "status": {
                                "description": "status describes the status of the oracle spec",
                                "enum": [
                                  [
                                    "STATUS_UNSPECIFIED",
                                    "STATUS_ACTIVE",
                                    "STATUS_DEACTIVATED"
                                  ]
                                ],
                                "type": "string"
                              },
                              "updated_at": {
                                "description": "Last Updated timestamp",
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "quote_name": {
                            "description": "Quote name of the instrument",
                            "type": "string"
                          },
                          "settlement_asset": {
                            "description": "The asset for the future",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "margin_calculator": {
                "description": "Margin calculator for the instrument",
                "properties": {
                  "scaling_factors": {
                    "description": "Scaling factors for margin calculation",
                    "properties": {
                      "collateral_release": {
                        "description": "Collateral release level",
                        "type": "number"
                      },
                      "initial_margin": {
                        "description": "Initial margin level",
                        "type": "number"
                      },
                      "search_level": {
                        "description": "Search level",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "risk_model": {
                "oneOf": [
                  {
                    "description": "Log normal",
                    "properties": {
                      "params": {
                        "description": "Risk model parameters for log normal",
                        "properties": {
                          "mu": {
                            "description": "Mu param",
                            "type": "number"
                          },
                          "r": {
                            "description": "R param",
                            "type": "number"
                          },
                          "sigma": {
                            "description": "Sigma param",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "risk_aversion_parameter": {
                        "description": "Risk Aversion Parameter",
                        "type": "number"
                      },
                      "tau": {
                        "description": "Tau",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "description": "Simple",
                    "properties": {
                      "params": {
                        "description": "Risk model params for simple modelling",
                        "properties": {
                          "factor_long": {
                            "description": "Pre-defined risk factor value for long",
                            "type": "number"
                          },
                          "factor_short": {
                            "description": "Pre-defined risk factor value for short",
                            "type": "number"
                          },
                          "max_move_up": {
                            "description": "Pre-defined maximum price move up that the model considers as valid",
                            "type": "number"
                          },
                          "min_move_down": {
                            "description": "Pre-defined minimum price move down that the model considers as valid",
                            "type": "number"
                          },
                          "probability_of_trading": {
                            "description": "Pre-defined constant probability of trading",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            },
            "type": "object"
          },
          "trading_mode": {
            "description": "Current mode of execution of the market",
            "enum": [
              [
                "TRADING_MODE_UNSPECIFIED",
                "TRADING_MODE_CONTINUOUS",
                "TRADING_MODE_BATCH_AUCTION",
                "TRADING_MODE_OPENING_AUCTION",
                "TRADING_MODE_MONITORING_AUCTION"
              ]
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.MarketData": {
        "description": "Represents data generated by a market when open",
        "properties": {
          "auction_end": {
            "description": "Time in seconds until the end of the auction (0 if currently not in auction period)",
            "format": "int64",
            "type": "integer"
          },
          "auction_start": {
            "description": "Time until next auction (used in FBA's) - currently always 0",
            "format": "int64",
            "type": "integer"
          },
          "best_bid_price": {
            "description": "Highest price level on an order book for buy orders, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
            "type": "string"
          },
          "best_bid_volume": {
            "description": "Aggregated volume being bid at the best bid price",
            "format": "int64",
            "type": "integer"
          },
          "best_offer_price": {
            "description": "Lowest price level on an order book for offer orders",
            "type": "string"
          },
          "best_offer_volume": {
            "description": "Aggregated volume being offered at the best offer price, as an integer, for example `123456` is a correctly // formatted price of `1.23456` assuming market configured to 5 decimal places",
            "format": "int64",
            "type": "integer"
          },
          "best_static_bid_price": {
            "description": "Highest price on the order book for buy orders not including pegged orders",
            "type": "string"
          },
          "best_static_bid_volume": {
            "description": "Total volume at the best static bid price excluding pegged orders",
            "format": "int64",
            "type": "integer"
          },
          "best_static_offer_price": {
            "description": "Lowest price on the order book for sell orders not including pegged orders",
            "type": "string"
          },
          "best_static_offer_volume": {
            "description": "Total volume at the best static offer price excluding pegged orders",
            "format": "int64",
            "type": "integer"
          },
          "extension_trigger": {
            "description": "When a market auction is extended, this field indicates what caused the extension",
            "enum": [
              [
                "AUCTION_TRIGGER_UNSPECIFIED",
                "AUCTION_TRIGGER_BATCH",
                "AUCTION_TRIGGER_OPENING",
                "AUCTION_TRIGGER_PRICE",
                "AUCTION_TRIGGER_LIQUIDITY"
              ]
            ],
            "type": "string"
          },
          "indicative_price": {
            "description": "Indicative price (zero if not in auction)",
            "type": "string"
          },
          "indicative_volume": {
            "description": "Indicative volume (zero if not in auction)",
            "format": "int64",
            "type": "integer"
          },
          "liquidity_provider_fee_share": {
            "description": "the equity like share of liquidity fee for each liquidity provider",
            "items": {
              "description": "The equity like share of liquidity fee for each liquidity provider",
              "properties": {
                "average_entry_valuation": {
                  "description": "The average entry valuation of the liquidity provider for the market",
                  "type": "string"
                },
                "equity_like_share": {
                  "description": "The share own by this liquidity provider (float)",
                  "type": "string"
                },
                "party": {
                  "description": "The liquidity provider party id",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "mark_price": {
            "description": "Mark price, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
            "type": "string"
          },
          "market": {
            "description": "Market identifier for the data",
            "type": "string"
          },
          "market_trading_mode": {
            "description": "The current trading mode for the market",
            "enum": [
              [
                "TRADING_MODE_UNSPECIFIED",
                "TRADING_MODE_CONTINUOUS",
                "TRADING_MODE_BATCH_AUCTION",
                "TRADING_MODE_OPENING_AUCTION",
                "TRADING_MODE_MONITORING_AUCTION"
              ]
            ],
            "type": "string"
          },
          "market_value_proxy": {
            "description": "the market value proxy",
            "type": "string"
          },
          "mid_price": {
            "description": "Arithmetic average of the best bid price and best offer price, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
            "type": "string"
          },
          "open_interest": {
            "description": "The sum of the size of all positions greater than 0 on the market",
            "format": "int64",
            "type": "integer"
          },
          "price_monitoring_bounds": {
            "description": "One or more price monitoring bounds for the current timestamp",
            "items": {
              "description": "Represents a list of valid (at the current timestamp) price ranges per associated trigger",
              "properties": {
                "max_valid_price": {
                  "description": "Maximum price that isn't currently breaching the specified price monitoring trigger",
                  "type": "string"
                },
                "min_valid_price": {
                  "description": "Minimum price that isn't currently breaching the specified price monitoring trigger",
                  "type": "string"
                },
                "reference_price": {
                  "description": "Reference price used to calculate the valid price range",
                  "type": "number"
                },
                "trigger": {
                  "description": "Price monitoring trigger associated with the bounds",
                  "properties": {
                    "auction_extension": {
                      "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                      "format": "int64",
                      "type": "integer"
                    },
                    "horizon": {
                      "description": "Price monitoring projection horizon τ in seconds",
                      "format": "int64",
                      "type": "integer"
                    },
                    "probability": {
                      "description": "Price monitoring probability level p",
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "static_mid_price": {
            "description": "Arithmetic average of the best static bid price and best static offer price",
            "type": "string"
          },
          "supplied_stake": {
            "description": "Available stake for the given market",
            "type": "string"
          },
          "target_stake": {
            "description": "Targeted stake for the given market",
            "type": "string"
          },
          "timestamp": {
            "description": "Timestamp at which this mark price was relevant, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
            "format": "int64",
            "type": "integer"
          },
          "trigger": {
            "description": "When a market is in an auction trading mode, this field indicates what triggered the auction",
            "enum": [
              [
                "AUCTION_TRIGGER_UNSPECIFIED",
                "AUCTION_TRIGGER_BATCH",
                "AUCTION_TRIGGER_OPENING",
                "AUCTION_TRIGGER_PRICE",
                "AUCTION_TRIGGER_LIQUIDITY"
              ]
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.MarketDepth": {
        "description": "Represents market depth or order book data for the specified market on Vega",
        "properties": {
          "buy": {
            "description": "Collection of price levels for the buy side of the book",
            "items": {
              "description": "Represents a price level from market depth or order book data",
              "properties": {
                "number_of_orders": {
                  "description": "Number of orders at the price level",
                  "format": "int64",
                  "type": "integer"
                },
                "price": {
                  "description": "Price for the price level, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "volume": {
                  "description": "Volume at the price level",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          },
          "sell": {
            "description": "Collection of price levels for the sell side of the book",
            "items": {
              "description": "Represents a price level from market depth or order book data",
              "properties": {
                "number_of_orders": {
                  "description": "Number of orders at the price level",
                  "format": "int64",
                  "type": "integer"
                },
                "price": {
                  "description": "Price for the price level, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "volume": {
                  "description": "Volume at the price level",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "sequence_number": {
            "description": "Sequence number for the market depth data returned",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.MarketDepthUpdate": {
        "description": "Represents the changed market depth since the last update",
        "properties": {
          "buy": {
            "description": "Collection of updated price levels for the buy side of the book",
            "items": {
              "description": "Represents a price level from market depth or order book data",
              "properties": {
                "number_of_orders": {
                  "description": "Number of orders at the price level",
                  "format": "int64",
                  "type": "integer"
                },
                "price": {
                  "description": "Price for the price level, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "volume": {
                  "description": "Volume at the price level",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          },
          "sell": {
            "description": "Collection of updated price levels for the sell side of the book",
            "items": {
              "description": "Represents a price level from market depth or order book data",
              "properties": {
                "number_of_orders": {
                  "description": "Number of orders at the price level",
                  "format": "int64",
                  "type": "integer"
                },
                "price": {
                  "description": "Price for the price level, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "volume": {
                  "description": "Volume at the price level",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "sequence_number": {
            "description": "Sequence number for the market depth update data returned",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.MarketTimestamps": {
        "description": "Time stamps for important times about creating, enacting etc the market",
        "properties": {
          "close": {
            "description": "Time when the market is closed",
            "format": "int64",
            "type": "integer"
          },
          "open": {
            "description": "Time when the market has left the opening auction and is ready to accept trades",
            "format": "int64",
            "type": "integer"
          },
          "pending": {
            "description": "Time when the market has been voted in and is created into an opening auction",
            "format": "int64",
            "type": "integer"
          },
          "proposed": {
            "description": "Time when the market is first proposed",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.MatrixValue": {
        "properties": {
          "value": {
            "items": {
              "properties": {
                "value": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "vega.NetworkLimits": {
        "description": "Network limits, defined in the genesis file",
        "properties": {
          "bootstrap_block_count": {
            "description": "How many blocks before the chain comes out of bootstrap mode",
            "format": "int32",
            "type": "integer"
          },
          "bootstrap_finished": {
            "description": "True once block count \u003e bootstrapBlockCount",
            "type": "boolean"
          },
          "can_propose_asset": {
            "description": "Are asset proposals allowed at this point in time",
            "type": "boolean"
          },
          "can_propose_market": {
            "description": "Are market proposals allowed at this point in time",
            "type": "boolean"
          },
          "genesis_loaded": {
            "description": "True once the genesis file is loaded",
            "type": "boolean"
          },
          "propose_asset_enabled": {
            "description": "Are asset proposals enabled on this chain",
            "type": "boolean"
          },
          "propose_asset_enabled_from": {
            "description": "The date/timestamp in unix nanoseconds at which asset proposals will be enabled (0 indicates not set)",
            "format": "int64",
            "type": "integer"
          },
          "propose_market_enabled": {
            "description": "Are market proposals enabled on this chain",
            "type": "boolean"
          },
          "propose_market_enabled_from": {
            "description": "The date/timestamp in unix nanoseconds at which market proposals will be enabled (0 indicates not set)",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.NetworkParameter": {
        "description": "Represents a network parameter on Vega",
        "properties": {
          "key": {
            "description": "The unique key",
            "type": "string"
          },
          "value": {
            "description": "The value for the network parameter",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.NewAsset": {
        "description": "New asset on Vega",
        "properties": {
          "changes": {
            "description": "The configuration of the new asset",
            "properties": {
              "decimals": {
                "description": "Number of decimal / precision handled by this asset",
                "format": "int64",
                "type": "integer"
              },
              "name": {
                "description": "Name of the asset (e.g: Great British Pound)",
                "type": "string"
              },
              "quantum": {
                "description": "The minimum economically meaningful amount in the asset",
                "type": "string"
              },
              "source": {
                "oneOf": [
                  {
                    "description": "A built-in asset",
                    "properties": {
                      "max_faucet_amount_mint": {
                        "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "description": "An Ethereum ERC20 asset",
                    "properties": {
                      "contract_address": {
                        "description": "The address of the contract for the token, on the ethereum network",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              },
              "symbol": {
                "description": "Symbol of the asset (e.g: GBP)",
                "type": "string"
              },
              "total_supply": {
                "description": "Total circulating supply for the asset",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "vega.NewFreeform": {
        "description": "Freeform proposal",
        "properties": {
          "changes": {
            "description": "The configuration of the new freeform",
            "properties": {
              "description": {
                "description": "A short description of what is being proposed",
                "type": "string"
              },
              "hash": {
                "description": "The hash on the content of the URL",
                "type": "string"
              },
              "url": {
                "description": "The URL containing content that describes the proposal",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "vega.NewFreeformDetails": {
        "properties": {
          "description": {
            "description": "A short description of what is being proposed",
            "type": "string"
          },
          "hash": {
            "description": "The hash on the content of the URL",
            "type": "string"
          },
          "url": {
            "description": "The URL containing content that describes the proposal",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.NewMarket": {
        "description": "New market on Vega",
        "properties": {
          "changes": {
            "description": "The configuration of the new market",
            "properties": {
              "decimal_places": {
                "description": "Decimal places used for the new market",
                "format": "int64",
                "type": "integer"
              },
              "instrument": {
                "description": "New market instrument configuration",
                "properties": {
                  "code": {
                    "description": "Instrument code",
                    "type": "string"
                  },
                  "name": {
                    "description": "Instrument name",
                    "type": "string"
                  },
                  "product": {
                    "oneOf": [
                      {
                        "description": "Future",
                        "properties": {
                          "oracle_spec_binding": {
                            "description": "The binding between the oracle spec and the settlement price",
                            "properties": {
                              "settlement_price_property": {
                                "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                "type": "string"
                              },
                              "trading_termination_property": {
                                "description": "the name of the property in the oracle data that signals termination of trading",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "oracle_spec_for_settlement_price": {
                            "description": "The oracle spec describing the oracle data of settlement price",
                            "properties": {
                              "filters": {
                                "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                "items": {
                                  "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                  "properties": {
                                    "conditions": {
                                      "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                      "items": {
                                        "description": "Condition describes the condition that must be validated by the",
                                        "properties": {
                                          "operator": {
                                            "description": "comparator is the type of comparison to make on the value.",
                                            "enum": [
                                              [
                                                "OPERATOR_UNSPECIFIED",
                                                "OPERATOR_EQUALS",
                                                "OPERATOR_GREATER_THAN",
                                                "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                "OPERATOR_LESS_THAN",
                                                "OPERATOR_LESS_THAN_OR_EQUAL"
                                              ]
                                            ],
                                            "type": "string"
                                          },
                                          "value": {
                                            "description": "value is used by the comparator.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "key": {
                                      "description": "key is the oracle data property key targeted by the filter.",
                                      "properties": {
                                        "name": {
                                          "description": "name is the name of the property.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "description": "type is the type of the property.",
                                          "enum": [
                                            [
                                              "TYPE_UNSPECIFIED",
                                              "TYPE_EMPTY",
                                              "TYPE_INTEGER",
                                              "TYPE_STRING",
                                              "TYPE_BOOLEAN",
                                              "TYPE_DECIMAL",
                                              "TYPE_TIMESTAMP"
                                            ]
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "pub_keys": {
                                "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "oracle_spec_for_trading_termination": {
                            "description": "The oracle spec describing the oracle data of trading termination",
                            "properties": {
                              "filters": {
                                "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                "items": {
                                  "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                  "properties": {
                                    "conditions": {
                                      "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                      "items": {
                                        "description": "Condition describes the condition that must be validated by the",
                                        "properties": {
                                          "operator": {
                                            "description": "comparator is the type of comparison to make on the value.",
                                            "enum": [
                                              [
                                                "OPERATOR_UNSPECIFIED",
                                                "OPERATOR_EQUALS",
                                                "OPERATOR_GREATER_THAN",
                                                "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                "OPERATOR_LESS_THAN",
                                                "OPERATOR_LESS_THAN_OR_EQUAL"
                                              ]
                                            ],
                                            "type": "string"
                                          },
                                          "value": {
                                            "description": "value is used by the comparator.",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "key": {
                                      "description": "key is the oracle data property key targeted by the filter.",
                                      "properties": {
                                        "name": {
                                          "description": "name is the name of the property.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "description": "type is the type of the property.",
                                          "enum": [
                                            [
                                              "TYPE_UNSPECIFIED",
                                              "TYPE_EMPTY",
                                              "TYPE_INTEGER",
                                              "TYPE_STRING",
                                              "TYPE_BOOLEAN",
                                              "TYPE_DECIMAL",
                                              "TYPE_TIMESTAMP"
                                            ]
                                          ],
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "pub_keys": {
                                "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "quote_name": {
                            "description": "Product quote name",
                            "type": "string"
                          },
                          "settlement_asset": {
                            "description": "Product settlement asset identifier",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              },
              "liquidity_monitoring_parameters": {
                "description": "Liquidity monitoring parameters",
                "properties": {
                  "auction_extension": {
                    "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                    "format": "int64",
                    "type": "integer"
                  },
                  "target_stake_parameters": {
                    "description": "Specifies parameters related to target stake calculation",
                    "properties": {
                      "scaling_factor": {
                        "description": "Specifies scaling factors used in target stake calculation",
                        "type": "number"
                      },
                      "time_window": {
                        "description": "Specifies length of time window expressed in seconds for target stake calculation",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "triggering_ratio": {
                    "description": "Specifies the triggering ratio for entering liquidity auction",
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "metadata": {
                "description": "Optional new market meta data, tags",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "price_monitoring_parameters": {
                "description": "Price monitoring parameters",
                "properties": {
                  "triggers": {
                    "items": {
                      "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                      "properties": {
                        "auction_extension": {
                          "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                          "format": "int64",
                          "type": "integer"
                        },
                        "horizon": {
                          "description": "Price monitoring projection horizon τ in seconds",
                          "format": "int64",
                          "type": "integer"
                        },
                        "probability": {
                          "description": "Price monitoring probability level p",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "risk_parameters": {
                "oneOf": [
                  {
                    "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                    "properties": {
                      "factor_long": {
                        "description": "Pre-defined risk factor value for long",
                        "type": "number"
                      },
                      "factor_short": {
                        "description": "Pre-defined risk factor value for short",
                        "type": "number"
                      },
                      "max_move_up": {
                        "description": "Pre-defined maximum price move up that the model considers as valid",
                        "type": "number"
                      },
                      "min_move_down": {
                        "description": "Pre-defined minimum price move down that the model considers as valid",
                        "type": "number"
                      },
                      "probability_of_trading": {
                        "description": "Pre-defined constant probability of trading",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                    "properties": {
                      "params": {
                        "description": "Risk model parameters for log normal",
                        "properties": {
                          "mu": {
                            "description": "Mu param",
                            "type": "number"
                          },
                          "r": {
                            "description": "R param",
                            "type": "number"
                          },
                          "sigma": {
                            "description": "Sigma param",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "risk_aversion_parameter": {
                        "description": "Risk Aversion Parameter",
                        "type": "number"
                      },
                      "tau": {
                        "description": "Tau",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            },
            "type": "object"
          },
          "liquidity_commitment": {
            "description": "The commitment from the party creating the NewMarket proposal",
            "properties": {
              "buys": {
                "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                "items": {
                  "description": "Represents a liquidity order",
                  "properties": {
                    "offset": {
                      "description": "The offset/amount of units away for the order",
                      "type": "string"
                    },
                    "proportion": {
                      "description": "The relative proportion of the commitment to be allocated at a price level",
                      "format": "int32",
                      "type": "integer"
                    },
                    "reference": {
                      "description": "The pegged reference point for the order",
                      "enum": [
                        [
                          "PEGGED_REFERENCE_UNSPECIFIED",
                          "PEGGED_REFERENCE_MID",
                          "PEGGED_REFERENCE_BEST_BID",
                          "PEGGED_REFERENCE_BEST_ASK"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "commitment_amount": {
                "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                "type": "string"
              },
              "fee": {
                "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                "type": "string"
              },
              "reference": {
                "description": "A reference to be associated to all orders created from this commitment",
                "type": "string"
              },
              "sells": {
                "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                "items": {
                  "description": "Represents a liquidity order",
                  "properties": {
                    "offset": {
                      "description": "The offset/amount of units away for the order",
                      "type": "string"
                    },
                    "proportion": {
                      "description": "The relative proportion of the commitment to be allocated at a price level",
                      "format": "int32",
                      "type": "integer"
                    },
                    "reference": {
                      "description": "The pegged reference point for the order",
                      "enum": [
                        [
                          "PEGGED_REFERENCE_UNSPECIFIED",
                          "PEGGED_REFERENCE_MID",
                          "PEGGED_REFERENCE_BEST_BID",
                          "PEGGED_REFERENCE_BEST_ASK"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "vega.NewMarketCommitment": {
        "description": "A commitment of liquidity to be made by the party which proposes a market",
        "properties": {
          "buys": {
            "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
            "items": {
              "description": "Represents a liquidity order",
              "properties": {
                "offset": {
                  "description": "The offset/amount of units away for the order",
                  "type": "string"
                },
                "proportion": {
                  "description": "The relative proportion of the commitment to be allocated at a price level",
                  "format": "int32",
                  "type": "integer"
                },
                "reference": {
                  "description": "The pegged reference point for the order",
                  "enum": [
                    [
                      "PEGGED_REFERENCE_UNSPECIFIED",
                      "PEGGED_REFERENCE_MID",
                      "PEGGED_REFERENCE_BEST_BID",
                      "PEGGED_REFERENCE_BEST_ASK"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "commitment_amount": {
            "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
            "type": "string"
          },
          "fee": {
            "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
            "type": "string"
          },
          "reference": {
            "description": "A reference to be associated to all orders created from this commitment",
            "type": "string"
          },
          "sells": {
            "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
            "items": {
              "description": "Represents a liquidity order",
              "properties": {
                "offset": {
                  "description": "The offset/amount of units away for the order",
                  "type": "string"
                },
                "proportion": {
                  "description": "The relative proportion of the commitment to be allocated at a price level",
                  "format": "int32",
                  "type": "integer"
                },
                "reference": {
                  "description": "The pegged reference point for the order",
                  "enum": [
                    [
                      "PEGGED_REFERENCE_UNSPECIFIED",
                      "PEGGED_REFERENCE_MID",
                      "PEGGED_REFERENCE_BEST_BID",
                      "PEGGED_REFERENCE_BEST_ASK"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "vega.NewMarketConfiguration": {
        "description": "Configuration for a new market on Vega",
        "properties": {
          "decimal_places": {
            "description": "Decimal places used for the new market",
            "format": "int64",
            "type": "integer"
          },
          "instrument": {
            "description": "New market instrument configuration",
            "properties": {
              "code": {
                "description": "Instrument code",
                "type": "string"
              },
              "name": {
                "description": "Instrument name",
                "type": "string"
              },
              "product": {
                "oneOf": [
                  {
                    "description": "Future",
                    "properties": {
                      "oracle_spec_binding": {
                        "description": "The binding between the oracle spec and the settlement price",
                        "properties": {
                          "settlement_price_property": {
                            "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                            "type": "string"
                          },
                          "trading_termination_property": {
                            "description": "the name of the property in the oracle data that signals termination of trading",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "oracle_spec_for_settlement_price": {
                        "description": "The oracle spec describing the oracle data of settlement price",
                        "properties": {
                          "filters": {
                            "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                            "items": {
                              "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                              "properties": {
                                "conditions": {
                                  "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                  "items": {
                                    "description": "Condition describes the condition that must be validated by the",
                                    "properties": {
                                      "operator": {
                                        "description": "comparator is the type of comparison to make on the value.",
                                        "enum": [
                                          [
                                            "OPERATOR_UNSPECIFIED",
                                            "OPERATOR_EQUALS",
                                            "OPERATOR_GREATER_THAN",
                                            "OPERATOR_GREATER_THAN_OR_EQUAL",
                                            "OPERATOR_LESS_THAN",
                                            "OPERATOR_LESS_THAN_OR_EQUAL"
                                          ]
                                        ],
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "value is used by the comparator.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "key": {
                                  "description": "key is the oracle data property key targeted by the filter.",
                                  "properties": {
                                    "name": {
                                      "description": "name is the name of the property.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "type is the type of the property.",
                                      "enum": [
                                        [
                                          "TYPE_UNSPECIFIED",
                                          "TYPE_EMPTY",
                                          "TYPE_INTEGER",
                                          "TYPE_STRING",
                                          "TYPE_BOOLEAN",
                                          "TYPE_DECIMAL",
                                          "TYPE_TIMESTAMP"
                                        ]
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "pub_keys": {
                            "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "oracle_spec_for_trading_termination": {
                        "description": "The oracle spec describing the oracle data of trading termination",
                        "properties": {
                          "filters": {
                            "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                            "items": {
                              "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                              "properties": {
                                "conditions": {
                                  "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                  "items": {
                                    "description": "Condition describes the condition that must be validated by the",
                                    "properties": {
                                      "operator": {
                                        "description": "comparator is the type of comparison to make on the value.",
                                        "enum": [
                                          [
                                            "OPERATOR_UNSPECIFIED",
                                            "OPERATOR_EQUALS",
                                            "OPERATOR_GREATER_THAN",
                                            "OPERATOR_GREATER_THAN_OR_EQUAL",
                                            "OPERATOR_LESS_THAN",
                                            "OPERATOR_LESS_THAN_OR_EQUAL"
                                          ]
                                        ],
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "value is used by the comparator.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "key": {
                                  "description": "key is the oracle data property key targeted by the filter.",
                                  "properties": {
                                    "name": {
                                      "description": "name is the name of the property.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "type is the type of the property.",
                                      "enum": [
                                        [
                                          "TYPE_UNSPECIFIED",
                                          "TYPE_EMPTY",
                                          "TYPE_INTEGER",
                                          "TYPE_STRING",
                                          "TYPE_BOOLEAN",
                                          "TYPE_DECIMAL",
                                          "TYPE_TIMESTAMP"
                                        ]
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "pub_keys": {
                            "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "quote_name": {
                        "description": "Product quote name",
                        "type": "string"
                      },
                      "settlement_asset": {
                        "description": "Product settlement asset identifier",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            },
            "type": "object"
          },
          "liquidity_monitoring_parameters": {
            "description": "Liquidity monitoring parameters",
            "properties": {
              "auction_extension": {
                "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                "format": "int64",
                "type": "integer"
              },
              "target_stake_parameters": {
                "description": "Specifies parameters related to target stake calculation",
                "properties": {
                  "scaling_factor": {
                    "description": "Specifies scaling factors used in target stake calculation",
                    "type": "number"
                  },
                  "time_window": {
                    "description": "Specifies length of time window expressed in seconds for target stake calculation",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "triggering_ratio": {
                "description": "Specifies the triggering ratio for entering liquidity auction",
                "type": "number"
              }
            },
            "type": "object"
          },
          "metadata": {
            "description": "Optional new market meta data, tags",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "price_monitoring_parameters": {
            "description": "Price monitoring parameters",
            "properties": {
              "triggers": {
                "items": {
                  "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                  "properties": {
                    "auction_extension": {
                      "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                      "format": "int64",
                      "type": "integer"
                    },
                    "horizon": {
                      "description": "Price monitoring projection horizon τ in seconds",
                      "format": "int64",
                      "type": "integer"
                    },
                    "probability": {
                      "description": "Price monitoring probability level p",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "risk_parameters": {
            "oneOf": [
              {
                "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                "properties": {
                  "factor_long": {
                    "description": "Pre-defined risk factor value for long",
                    "type": "number"
                  },
                  "factor_short": {
                    "description": "Pre-defined risk factor value for short",
                    "type": "number"
                  },
                  "max_move_up": {
                    "description": "Pre-defined maximum price move up that the model considers as valid",
                    "type": "number"
                  },
                  "min_move_down": {
                    "description": "Pre-defined minimum price move down that the model considers as valid",
                    "type": "number"
                  },
                  "probability_of_trading": {
                    "description": "Pre-defined constant probability of trading",
                    "type": "number"
                  }
                },
                "type": "object"
              },
              {
                "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                "properties": {
                  "params": {
                    "description": "Risk model parameters for log normal",
                    "properties": {
                      "mu": {
                        "description": "Mu param",
                        "type": "number"
                      },
                      "r": {
                        "description": "R param",
                        "type": "number"
                      },
                      "sigma": {
                        "description": "Sigma param",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "risk_aversion_parameter": {
                    "description": "Risk Aversion Parameter",
                    "type": "number"
                  },
                  "tau": {
                    "description": "Tau",
                    "type": "number"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object"
      },
      "vega.Node": {
        "properties": {
          "avatar_url": {
            "description": "Avatar url",
            "type": "string"
          },
          "delegations": {
            "description": "Node's delegations",
            "items": {
              "properties": {
                "amount": {
                  "description": "Amount delegated",
                  "type": "string"
                },
                "epoch_seq": {
                  "description": "Epoch of delegation",
                  "type": "string"
                },
                "node_id": {
                  "description": "Node ID",
                  "type": "string"
                },
                "party": {
                  "description": "Party which is delegating",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "epoch_data": {
            "description": "Informantion about epoch",
            "properties": {
              "offline": {
                "description": "Total number of offline epochs since node was created",
                "format": "int32",
                "type": "integer"
              },
              "online": {
                "description": "Total number of online epochs since node was created",
                "format": "int32",
                "type": "integer"
              },
              "total": {
                "description": "Total number of epochs since node was created",
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "ethereum_adddress": {
            "description": "Ethereum public key of the node",
            "type": "string"
          },
          "id": {
            "description": "The node ID (wallet ID)",
            "type": "string"
          },
          "info_url": {
            "description": "URL where I can find out more info on the node",
            "type": "string"
          },
          "location": {
            "description": "Country code for the location of the node",
            "type": "string"
          },
          "max_intended_stake": {
            "description": "Max amount of (wanted) stake, is this a network param or a node param",
            "type": "string"
          },
          "name": {
            "description": "Node name",
            "type": "string"
          },
          "normalised_score": {
            "description": "Node normalised score",
            "type": "string"
          },
          "pending_stake": {
            "description": "Amount of stake on the next epoch",
            "type": "string"
          },
          "performance": {
            "description": "Performance",
            "type": "string"
          },
          "pub_key": {
            "description": "Pub key of the node operator",
            "type": "string"
          },
          "raw_score": {
            "description": "Raw Score",
            "type": "string"
          },
          "score": {
            "description": "Node score",
            "type": "string"
          },
          "staked_by_delegates": {
            "description": "The amount of stake that has been delegated by token holders",
            "type": "string"
          },
          "staked_by_operator": {
            "description": "The amount the node has put up themselves",
            "type": "string"
          },
          "staked_total": {
            "description": "Total amount staked on node",
            "type": "string"
          },
          "status": {
            "description": "Node status",
            "enum": [
              [
                "NODE_STATUS_UNSPECIFIED",
                "NODE_STATUS_VALIDATOR",
                "NODE_STATUS_NON_VALIDATOR"
              ]
            ],
            "type": "string"
          },
          "tm_pub_key": {
            "description": "Public key of Tendermint",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.NodeData": {
        "properties": {
          "inactive_nodes": {
            "description": "Number of inactive nodes",
            "format": "int32",
            "type": "integer"
          },
          "staked_total": {
            "description": "Total staked amount across all nodes",
            "type": "string"
          },
          "total_nodes": {
            "description": "Total number of nodes",
            "format": "int32",
            "type": "integer"
          },
          "uptime": {
            "description": "Total uptime for all epochs across all nodes",
            "type": "number"
          },
          "validating_nodes": {
            "description": "Number of nodes validating",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.NodeStatus": {
        "description": "Node status type",
        "enum": [
          [
            "NODE_STATUS_UNSPECIFIED",
            "NODE_STATUS_VALIDATOR",
            "NODE_STATUS_NON_VALIDATOR"
          ]
        ],
        "type": "string"
      },
      "vega.OracleSpecToFutureBinding": {
        "description": "OracleSpecToFutureBinding tells on which property oracle data should be used as settlement price and which to use the trading terminated trigger",
        "properties": {
          "settlement_price_property": {
            "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
            "type": "string"
          },
          "trading_termination_property": {
            "description": "the name of the property in the oracle data that signals termination of trading",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.Order": {
        "description": "An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties",
        "properties": {
          "batch_id": {
            "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)",
            "format": "int64",
            "type": "integer"
          },
          "created_at": {
            "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
            "format": "int64",
            "type": "integer"
          },
          "expires_at": {
            "description": "Timestamp for when the order will expire, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier for the order (set by the system after consensus)",
            "type": "string"
          },
          "liquidity_provision_id": {
            "description": "Is this order created as part of a liquidity provision, will be empty if not.",
            "type": "string"
          },
          "market_id": {
            "description": "Market identifier for the order",
            "type": "string"
          },
          "party_id": {
            "description": "Party identifier for the order",
            "type": "string"
          },
          "pegged_order": {
            "description": "Pegged order details, used only if the order represents a pegged order.",
            "properties": {
              "offset": {
                "description": "Offset from the price reference",
                "type": "string"
              },
              "reference": {
                "description": "Which price point are we linked to",
                "enum": [
                  [
                    "PEGGED_REFERENCE_UNSPECIFIED",
                    "PEGGED_REFERENCE_MID",
                    "PEGGED_REFERENCE_BEST_BID",
                    "PEGGED_REFERENCE_BEST_ASK"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "price": {
            "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
            "type": "string"
          },
          "reason": {
            "description": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors",
            "enum": [
              [
                "ORDER_ERROR_UNSPECIFIED",
                "ORDER_ERROR_INVALID_MARKET_ID",
                "ORDER_ERROR_INVALID_ORDER_ID",
                "ORDER_ERROR_OUT_OF_SEQUENCE",
                "ORDER_ERROR_INVALID_REMAINING_SIZE",
                "ORDER_ERROR_TIME_FAILURE",
                "ORDER_ERROR_REMOVAL_FAILURE",
                "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                "ORDER_ERROR_EDIT_NOT_ALLOWED",
                "ORDER_ERROR_AMEND_FAILURE",
                "ORDER_ERROR_NOT_FOUND",
                "ORDER_ERROR_INVALID_PARTY_ID",
                "ORDER_ERROR_MARKET_CLOSED",
                "ORDER_ERROR_MARGIN_CHECK_FAILED",
                "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                "ORDER_ERROR_INTERNAL_ERROR",
                "ORDER_ERROR_INVALID_SIZE",
                "ORDER_ERROR_INVALID_PERSISTENCE",
                "ORDER_ERROR_INVALID_TYPE",
                "ORDER_ERROR_SELF_TRADING",
                "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
              ]
            ],
            "type": "string"
          },
          "reference": {
            "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission",
            "type": "string"
          },
          "remaining": {
            "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED",
            "format": "int64",
            "type": "integer"
          },
          "side": {
            "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
            "enum": [
              [
                "SIDE_UNSPECIFIED",
                "SIDE_BUY",
                "SIDE_SELL"
              ]
            ],
            "type": "string"
          },
          "size": {
            "description": "Size for the order, for example, in a futures market the size equals the number of contracts",
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "description": "The current status for the order. See [`Order.Status`](#vega.Order.Status) - For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field",
            "enum": [
              [
                "STATUS_UNSPECIFIED",
                "STATUS_ACTIVE",
                "STATUS_EXPIRED",
                "STATUS_CANCELLED",
                "STATUS_STOPPED",
                "STATUS_FILLED",
                "STATUS_REJECTED",
                "STATUS_PARTIALLY_FILLED",
                "STATUS_PARKED"
              ]
            ],
            "type": "string"
          },
          "time_in_force": {
            "description": "Time in force indicates how long an order will remain active before it is executed or expires. - See [`Order.TimeInForce`](#vega.Order.TimeInForce)",
            "enum": [
              [
                "TIME_IN_FORCE_UNSPECIFIED",
                "TIME_IN_FORCE_GTC",
                "TIME_IN_FORCE_GTT",
                "TIME_IN_FORCE_IOC",
                "TIME_IN_FORCE_FOK",
                "TIME_IN_FORCE_GFA",
                "TIME_IN_FORCE_GFN"
              ]
            ],
            "type": "string"
          },
          "type": {
            "description": "Type for the order - See [`Order.Type`](#vega.Order.Type)",
            "enum": [
              [
                "TYPE_UNSPECIFIED",
                "TYPE_LIMIT",
                "TYPE_MARKET",
                "TYPE_NETWORK"
              ]
            ],
            "type": "string"
          },
          "updated_at": {
            "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "description": "The version for the order, initial value is version 1 and is incremented after each successful amend",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.OrderCancellationConfirmation": {
        "description": "Used when cancelling an Order",
        "properties": {
          "order": {
            "description": "The order that was cancelled",
            "properties": {
              "batch_id": {
                "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)",
                "format": "int64",
                "type": "integer"
              },
              "created_at": {
                "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "expires_at": {
                "description": "Timestamp for when the order will expire, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`",
                "format": "int64",
                "type": "integer"
              },
              "id": {
                "description": "Unique identifier for the order (set by the system after consensus)",
                "type": "string"
              },
              "liquidity_provision_id": {
                "description": "Is this order created as part of a liquidity provision, will be empty if not.",
                "type": "string"
              },
              "market_id": {
                "description": "Market identifier for the order",
                "type": "string"
              },
              "party_id": {
                "description": "Party identifier for the order",
                "type": "string"
              },
              "pegged_order": {
                "description": "Pegged order details, used only if the order represents a pegged order.",
                "properties": {
                  "offset": {
                    "description": "Offset from the price reference",
                    "type": "string"
                  },
                  "reference": {
                    "description": "Which price point are we linked to",
                    "enum": [
                      [
                        "PEGGED_REFERENCE_UNSPECIFIED",
                        "PEGGED_REFERENCE_MID",
                        "PEGGED_REFERENCE_BEST_BID",
                        "PEGGED_REFERENCE_BEST_ASK"
                      ]
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "price": {
                "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "reason": {
                "description": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors",
                "enum": [
                  [
                    "ORDER_ERROR_UNSPECIFIED",
                    "ORDER_ERROR_INVALID_MARKET_ID",
                    "ORDER_ERROR_INVALID_ORDER_ID",
                    "ORDER_ERROR_OUT_OF_SEQUENCE",
                    "ORDER_ERROR_INVALID_REMAINING_SIZE",
                    "ORDER_ERROR_TIME_FAILURE",
                    "ORDER_ERROR_REMOVAL_FAILURE",
                    "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                    "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                    "ORDER_ERROR_EDIT_NOT_ALLOWED",
                    "ORDER_ERROR_AMEND_FAILURE",
                    "ORDER_ERROR_NOT_FOUND",
                    "ORDER_ERROR_INVALID_PARTY_ID",
                    "ORDER_ERROR_MARKET_CLOSED",
                    "ORDER_ERROR_MARGIN_CHECK_FAILED",
                    "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                    "ORDER_ERROR_INTERNAL_ERROR",
                    "ORDER_ERROR_INVALID_SIZE",
                    "ORDER_ERROR_INVALID_PERSISTENCE",
                    "ORDER_ERROR_INVALID_TYPE",
                    "ORDER_ERROR_SELF_TRADING",
                    "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                    "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                    "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                    "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                    "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                    "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                    "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                    "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                    "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                    "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                    "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                    "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                    "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                    "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                    "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                    "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                    "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                    "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                    "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                    "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                    "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                    "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                    "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                    "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                    "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
                  ]
                ],
                "type": "string"
              },
              "reference": {
                "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission",
                "type": "string"
              },
              "remaining": {
                "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED",
                "format": "int64",
                "type": "integer"
              },
              "side": {
                "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                "enum": [
                  [
                    "SIDE_UNSPECIFIED",
                    "SIDE_BUY",
                    "SIDE_SELL"
                  ]
                ],
                "type": "string"
              },
              "size": {
                "description": "Size for the order, for example, in a futures market the size equals the number of contracts",
                "format": "int64",
                "type": "integer"
              },
              "status": {
                "description": "The current status for the order. See [`Order.Status`](#vega.Order.Status) - For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field",
                "enum": [
                  [
                    "STATUS_UNSPECIFIED",
                    "STATUS_ACTIVE",
                    "STATUS_EXPIRED",
                    "STATUS_CANCELLED",
                    "STATUS_STOPPED",
                    "STATUS_FILLED",
                    "STATUS_REJECTED",
                    "STATUS_PARTIALLY_FILLED",
                    "STATUS_PARKED"
                  ]
                ],
                "type": "string"
              },
              "time_in_force": {
                "description": "Time in force indicates how long an order will remain active before it is executed or expires. - See [`Order.TimeInForce`](#vega.Order.TimeInForce)",
                "enum": [
                  [
                    "TIME_IN_FORCE_UNSPECIFIED",
                    "TIME_IN_FORCE_GTC",
                    "TIME_IN_FORCE_GTT",
                    "TIME_IN_FORCE_IOC",
                    "TIME_IN_FORCE_FOK",
                    "TIME_IN_FORCE_GFA",
                    "TIME_IN_FORCE_GFN"
                  ]
                ],
                "type": "string"
              },
              "type": {
                "description": "Type for the order - See [`Order.Type`](#vega.Order.Type)",
                "enum": [
                  [
                    "TYPE_UNSPECIFIED",
                    "TYPE_LIMIT",
                    "TYPE_MARKET",
                    "TYPE_NETWORK"
                  ]
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "version": {
                "description": "The version for the order, initial value is version 1 and is incremented after each successful amend",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "vega.OrderConfirmation": {
        "description": "Used when confirming an Order",
        "properties": {
          "order": {
            "description": "The order that was confirmed",
            "properties": {
              "batch_id": {
                "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)",
                "format": "int64",
                "type": "integer"
              },
              "created_at": {
                "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "expires_at": {
                "description": "Timestamp for when the order will expire, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`",
                "format": "int64",
                "type": "integer"
              },
              "id": {
                "description": "Unique identifier for the order (set by the system after consensus)",
                "type": "string"
              },
              "liquidity_provision_id": {
                "description": "Is this order created as part of a liquidity provision, will be empty if not.",
                "type": "string"
              },
              "market_id": {
                "description": "Market identifier for the order",
                "type": "string"
              },
              "party_id": {
                "description": "Party identifier for the order",
                "type": "string"
              },
              "pegged_order": {
                "description": "Pegged order details, used only if the order represents a pegged order.",
                "properties": {
                  "offset": {
                    "description": "Offset from the price reference",
                    "type": "string"
                  },
                  "reference": {
                    "description": "Which price point are we linked to",
                    "enum": [
                      [
                        "PEGGED_REFERENCE_UNSPECIFIED",
                        "PEGGED_REFERENCE_MID",
                        "PEGGED_REFERENCE_BEST_BID",
                        "PEGGED_REFERENCE_BEST_ASK"
                      ]
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "price": {
                "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                "type": "string"
              },
              "reason": {
                "description": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors",
                "enum": [
                  [
                    "ORDER_ERROR_UNSPECIFIED",
                    "ORDER_ERROR_INVALID_MARKET_ID",
                    "ORDER_ERROR_INVALID_ORDER_ID",
                    "ORDER_ERROR_OUT_OF_SEQUENCE",
                    "ORDER_ERROR_INVALID_REMAINING_SIZE",
                    "ORDER_ERROR_TIME_FAILURE",
                    "ORDER_ERROR_REMOVAL_FAILURE",
                    "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                    "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                    "ORDER_ERROR_EDIT_NOT_ALLOWED",
                    "ORDER_ERROR_AMEND_FAILURE",
                    "ORDER_ERROR_NOT_FOUND",
                    "ORDER_ERROR_INVALID_PARTY_ID",
                    "ORDER_ERROR_MARKET_CLOSED",
                    "ORDER_ERROR_MARGIN_CHECK_FAILED",
                    "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                    "ORDER_ERROR_INTERNAL_ERROR",
                    "ORDER_ERROR_INVALID_SIZE",
                    "ORDER_ERROR_INVALID_PERSISTENCE",
                    "ORDER_ERROR_INVALID_TYPE",
                    "ORDER_ERROR_SELF_TRADING",
                    "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                    "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                    "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                    "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                    "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                    "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                    "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                    "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                    "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                    "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                    "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                    "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                    "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                    "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                    "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                    "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                    "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                    "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                    "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                    "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                    "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                    "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                    "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                    "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                    "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
                  ]
                ],
                "type": "string"
              },
              "reference": {
                "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission",
                "type": "string"
              },
              "remaining": {
                "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED",
                "format": "int64",
                "type": "integer"
              },
              "side": {
                "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                "enum": [
                  [
                    "SIDE_UNSPECIFIED",
                    "SIDE_BUY",
                    "SIDE_SELL"
                  ]
                ],
                "type": "string"
              },
              "size": {
                "description": "Size for the order, for example, in a futures market the size equals the number of contracts",
                "format": "int64",
                "type": "integer"
              },
              "status": {
                "description": "The current status for the order. See [`Order.Status`](#vega.Order.Status) - For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field",
                "enum": [
                  [
                    "STATUS_UNSPECIFIED",
                    "STATUS_ACTIVE",
                    "STATUS_EXPIRED",
                    "STATUS_CANCELLED",
                    "STATUS_STOPPED",
                    "STATUS_FILLED",
                    "STATUS_REJECTED",
                    "STATUS_PARTIALLY_FILLED",
                    "STATUS_PARKED"
                  ]
                ],
                "type": "string"
              },
              "time_in_force": {
                "description": "Time in force indicates how long an order will remain active before it is executed or expires. - See [`Order.TimeInForce`](#vega.Order.TimeInForce)",
                "enum": [
                  [
                    "TIME_IN_FORCE_UNSPECIFIED",
                    "TIME_IN_FORCE_GTC",
                    "TIME_IN_FORCE_GTT",
                    "TIME_IN_FORCE_IOC",
                    "TIME_IN_FORCE_FOK",
                    "TIME_IN_FORCE_GFA",
                    "TIME_IN_FORCE_GFN"
                  ]
                ],
                "type": "string"
              },
              "type": {
                "description": "Type for the order - See [`Order.Type`](#vega.Order.Type)",
                "enum": [
                  [
                    "TYPE_UNSPECIFIED",
                    "TYPE_LIMIT",
                    "TYPE_MARKET",
                    "TYPE_NETWORK"
                  ]
                ],
                "type": "string"
              },
              "updated_at": {
                "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                "format": "int64",
                "type": "integer"
              },
              "version": {
                "description": "The version for the order, initial value is version 1 and is incremented after each successful amend",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "passive_orders_affected": {
            "description": "0 or more passive orders that were affected",
            "items": {
              "description": "An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties",
              "properties": {
                "batch_id": {
                  "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)",
                  "format": "int64",
                  "type": "integer"
                },
                "created_at": {
                  "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "expires_at": {
                  "description": "Timestamp for when the order will expire, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`",
                  "format": "int64",
                  "type": "integer"
                },
                "id": {
                  "description": "Unique identifier for the order (set by the system after consensus)",
                  "type": "string"
                },
                "liquidity_provision_id": {
                  "description": "Is this order created as part of a liquidity provision, will be empty if not.",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier for the order",
                  "type": "string"
                },
                "party_id": {
                  "description": "Party identifier for the order",
                  "type": "string"
                },
                "pegged_order": {
                  "description": "Pegged order details, used only if the order represents a pegged order.",
                  "properties": {
                    "offset": {
                      "description": "Offset from the price reference",
                      "type": "string"
                    },
                    "reference": {
                      "description": "Which price point are we linked to",
                      "enum": [
                        [
                          "PEGGED_REFERENCE_UNSPECIFIED",
                          "PEGGED_REFERENCE_MID",
                          "PEGGED_REFERENCE_BEST_BID",
                          "PEGGED_REFERENCE_BEST_ASK"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "price": {
                  "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "reason": {
                  "description": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors",
                  "enum": [
                    [
                      "ORDER_ERROR_UNSPECIFIED",
                      "ORDER_ERROR_INVALID_MARKET_ID",
                      "ORDER_ERROR_INVALID_ORDER_ID",
                      "ORDER_ERROR_OUT_OF_SEQUENCE",
                      "ORDER_ERROR_INVALID_REMAINING_SIZE",
                      "ORDER_ERROR_TIME_FAILURE",
                      "ORDER_ERROR_REMOVAL_FAILURE",
                      "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                      "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                      "ORDER_ERROR_EDIT_NOT_ALLOWED",
                      "ORDER_ERROR_AMEND_FAILURE",
                      "ORDER_ERROR_NOT_FOUND",
                      "ORDER_ERROR_INVALID_PARTY_ID",
                      "ORDER_ERROR_MARKET_CLOSED",
                      "ORDER_ERROR_MARGIN_CHECK_FAILED",
                      "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                      "ORDER_ERROR_INTERNAL_ERROR",
                      "ORDER_ERROR_INVALID_SIZE",
                      "ORDER_ERROR_INVALID_PERSISTENCE",
                      "ORDER_ERROR_INVALID_TYPE",
                      "ORDER_ERROR_SELF_TRADING",
                      "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                      "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                      "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                      "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                      "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                      "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                      "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                      "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                      "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                      "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                      "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                      "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                      "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                      "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                      "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                      "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                      "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                      "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                      "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                      "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                      "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                      "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                      "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                      "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                      "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
                    ]
                  ],
                  "type": "string"
                },
                "reference": {
                  "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission",
                  "type": "string"
                },
                "remaining": {
                  "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED",
                  "format": "int64",
                  "type": "integer"
                },
                "side": {
                  "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                  "enum": [
                    [
                      "SIDE_UNSPECIFIED",
                      "SIDE_BUY",
                      "SIDE_SELL"
                    ]
                  ],
                  "type": "string"
                },
                "size": {
                  "description": "Size for the order, for example, in a futures market the size equals the number of contracts",
                  "format": "int64",
                  "type": "integer"
                },
                "status": {
                  "description": "The current status for the order. See [`Order.Status`](#vega.Order.Status) - For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field",
                  "enum": [
                    [
                      "STATUS_UNSPECIFIED",
                      "STATUS_ACTIVE",
                      "STATUS_EXPIRED",
                      "STATUS_CANCELLED",
                      "STATUS_STOPPED",
                      "STATUS_FILLED",
                      "STATUS_REJECTED",
                      "STATUS_PARTIALLY_FILLED",
                      "STATUS_PARKED"
                    ]
                  ],
                  "type": "string"
                },
                "time_in_force": {
                  "description": "Time in force indicates how long an order will remain active before it is executed or expires. - See [`Order.TimeInForce`](#vega.Order.TimeInForce)",
                  "enum": [
                    [
                      "TIME_IN_FORCE_UNSPECIFIED",
                      "TIME_IN_FORCE_GTC",
                      "TIME_IN_FORCE_GTT",
                      "TIME_IN_FORCE_IOC",
                      "TIME_IN_FORCE_FOK",
                      "TIME_IN_FORCE_GFA",
                      "TIME_IN_FORCE_GFN"
                    ]
                  ],
                  "type": "string"
                },
                "type": {
                  "description": "Type for the order - See [`Order.Type`](#vega.Order.Type)",
                  "enum": [
                    [
                      "TYPE_UNSPECIFIED",
                      "TYPE_LIMIT",
                      "TYPE_MARKET",
                      "TYPE_NETWORK"
                    ]
                  ],
                  "type": "string"
                },
                "updated_at": {
                  "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "version": {
                  "description": "The version for the order, initial value is version 1 and is incremented after each successful amend",
                  "format": "int64",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "trades": {
            "description": "0 or more trades that were emitted",
            "items": {
              "description": "A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega",
              "properties": {
                "aggressor": {
                  "description": "Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                  "enum": [
                    [
                      "SIDE_UNSPECIFIED",
                      "SIDE_BUY",
                      "SIDE_SELL"
                    ]
                  ],
                  "type": "string"
                },
                "buy_order": {
                  "description": "Identifier of the order from the buy side",
                  "type": "string"
                },
                "buyer": {
                  "description": "Unique party identifier for the buyer",
                  "type": "string"
                },
                "buyer_auction_batch": {
                  "description": "Auction batch number that the buy side order was placed in",
                  "format": "int64",
                  "type": "integer"
                },
                "buyer_fee": {
                  "description": "Fee amount charged to the buyer party for the trade",
                  "properties": {
                    "infrastructure_fee": {
                      "description": "Fee amount paid for maintaining the Vega infrastructure",
                      "type": "string"
                    },
                    "liquidity_fee": {
                      "description": "Fee amount paid to market makers",
                      "type": "string"
                    },
                    "maker_fee": {
                      "description": "Fee amount paid to the non-aggressive party of the trade",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique identifier for the trade (generated by Vega)",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier (the market that the trade occurred on)",
                  "type": "string"
                },
                "price": {
                  "description": "Price for the trade, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "sell_order": {
                  "description": "Identifier of the order from the sell side",
                  "type": "string"
                },
                "seller": {
                  "description": "Unique party identifier for the seller",
                  "type": "string"
                },
                "seller_auction_batch": {
                  "description": "Auction batch number that the sell side order was placed in",
                  "format": "int64",
                  "type": "integer"
                },
                "seller_fee": {
                  "description": "Fee amount charged to the seller party for the trade",
                  "properties": {
                    "infrastructure_fee": {
                      "description": "Fee amount paid for maintaining the Vega infrastructure",
                      "type": "string"
                    },
                    "liquidity_fee": {
                      "description": "Fee amount paid to market makers",
                      "type": "string"
                    },
                    "maker_fee": {
                      "description": "Fee amount paid to the non-aggressive party of the trade",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "size": {
                  "description": "Size filled for the trade",
                  "format": "int64",
                  "type": "integer"
                },
                "timestamp": {
                  "description": "Timestamp for when the trade occurred, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "type": {
                  "description": "Type for the trade - See [`Trade.Type`](#vega.Trade.Type)",
                  "enum": [
                    [
                      "TYPE_UNSPECIFIED",
                      "TYPE_DEFAULT",
                      "TYPE_NETWORK_CLOSE_OUT_GOOD",
                      "TYPE_NETWORK_CLOSE_OUT_BAD"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "vega.OrderError": {
        "description": "OrderError codes are returned in the `[Order](#vega.Order).reason` field - If there is an issue with an order during its life-cycle, it will be marked with `status.ORDER_STATUS_REJECTED`",
        "enum": [
          [
            "ORDER_ERROR_UNSPECIFIED",
            "ORDER_ERROR_INVALID_MARKET_ID",
            "ORDER_ERROR_INVALID_ORDER_ID",
            "ORDER_ERROR_OUT_OF_SEQUENCE",
            "ORDER_ERROR_INVALID_REMAINING_SIZE",
            "ORDER_ERROR_TIME_FAILURE",
            "ORDER_ERROR_REMOVAL_FAILURE",
            "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
            "ORDER_ERROR_INVALID_ORDER_REFERENCE",
            "ORDER_ERROR_EDIT_NOT_ALLOWED",
            "ORDER_ERROR_AMEND_FAILURE",
            "ORDER_ERROR_NOT_FOUND",
            "ORDER_ERROR_INVALID_PARTY_ID",
            "ORDER_ERROR_MARKET_CLOSED",
            "ORDER_ERROR_MARGIN_CHECK_FAILED",
            "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
            "ORDER_ERROR_INTERNAL_ERROR",
            "ORDER_ERROR_INVALID_SIZE",
            "ORDER_ERROR_INVALID_PERSISTENCE",
            "ORDER_ERROR_INVALID_TYPE",
            "ORDER_ERROR_SELF_TRADING",
            "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
            "ORDER_ERROR_INCORRECT_MARKET_TYPE",
            "ORDER_ERROR_INVALID_TIME_IN_FORCE",
            "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
            "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
            "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
            "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
            "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
            "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
            "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
            "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
            "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
            "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
            "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
            "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
            "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
            "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
            "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
            "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
            "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
            "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
            "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
            "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
            "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
            "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS"
          ]
        ],
        "type": "string"
      },
      "vega.Party": {
        "description": "A party represents an entity who wishes to trade on or query a Vega network",
        "properties": {
          "id": {
            "description": "A unique identifier for the party, typically represented by a public key",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.PeggedOrder": {
        "description": "Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET They can be used for any limit order that is valid during continuous trading",
        "properties": {
          "offset": {
            "description": "Offset from the price reference",
            "type": "string"
          },
          "reference": {
            "description": "Which price point are we linked to",
            "enum": [
              [
                "PEGGED_REFERENCE_UNSPECIFIED",
                "PEGGED_REFERENCE_MID",
                "PEGGED_REFERENCE_BEST_BID",
                "PEGGED_REFERENCE_BEST_ASK"
              ]
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.PeggedReference": {
        "description": "A pegged reference defines which price point a pegged order is linked to - meaning the price for a pegged order is calculated from the value of the reference price point",
        "enum": [
          [
            "PEGGED_REFERENCE_UNSPECIFIED",
            "PEGGED_REFERENCE_MID",
            "PEGGED_REFERENCE_BEST_BID",
            "PEGGED_REFERENCE_BEST_ASK"
          ]
        ],
        "type": "string"
      },
      "vega.Position": {
        "description": "Represents position data for a party on the specified market on Vega",
        "properties": {
          "average_entry_price": {
            "description": "Average entry price for the position, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
            "type": "string"
          },
          "market_id": {
            "description": "Market identifier",
            "type": "string"
          },
          "open_volume": {
            "description": "Open volume for the position, value is signed +ve for long and -ve for short",
            "format": "int64",
            "type": "integer"
          },
          "party_id": {
            "description": "Party identifier",
            "type": "string"
          },
          "realised_pnl": {
            "description": "Realised profit and loss for the position, value is signed +ve for long and -ve for short",
            "type": "string"
          },
          "unrealised_pnl": {
            "description": "Unrealised profit and loss for the position, value is signed +ve for long and -ve for short",
            "type": "string"
          },
          "updated_at": {
            "description": "Timestamp for the latest time the position was updated",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.PositionTrade": {
        "properties": {
          "price": {
            "description": "Price for the position trade, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
            "type": "string"
          },
          "volume": {
            "description": "Volume for the position trade, value is signed +ve for long and -ve for short",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.Price": {
        "properties": {
          "value": {
            "description": "Price value, given as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.PriceLevel": {
        "description": "Represents a price level from market depth or order book data",
        "properties": {
          "number_of_orders": {
            "description": "Number of orders at the price level",
            "format": "int64",
            "type": "integer"
          },
          "price": {
            "description": "Price for the price level, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
            "type": "string"
          },
          "volume": {
            "description": "Volume at the price level",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.PriceMonitoringBounds": {
        "description": "Represents a list of valid (at the current timestamp) price ranges per associated trigger",
        "properties": {
          "max_valid_price": {
            "description": "Maximum price that isn't currently breaching the specified price monitoring trigger",
            "type": "string"
          },
          "min_valid_price": {
            "description": "Minimum price that isn't currently breaching the specified price monitoring trigger",
            "type": "string"
          },
          "reference_price": {
            "description": "Reference price used to calculate the valid price range",
            "type": "number"
          },
          "trigger": {
            "description": "Price monitoring trigger associated with the bounds",
            "properties": {
              "auction_extension": {
                "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                "format": "int64",
                "type": "integer"
              },
              "horizon": {
                "description": "Price monitoring projection horizon τ in seconds",
                "format": "int64",
                "type": "integer"
              },
              "probability": {
                "description": "Price monitoring probability level p",
                "type": "number"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "vega.PriceMonitoringParameters": {
        "description": "PriceMonitoringParameters contains a collection of triggers to be used for a given market",
        "properties": {
          "triggers": {
            "items": {
              "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
              "properties": {
                "auction_extension": {
                  "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                  "format": "int64",
                  "type": "integer"
                },
                "horizon": {
                  "description": "Price monitoring projection horizon τ in seconds",
                  "format": "int64",
                  "type": "integer"
                },
                "probability": {
                  "description": "Price monitoring probability level p",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "vega.PriceMonitoringSettings": {
        "description": "PriceMonitoringSettings contains the settings for price monitoring",
        "properties": {
          "parameters": {
            "description": "Specifies price monitoring parameters to be used for price monitoring purposes",
            "properties": {
              "triggers": {
                "items": {
                  "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                  "properties": {
                    "auction_extension": {
                      "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                      "format": "int64",
                      "type": "integer"
                    },
                    "horizon": {
                      "description": "Price monitoring projection horizon τ in seconds",
                      "format": "int64",
                      "type": "integer"
                    },
                    "probability": {
                      "description": "Price monitoring probability level p",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "update_frequency": {
            "description": "Specifies how often (expressed in seconds) the price monitoring bounds should be updated",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.PriceMonitoringTrigger": {
        "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
        "properties": {
          "auction_extension": {
            "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
            "format": "int64",
            "type": "integer"
          },
          "horizon": {
            "description": "Price monitoring projection horizon τ in seconds",
            "format": "int64",
            "type": "integer"
          },
          "probability": {
            "description": "Price monitoring probability level p",
            "type": "number"
          }
        },
        "type": "object"
      },
      "vega.Proposal": {
        "description": "Governance proposal",
        "properties": {
          "error_details": {
            "description": "The detailed error associated to the reason.",
            "type": "string"
          },
          "id": {
            "description": "Unique proposal identifier",
            "type": "string"
          },
          "party_id": {
            "description": "Party identifier of the author (the party submitting the proposal)",
            "type": "string"
          },
          "reason": {
            "description": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses",
            "enum": [
              [
                "PROPOSAL_ERROR_UNSPECIFIED",
                "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
                "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
                "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
                "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
                "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
                "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
                "PROPOSAL_ERROR_NO_PRODUCT",
                "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
                "PROPOSAL_ERROR_NO_TRADING_MODE",
                "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
                "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
                "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
                "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
                "PROPOSAL_ERROR_INVALID_ASSET",
                "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
                "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
                "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
                "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
                "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
                "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
                "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
                "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
                "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
                "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
                "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
                "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
                "PROPOSAL_ERROR_INVALID_SHAPE",
                "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
                "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
                "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
                "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
              ]
            ],
            "type": "string"
          },
          "reference": {
            "description": "Proposal reference",
            "type": "string"
          },
          "state": {
            "description": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition",
            "enum": [
              [
                "STATE_UNSPECIFIED",
                "STATE_FAILED",
                "STATE_OPEN",
                "STATE_PASSED",
                "STATE_REJECTED",
                "STATE_DECLINED",
                "STATE_ENACTED",
                "STATE_WAITING_FOR_NODE_VOTE"
              ]
            ],
            "type": "string"
          },
          "terms": {
            "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted",
            "properties": {
              "change": {
                "oneOf": [
                  {
                    "description": "Proposal change for modifying an existing market on Vega",
                    "type": "object"
                  },
                  {
                    "description": "Proposal change for creating new market on Vega",
                    "properties": {
                      "changes": {
                        "description": "The configuration of the new market",
                        "properties": {
                          "decimal_places": {
                            "description": "Decimal places used for the new market",
                            "format": "int64",
                            "type": "integer"
                          },
                          "instrument": {
                            "description": "New market instrument configuration",
                            "properties": {
                              "code": {
                                "description": "Instrument code",
                                "type": "string"
                              },
                              "name": {
                                "description": "Instrument name",
                                "type": "string"
                              },
                              "product": {
                                "oneOf": [
                                  {
                                    "description": "Future",
                                    "properties": {
                                      "oracle_spec_binding": {
                                        "description": "The binding between the oracle spec and the settlement price",
                                        "properties": {
                                          "settlement_price_property": {
                                            "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                            "type": "string"
                                          },
                                          "trading_termination_property": {
                                            "description": "the name of the property in the oracle data that signals termination of trading",
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "oracle_spec_for_settlement_price": {
                                        "description": "The oracle spec describing the oracle data of settlement price",
                                        "properties": {
                                          "filters": {
                                            "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                            "items": {
                                              "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                              "properties": {
                                                "conditions": {
                                                  "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                  "items": {
                                                    "description": "Condition describes the condition that must be validated by the",
                                                    "properties": {
                                                      "operator": {
                                                        "description": "comparator is the type of comparison to make on the value.",
                                                        "enum": [
                                                          [
                                                            "OPERATOR_UNSPECIFIED",
                                                            "OPERATOR_EQUALS",
                                                            "OPERATOR_GREATER_THAN",
                                                            "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                            "OPERATOR_LESS_THAN",
                                                            "OPERATOR_LESS_THAN_OR_EQUAL"
                                                          ]
                                                        ],
                                                        "type": "string"
                                                      },
                                                      "value": {
                                                        "description": "value is used by the comparator.",
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "type": "array"
                                                },
                                                "key": {
                                                  "description": "key is the oracle data property key targeted by the filter.",
                                                  "properties": {
                                                    "name": {
                                                      "description": "name is the name of the property.",
                                                      "type": "string"
                                                    },
                                                    "type": {
                                                      "description": "type is the type of the property.",
                                                      "enum": [
                                                        [
                                                          "TYPE_UNSPECIFIED",
                                                          "TYPE_EMPTY",
                                                          "TYPE_INTEGER",
                                                          "TYPE_STRING",
                                                          "TYPE_BOOLEAN",
                                                          "TYPE_DECIMAL",
                                                          "TYPE_TIMESTAMP"
                                                        ]
                                                      ],
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "pub_keys": {
                                            "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "oracle_spec_for_trading_termination": {
                                        "description": "The oracle spec describing the oracle data of trading termination",
                                        "properties": {
                                          "filters": {
                                            "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                            "items": {
                                              "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                              "properties": {
                                                "conditions": {
                                                  "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                                  "items": {
                                                    "description": "Condition describes the condition that must be validated by the",
                                                    "properties": {
                                                      "operator": {
                                                        "description": "comparator is the type of comparison to make on the value.",
                                                        "enum": [
                                                          [
                                                            "OPERATOR_UNSPECIFIED",
                                                            "OPERATOR_EQUALS",
                                                            "OPERATOR_GREATER_THAN",
                                                            "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                            "OPERATOR_LESS_THAN",
                                                            "OPERATOR_LESS_THAN_OR_EQUAL"
                                                          ]
                                                        ],
                                                        "type": "string"
                                                      },
                                                      "value": {
                                                        "description": "value is used by the comparator.",
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "type": "array"
                                                },
                                                "key": {
                                                  "description": "key is the oracle data property key targeted by the filter.",
                                                  "properties": {
                                                    "name": {
                                                      "description": "name is the name of the property.",
                                                      "type": "string"
                                                    },
                                                    "type": {
                                                      "description": "type is the type of the property.",
                                                      "enum": [
                                                        [
                                                          "TYPE_UNSPECIFIED",
                                                          "TYPE_EMPTY",
                                                          "TYPE_INTEGER",
                                                          "TYPE_STRING",
                                                          "TYPE_BOOLEAN",
                                                          "TYPE_DECIMAL",
                                                          "TYPE_TIMESTAMP"
                                                        ]
                                                      ],
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "pub_keys": {
                                            "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "quote_name": {
                                        "description": "Product quote name",
                                        "type": "string"
                                      },
                                      "settlement_asset": {
                                        "description": "Product settlement asset identifier",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              }
                            },
                            "type": "object"
                          },
                          "liquidity_monitoring_parameters": {
                            "description": "Liquidity monitoring parameters",
                            "properties": {
                              "auction_extension": {
                                "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                                "format": "int64",
                                "type": "integer"
                              },
                              "target_stake_parameters": {
                                "description": "Specifies parameters related to target stake calculation",
                                "properties": {
                                  "scaling_factor": {
                                    "description": "Specifies scaling factors used in target stake calculation",
                                    "type": "number"
                                  },
                                  "time_window": {
                                    "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                    "format": "int64",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "triggering_ratio": {
                                "description": "Specifies the triggering ratio for entering liquidity auction",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "metadata": {
                            "description": "Optional new market meta data, tags",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "price_monitoring_parameters": {
                            "description": "Price monitoring parameters",
                            "properties": {
                              "triggers": {
                                "items": {
                                  "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                                  "properties": {
                                    "auction_extension": {
                                      "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "horizon": {
                                      "description": "Price monitoring projection horizon τ in seconds",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "probability": {
                                      "description": "Price monitoring probability level p",
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "risk_parameters": {
                            "oneOf": [
                              {
                                "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                                "properties": {
                                  "factor_long": {
                                    "description": "Pre-defined risk factor value for long",
                                    "type": "number"
                                  },
                                  "factor_short": {
                                    "description": "Pre-defined risk factor value for short",
                                    "type": "number"
                                  },
                                  "max_move_up": {
                                    "description": "Pre-defined maximum price move up that the model considers as valid",
                                    "type": "number"
                                  },
                                  "min_move_down": {
                                    "description": "Pre-defined minimum price move down that the model considers as valid",
                                    "type": "number"
                                  },
                                  "probability_of_trading": {
                                    "description": "Pre-defined constant probability of trading",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                                "properties": {
                                  "params": {
                                    "description": "Risk model parameters for log normal",
                                    "properties": {
                                      "mu": {
                                        "description": "Mu param",
                                        "type": "number"
                                      },
                                      "r": {
                                        "description": "R param",
                                        "type": "number"
                                      },
                                      "sigma": {
                                        "description": "Sigma param",
                                        "type": "number"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "risk_aversion_parameter": {
                                    "description": "Risk Aversion Parameter",
                                    "type": "number"
                                  },
                                  "tau": {
                                    "description": "Tau",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "liquidity_commitment": {
                        "description": "The commitment from the party creating the NewMarket proposal",
                        "properties": {
                          "buys": {
                            "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                            "items": {
                              "description": "Represents a liquidity order",
                              "properties": {
                                "offset": {
                                  "description": "The offset/amount of units away for the order",
                                  "type": "string"
                                },
                                "proportion": {
                                  "description": "The relative proportion of the commitment to be allocated at a price level",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "reference": {
                                  "description": "The pegged reference point for the order",
                                  "enum": [
                                    [
                                      "PEGGED_REFERENCE_UNSPECIFIED",
                                      "PEGGED_REFERENCE_MID",
                                      "PEGGED_REFERENCE_BEST_BID",
                                      "PEGGED_REFERENCE_BEST_ASK"
                                    ]
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "commitment_amount": {
                            "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                            "type": "string"
                          },
                          "fee": {
                            "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                            "type": "string"
                          },
                          "reference": {
                            "description": "A reference to be associated to all orders created from this commitment",
                            "type": "string"
                          },
                          "sells": {
                            "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                            "items": {
                              "description": "Represents a liquidity order",
                              "properties": {
                                "offset": {
                                  "description": "The offset/amount of units away for the order",
                                  "type": "string"
                                },
                                "proportion": {
                                  "description": "The relative proportion of the commitment to be allocated at a price level",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "reference": {
                                  "description": "The pegged reference point for the order",
                                  "enum": [
                                    [
                                      "PEGGED_REFERENCE_UNSPECIFIED",
                                      "PEGGED_REFERENCE_MID",
                                      "PEGGED_REFERENCE_BEST_BID",
                                      "PEGGED_REFERENCE_BEST_ASK"
                                    ]
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "description": "Proposal change for updating Vega network parameters",
                    "properties": {
                      "changes": {
                        "description": "The network parameter to update",
                        "properties": {
                          "key": {
                            "description": "The unique key",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value for the network parameter",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "description": "Proposal change for creating new assets on Vega",
                    "properties": {
                      "changes": {
                        "description": "The configuration of the new asset",
                        "properties": {
                          "decimals": {
                            "description": "Number of decimal / precision handled by this asset",
                            "format": "int64",
                            "type": "integer"
                          },
                          "name": {
                            "description": "Name of the asset (e.g: Great British Pound)",
                            "type": "string"
                          },
                          "quantum": {
                            "description": "The minimum economically meaningful amount in the asset",
                            "type": "string"
                          },
                          "source": {
                            "oneOf": [
                              {
                                "description": "A built-in asset",
                                "properties": {
                                  "max_faucet_amount_mint": {
                                    "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "description": "An Ethereum ERC20 asset",
                                "properties": {
                                  "contract_address": {
                                    "description": "The address of the contract for the token, on the ethereum network",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          },
                          "symbol": {
                            "description": "Symbol of the asset (e.g: GBP)",
                            "type": "string"
                          },
                          "total_supply": {
                            "description": "Total circulating supply for the asset",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "description": "Proposal change for a freeform voting thing",
                    "properties": {
                      "changes": {
                        "description": "The configuration of the new freeform",
                        "properties": {
                          "description": {
                            "description": "A short description of what is being proposed",
                            "type": "string"
                          },
                          "hash": {
                            "description": "The hash on the content of the URL",
                            "type": "string"
                          },
                          "url": {
                            "description": "The URL containing content that describes the proposal",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                ]
              },
              "closing_timestamp": {
                "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
                "format": "int64",
                "type": "integer"
              },
              "enactment_timestamp": {
                "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
                "format": "int64",
                "type": "integer"
              },
              "validation_timestamp": {
                "description": "Validation timestamp (Unix time in seconds)",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "timestamp": {
            "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.ProposalError": {
        "description": "A list of possible errors that can cause a proposal to be in state rejected or failed",
        "enum": [
          [
            "PROPOSAL_ERROR_UNSPECIFIED",
            "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
            "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
            "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
            "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
            "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
            "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
            "PROPOSAL_ERROR_NO_PRODUCT",
            "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
            "PROPOSAL_ERROR_NO_TRADING_MODE",
            "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
            "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
            "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
            "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
            "PROPOSAL_ERROR_INVALID_ASSET",
            "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
            "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
            "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
            "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
            "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
            "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
            "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
            "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
            "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
            "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
            "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
            "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
            "PROPOSAL_ERROR_INVALID_SHAPE",
            "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
            "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
            "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
            "PROPOSAL_ERROR_INVALID_ASSET_DETAILS"
          ]
        ],
        "type": "string"
      },
      "vega.ProposalTerms": {
        "description": "Terms for a governance proposal on Vega",
        "properties": {
          "change": {
            "oneOf": [
              {
                "description": "Proposal change for modifying an existing market on Vega",
                "type": "object"
              },
              {
                "description": "Proposal change for creating new market on Vega",
                "properties": {
                  "changes": {
                    "description": "The configuration of the new market",
                    "properties": {
                      "decimal_places": {
                        "description": "Decimal places used for the new market",
                        "format": "int64",
                        "type": "integer"
                      },
                      "instrument": {
                        "description": "New market instrument configuration",
                        "properties": {
                          "code": {
                            "description": "Instrument code",
                            "type": "string"
                          },
                          "name": {
                            "description": "Instrument name",
                            "type": "string"
                          },
                          "product": {
                            "oneOf": [
                              {
                                "description": "Future",
                                "properties": {
                                  "oracle_spec_binding": {
                                    "description": "The binding between the oracle spec and the settlement price",
                                    "properties": {
                                      "settlement_price_property": {
                                        "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                                        "type": "string"
                                      },
                                      "trading_termination_property": {
                                        "description": "the name of the property in the oracle data that signals termination of trading",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "oracle_spec_for_settlement_price": {
                                    "description": "The oracle spec describing the oracle data of settlement price",
                                    "properties": {
                                      "filters": {
                                        "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                        "items": {
                                          "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                          "properties": {
                                            "conditions": {
                                              "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                              "items": {
                                                "description": "Condition describes the condition that must be validated by the",
                                                "properties": {
                                                  "operator": {
                                                    "description": "comparator is the type of comparison to make on the value.",
                                                    "enum": [
                                                      [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ]
                                                    ],
                                                    "type": "string"
                                                  },
                                                  "value": {
                                                    "description": "value is used by the comparator.",
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "key": {
                                              "description": "key is the oracle data property key targeted by the filter.",
                                              "properties": {
                                                "name": {
                                                  "description": "name is the name of the property.",
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "description": "type is the type of the property.",
                                                  "enum": [
                                                    [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ]
                                                  ],
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "pub_keys": {
                                        "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "oracle_spec_for_trading_termination": {
                                    "description": "The oracle spec describing the oracle data of trading termination",
                                    "properties": {
                                      "filters": {
                                        "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                                        "items": {
                                          "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                                          "properties": {
                                            "conditions": {
                                              "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                              "items": {
                                                "description": "Condition describes the condition that must be validated by the",
                                                "properties": {
                                                  "operator": {
                                                    "description": "comparator is the type of comparison to make on the value.",
                                                    "enum": [
                                                      [
                                                        "OPERATOR_UNSPECIFIED",
                                                        "OPERATOR_EQUALS",
                                                        "OPERATOR_GREATER_THAN",
                                                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                                                        "OPERATOR_LESS_THAN",
                                                        "OPERATOR_LESS_THAN_OR_EQUAL"
                                                      ]
                                                    ],
                                                    "type": "string"
                                                  },
                                                  "value": {
                                                    "description": "value is used by the comparator.",
                                                    "type": "string"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "key": {
                                              "description": "key is the oracle data property key targeted by the filter.",
                                              "properties": {
                                                "name": {
                                                  "description": "name is the name of the property.",
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "description": "type is the type of the property.",
                                                  "enum": [
                                                    [
                                                      "TYPE_UNSPECIFIED",
                                                      "TYPE_EMPTY",
                                                      "TYPE_INTEGER",
                                                      "TYPE_STRING",
                                                      "TYPE_BOOLEAN",
                                                      "TYPE_DECIMAL",
                                                      "TYPE_TIMESTAMP"
                                                    ]
                                                  ],
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "pub_keys": {
                                        "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "quote_name": {
                                    "description": "Product quote name",
                                    "type": "string"
                                  },
                                  "settlement_asset": {
                                    "description": "Product settlement asset identifier",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "liquidity_monitoring_parameters": {
                        "description": "Liquidity monitoring parameters",
                        "properties": {
                          "auction_extension": {
                            "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction",
                            "format": "int64",
                            "type": "integer"
                          },
                          "target_stake_parameters": {
                            "description": "Specifies parameters related to target stake calculation",
                            "properties": {
                              "scaling_factor": {
                                "description": "Specifies scaling factors used in target stake calculation",
                                "type": "number"
                              },
                              "time_window": {
                                "description": "Specifies length of time window expressed in seconds for target stake calculation",
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "triggering_ratio": {
                            "description": "Specifies the triggering ratio for entering liquidity auction",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "metadata": {
                        "description": "Optional new market meta data, tags",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "price_monitoring_parameters": {
                        "description": "Price monitoring parameters",
                        "properties": {
                          "triggers": {
                            "items": {
                              "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration",
                              "properties": {
                                "auction_extension": {
                                  "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "horizon": {
                                  "description": "Price monitoring projection horizon τ in seconds",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "probability": {
                                  "description": "Price monitoring probability level p",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "risk_parameters": {
                        "oneOf": [
                          {
                            "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected",
                            "properties": {
                              "factor_long": {
                                "description": "Pre-defined risk factor value for long",
                                "type": "number"
                              },
                              "factor_short": {
                                "description": "Pre-defined risk factor value for short",
                                "type": "number"
                              },
                              "max_move_up": {
                                "description": "Pre-defined maximum price move up that the model considers as valid",
                                "type": "number"
                              },
                              "min_move_down": {
                                "description": "Pre-defined minimum price move down that the model considers as valid",
                                "type": "number"
                              },
                              "probability_of_trading": {
                                "description": "Pre-defined constant probability of trading",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected",
                            "properties": {
                              "params": {
                                "description": "Risk model parameters for log normal",
                                "properties": {
                                  "mu": {
                                    "description": "Mu param",
                                    "type": "number"
                                  },
                                  "r": {
                                    "description": "R param",
                                    "type": "number"
                                  },
                                  "sigma": {
                                    "description": "Sigma param",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "risk_aversion_parameter": {
                                "description": "Risk Aversion Parameter",
                                "type": "number"
                              },
                              "tau": {
                                "description": "Tau",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "liquidity_commitment": {
                    "description": "The commitment from the party creating the NewMarket proposal",
                    "properties": {
                      "buys": {
                        "description": "A set of liquidity buy orders to meet the liquidity provision obligation",
                        "items": {
                          "description": "Represents a liquidity order",
                          "properties": {
                            "offset": {
                              "description": "The offset/amount of units away for the order",
                              "type": "string"
                            },
                            "proportion": {
                              "description": "The relative proportion of the commitment to be allocated at a price level",
                              "format": "int32",
                              "type": "integer"
                            },
                            "reference": {
                              "description": "The pegged reference point for the order",
                              "enum": [
                                [
                                  "PEGGED_REFERENCE_UNSPECIFIED",
                                  "PEGGED_REFERENCE_MID",
                                  "PEGGED_REFERENCE_BEST_BID",
                                  "PEGGED_REFERENCE_BEST_ASK"
                                ]
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "commitment_amount": {
                        "description": "Specified as a unitless number that represents the amount of settlement asset of the market",
                        "type": "string"
                      },
                      "fee": {
                        "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers",
                        "type": "string"
                      },
                      "reference": {
                        "description": "A reference to be associated to all orders created from this commitment",
                        "type": "string"
                      },
                      "sells": {
                        "description": "A set of liquidity sell orders to meet the liquidity provision obligation",
                        "items": {
                          "description": "Represents a liquidity order",
                          "properties": {
                            "offset": {
                              "description": "The offset/amount of units away for the order",
                              "type": "string"
                            },
                            "proportion": {
                              "description": "The relative proportion of the commitment to be allocated at a price level",
                              "format": "int32",
                              "type": "integer"
                            },
                            "reference": {
                              "description": "The pegged reference point for the order",
                              "enum": [
                                [
                                  "PEGGED_REFERENCE_UNSPECIFIED",
                                  "PEGGED_REFERENCE_MID",
                                  "PEGGED_REFERENCE_BEST_BID",
                                  "PEGGED_REFERENCE_BEST_ASK"
                                ]
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              {
                "description": "Proposal change for updating Vega network parameters",
                "properties": {
                  "changes": {
                    "description": "The network parameter to update",
                    "properties": {
                      "key": {
                        "description": "The unique key",
                        "type": "string"
                      },
                      "value": {
                        "description": "The value for the network parameter",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              {
                "description": "Proposal change for creating new assets on Vega",
                "properties": {
                  "changes": {
                    "description": "The configuration of the new asset",
                    "properties": {
                      "decimals": {
                        "description": "Number of decimal / precision handled by this asset",
                        "format": "int64",
                        "type": "integer"
                      },
                      "name": {
                        "description": "Name of the asset (e.g: Great British Pound)",
                        "type": "string"
                      },
                      "quantum": {
                        "description": "The minimum economically meaningful amount in the asset",
                        "type": "string"
                      },
                      "source": {
                        "oneOf": [
                          {
                            "description": "A built-in asset",
                            "properties": {
                              "max_faucet_amount_mint": {
                                "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "An Ethereum ERC20 asset",
                            "properties": {
                              "contract_address": {
                                "description": "The address of the contract for the token, on the ethereum network",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "symbol": {
                        "description": "Symbol of the asset (e.g: GBP)",
                        "type": "string"
                      },
                      "total_supply": {
                        "description": "Total circulating supply for the asset",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              {
                "description": "Proposal change for a freeform voting thing",
                "properties": {
                  "changes": {
                    "description": "The configuration of the new freeform",
                    "properties": {
                      "description": {
                        "description": "A short description of what is being proposed",
                        "type": "string"
                      },
                      "hash": {
                        "description": "The hash on the content of the URL",
                        "type": "string"
                      },
                      "url": {
                        "description": "The URL containing content that describes the proposal",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          },
          "closing_timestamp": {
            "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters",
            "format": "int64",
            "type": "integer"
          },
          "enactment_timestamp": {
            "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters",
            "format": "int64",
            "type": "integer"
          },
          "validation_timestamp": {
            "description": "Validation timestamp (Unix time in seconds)",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.RemoveValidator": {
        "description": "A message to notify when a validator is being removed from the Vega network",
        "properties": {
          "id": {
            "description": "The identifier of the validator",
            "properties": {
              "identifier": {
                "oneOf": [
                  {
                    "description": "Ethereum network",
                    "properties": {
                      "address": {
                        "description": "An Ethereum address",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  {
                    "description": "Bitcoin network",
                    "properties": {
                      "address": {
                        "description": "A Bitcoin address",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "vega.Reward": {
        "description": "Details for a single reward payment",
        "properties": {
          "amount": {
            "type": "string"
          },
          "asset_id": {
            "type": "string"
          },
          "epoch": {
            "format": "int64",
            "type": "integer"
          },
          "party_id": {
            "type": "string"
          },
          "percentage_of_total": {
            "type": "string"
          },
          "received_at": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.RewardSummary": {
        "description": "Details for rewards for a single asset",
        "properties": {
          "amount": {
            "description": "Total amount of rewards for the asset",
            "type": "string"
          },
          "asset_id": {
            "type": "string"
          },
          "party_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.RiskFactor": {
        "description": "Risk factors are used to calculate the current risk associated with orders trading on a given market",
        "properties": {
          "long": {
            "description": "Long Risk factor value",
            "type": "string"
          },
          "market": {
            "description": "Market ID that relates to this risk factor",
            "type": "string"
          },
          "short": {
            "description": "Short Risk factor value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.ScalarValue": {
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.ScalingFactors": {
        "description": "Scaling Factors (for use in margin calculation)",
        "properties": {
          "collateral_release": {
            "description": "Collateral release level",
            "type": "number"
          },
          "initial_margin": {
            "description": "Initial margin level",
            "type": "number"
          },
          "search_level": {
            "description": "Search level",
            "type": "number"
          }
        },
        "type": "object"
      },
      "vega.Side": {
        "description": "A side relates to the direction of an order, to Buy, or Sell",
        "enum": [
          [
            "SIDE_UNSPECIFIED",
            "SIDE_BUY",
            "SIDE_SELL"
          ]
        ],
        "type": "string"
      },
      "vega.SimpleModelParams": {
        "description": "Risk model parameters for simple modelling",
        "properties": {
          "factor_long": {
            "description": "Pre-defined risk factor value for long",
            "type": "number"
          },
          "factor_short": {
            "description": "Pre-defined risk factor value for short",
            "type": "number"
          },
          "max_move_up": {
            "description": "Pre-defined maximum price move up that the model considers as valid",
            "type": "number"
          },
          "min_move_down": {
            "description": "Pre-defined minimum price move down that the model considers as valid",
            "type": "number"
          },
          "probability_of_trading": {
            "description": "Pre-defined constant probability of trading",
            "type": "number"
          }
        },
        "type": "object"
      },
      "vega.SimpleRiskModel": {
        "description": "Risk model for simple modelling",
        "properties": {
          "params": {
            "description": "Risk model params for simple modelling",
            "properties": {
              "factor_long": {
                "description": "Pre-defined risk factor value for long",
                "type": "number"
              },
              "factor_short": {
                "description": "Pre-defined risk factor value for short",
                "type": "number"
              },
              "max_move_up": {
                "description": "Pre-defined maximum price move up that the model considers as valid",
                "type": "number"
              },
              "min_move_down": {
                "description": "Pre-defined minimum price move down that the model considers as valid",
                "type": "number"
              },
              "probability_of_trading": {
                "description": "Pre-defined constant probability of trading",
                "type": "number"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "vega.StakeDeposited": {
        "properties": {
          "amount": {
            "description": "The amount deposited (base 10)",
            "type": "string"
          },
          "block_time": {
            "description": "The time at which the block was produced will be used to inform the core at what time the stake started to be available.",
            "format": "int64",
            "type": "integer"
          },
          "ethereum_address": {
            "description": "Ethereum Address of the user depositing stake (hex encode with 0x prefix)",
            "type": "string"
          },
          "vega_public_key": {
            "description": "The public of the party receiving the stake deposit (hex encode)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.StakeRemoved": {
        "properties": {
          "amount": {
            "description": "The amount removed (base 10)",
            "type": "string"
          },
          "block_time": {
            "description": "The time at which the block was produced will be used to inform the core at what time the stake was made unavailable.",
            "format": "int64",
            "type": "integer"
          },
          "ethereum_address": {
            "description": "Ethereum address of the user removing stake (hex encode with 0x prefix)",
            "type": "string"
          },
          "vega_public_key": {
            "description": "The public key of the party from which to remove stake (hex encode)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.StakeTotalSupply": {
        "properties": {
          "token_address": {
            "description": "The address of the staking asset",
            "type": "string"
          },
          "total_supply": {
            "description": "The total supply observed for the token",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.StakingEvent": {
        "properties": {
          "action": {
            "oneOf": [
              {
                "properties": {
                  "amount": {
                    "description": "The amount deposited (base 10)",
                    "type": "string"
                  },
                  "block_time": {
                    "description": "The time at which the block was produced will be used to inform the core at what time the stake started to be available.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "ethereum_address": {
                    "description": "Ethereum Address of the user depositing stake (hex encode with 0x prefix)",
                    "type": "string"
                  },
                  "vega_public_key": {
                    "description": "The public of the party receiving the stake deposit (hex encode)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "properties": {
                  "amount": {
                    "description": "The amount removed (base 10)",
                    "type": "string"
                  },
                  "block_time": {
                    "description": "The time at which the block was produced will be used to inform the core at what time the stake was made unavailable.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "ethereum_address": {
                    "description": "Ethereum address of the user removing stake (hex encode with 0x prefix)",
                    "type": "string"
                  },
                  "vega_public_key": {
                    "description": "The public key of the party from which to remove stake (hex encode)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "properties": {
                  "token_address": {
                    "description": "The address of the staking asset",
                    "type": "string"
                  },
                  "total_supply": {
                    "description": "The total supply observed for the token",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          },
          "block": {
            "description": "The block in which the transaction was added",
            "format": "int64",
            "type": "integer"
          },
          "index": {
            "description": "Index of the log in the transaction",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.StateValueProposal": {
        "properties": {
          "event_id": {
            "description": "event identifier",
            "type": "string"
          },
          "kvb": {
            "description": "key value tolerance triplets",
            "items": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "tolerance": {
                  "type": "string"
                },
                "value": {
                  "properties": {
                    "value": {
                      "oneOf": [
                        {
                          "properties": {
                            "value": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "properties": {
                            "value": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "properties": {
                            "value": {
                              "items": {
                                "properties": {
                                  "value": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "state_var_id": {
            "description": "state variable identifier",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.StateVarValue": {
        "properties": {
          "value": {
            "oneOf": [
              {
                "properties": {
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "properties": {
                  "value": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              {
                "properties": {
                  "value": {
                    "items": {
                      "properties": {
                        "value": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object"
      },
      "vega.TargetStakeParameters": {
        "description": "TargetStakeParameters contains parameters used in target stake calculation",
        "properties": {
          "scaling_factor": {
            "description": "Specifies scaling factors used in target stake calculation",
            "type": "number"
          },
          "time_window": {
            "description": "Specifies length of time window expressed in seconds for target stake calculation",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.Timestamp": {
        "description": "A timestamp in nanoseconds since epoch See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
        "properties": {
          "value": {
            "description": "Timestamp value",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.TradableInstrument": {
        "description": "Tradable Instrument definition",
        "properties": {
          "instrument": {
            "description": "Instrument details",
            "properties": {
              "code": {
                "description": "Code for the instrument",
                "type": "string"
              },
              "id": {
                "description": "Instrument identifier",
                "type": "string"
              },
              "metadata": {
                "description": "A collection of instrument meta-data",
                "properties": {
                  "tags": {
                    "description": "A list of 0 or more tags",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "name": {
                "description": "Name of the instrument",
                "type": "string"
              },
              "product": {
                "oneOf": [
                  {
                    "description": "Future",
                    "properties": {
                      "oracle_spec_binding": {
                        "description": "The binding between the oracle spec and the oracle data",
                        "properties": {
                          "settlement_price_property": {
                            "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price.",
                            "type": "string"
                          },
                          "trading_termination_property": {
                            "description": "the name of the property in the oracle data that signals termination of trading",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "oracle_spec_for_settlement_price": {
                        "description": "The oracle spec describing the settlement price oracle filter",
                        "properties": {
                          "created_at": {
                            "description": "Creation Date time",
                            "format": "int64",
                            "type": "integer"
                          },
                          "filters": {
                            "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                            "items": {
                              "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                              "properties": {
                                "conditions": {
                                  "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                  "items": {
                                    "description": "Condition describes the condition that must be validated by the",
                                    "properties": {
                                      "operator": {
                                        "description": "comparator is the type of comparison to make on the value.",
                                        "enum": [
                                          [
                                            "OPERATOR_UNSPECIFIED",
                                            "OPERATOR_EQUALS",
                                            "OPERATOR_GREATER_THAN",
                                            "OPERATOR_GREATER_THAN_OR_EQUAL",
                                            "OPERATOR_LESS_THAN",
                                            "OPERATOR_LESS_THAN_OR_EQUAL"
                                          ]
                                        ],
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "value is used by the comparator.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "key": {
                                  "description": "key is the oracle data property key targeted by the filter.",
                                  "properties": {
                                    "name": {
                                      "description": "name is the name of the property.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "type is the type of the property.",
                                      "enum": [
                                        [
                                          "TYPE_UNSPECIFIED",
                                          "TYPE_EMPTY",
                                          "TYPE_INTEGER",
                                          "TYPE_STRING",
                                          "TYPE_BOOLEAN",
                                          "TYPE_DECIMAL",
                                          "TYPE_TIMESTAMP"
                                        ]
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "id": {
                            "description": "id is a hash generated from the OracleSpec data.",
                            "type": "string"
                          },
                          "pub_keys": {
                            "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "status": {
                            "description": "status describes the status of the oracle spec",
                            "enum": [
                              [
                                "STATUS_UNSPECIFIED",
                                "STATUS_ACTIVE",
                                "STATUS_DEACTIVATED"
                              ]
                            ],
                            "type": "string"
                          },
                          "updated_at": {
                            "description": "Last Updated timestamp",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "oracle_spec_for_trading_termination": {
                        "description": "the oracle spec describing the trading termination oracle filter",
                        "properties": {
                          "created_at": {
                            "description": "Creation Date time",
                            "format": "int64",
                            "type": "integer"
                          },
                          "filters": {
                            "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model).",
                            "items": {
                              "description": "Filter describes the conditions under which an oracle data is considered of interest or not.",
                              "properties": {
                                "conditions": {
                                  "description": "conditions are the conditions that should be matched by the data to be considered of interest.",
                                  "items": {
                                    "description": "Condition describes the condition that must be validated by the",
                                    "properties": {
                                      "operator": {
                                        "description": "comparator is the type of comparison to make on the value.",
                                        "enum": [
                                          [
                                            "OPERATOR_UNSPECIFIED",
                                            "OPERATOR_EQUALS",
                                            "OPERATOR_GREATER_THAN",
                                            "OPERATOR_GREATER_THAN_OR_EQUAL",
                                            "OPERATOR_LESS_THAN",
                                            "OPERATOR_LESS_THAN_OR_EQUAL"
                                          ]
                                        ],
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "value is used by the comparator.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "key": {
                                  "description": "key is the oracle data property key targeted by the filter.",
                                  "properties": {
                                    "name": {
                                      "description": "name is the name of the property.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "type is the type of the property.",
                                      "enum": [
                                        [
                                          "TYPE_UNSPECIFIED",
                                          "TYPE_EMPTY",
                                          "TYPE_INTEGER",
                                          "TYPE_STRING",
                                          "TYPE_BOOLEAN",
                                          "TYPE_DECIMAL",
                                          "TYPE_TIMESTAMP"
                                        ]
                                      ],
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "id": {
                            "description": "id is a hash generated from the OracleSpec data.",
                            "type": "string"
                          },
                          "pub_keys": {
                            "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "status": {
                            "description": "status describes the status of the oracle spec",
                            "enum": [
                              [
                                "STATUS_UNSPECIFIED",
                                "STATUS_ACTIVE",
                                "STATUS_DEACTIVATED"
                              ]
                            ],
                            "type": "string"
                          },
                          "updated_at": {
                            "description": "Last Updated timestamp",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "quote_name": {
                        "description": "Quote name of the instrument",
                        "type": "string"
                      },
                      "settlement_asset": {
                        "description": "The asset for the future",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            },
            "type": "object"
          },
          "margin_calculator": {
            "description": "Margin calculator for the instrument",
            "properties": {
              "scaling_factors": {
                "description": "Scaling factors for margin calculation",
                "properties": {
                  "collateral_release": {
                    "description": "Collateral release level",
                    "type": "number"
                  },
                  "initial_margin": {
                    "description": "Initial margin level",
                    "type": "number"
                  },
                  "search_level": {
                    "description": "Search level",
                    "type": "number"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "risk_model": {
            "oneOf": [
              {
                "description": "Log normal",
                "properties": {
                  "params": {
                    "description": "Risk model parameters for log normal",
                    "properties": {
                      "mu": {
                        "description": "Mu param",
                        "type": "number"
                      },
                      "r": {
                        "description": "R param",
                        "type": "number"
                      },
                      "sigma": {
                        "description": "Sigma param",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "risk_aversion_parameter": {
                    "description": "Risk Aversion Parameter",
                    "type": "number"
                  },
                  "tau": {
                    "description": "Tau",
                    "type": "number"
                  }
                },
                "type": "object"
              },
              {
                "description": "Simple",
                "properties": {
                  "params": {
                    "description": "Risk model params for simple modelling",
                    "properties": {
                      "factor_long": {
                        "description": "Pre-defined risk factor value for long",
                        "type": "number"
                      },
                      "factor_short": {
                        "description": "Pre-defined risk factor value for short",
                        "type": "number"
                      },
                      "max_move_up": {
                        "description": "Pre-defined maximum price move up that the model considers as valid",
                        "type": "number"
                      },
                      "min_move_down": {
                        "description": "Pre-defined minimum price move down that the model considers as valid",
                        "type": "number"
                      },
                      "probability_of_trading": {
                        "description": "Pre-defined constant probability of trading",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object"
      },
      "vega.Trade": {
        "description": "A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega",
        "properties": {
          "aggressor": {
            "description": "Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
            "enum": [
              [
                "SIDE_UNSPECIFIED",
                "SIDE_BUY",
                "SIDE_SELL"
              ]
            ],
            "type": "string"
          },
          "buy_order": {
            "description": "Identifier of the order from the buy side",
            "type": "string"
          },
          "buyer": {
            "description": "Unique party identifier for the buyer",
            "type": "string"
          },
          "buyer_auction_batch": {
            "description": "Auction batch number that the buy side order was placed in",
            "format": "int64",
            "type": "integer"
          },
          "buyer_fee": {
            "description": "Fee amount charged to the buyer party for the trade",
            "properties": {
              "infrastructure_fee": {
                "description": "Fee amount paid for maintaining the Vega infrastructure",
                "type": "string"
              },
              "liquidity_fee": {
                "description": "Fee amount paid to market makers",
                "type": "string"
              },
              "maker_fee": {
                "description": "Fee amount paid to the non-aggressive party of the trade",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "Unique identifier for the trade (generated by Vega)",
            "type": "string"
          },
          "market_id": {
            "description": "Market identifier (the market that the trade occurred on)",
            "type": "string"
          },
          "price": {
            "description": "Price for the trade, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
            "type": "string"
          },
          "sell_order": {
            "description": "Identifier of the order from the sell side",
            "type": "string"
          },
          "seller": {
            "description": "Unique party identifier for the seller",
            "type": "string"
          },
          "seller_auction_batch": {
            "description": "Auction batch number that the sell side order was placed in",
            "format": "int64",
            "type": "integer"
          },
          "seller_fee": {
            "description": "Fee amount charged to the seller party for the trade",
            "properties": {
              "infrastructure_fee": {
                "description": "Fee amount paid for maintaining the Vega infrastructure",
                "type": "string"
              },
              "liquidity_fee": {
                "description": "Fee amount paid to market makers",
                "type": "string"
              },
              "maker_fee": {
                "description": "Fee amount paid to the non-aggressive party of the trade",
                "type": "string"
              }
            },
            "type": "object"
          },
          "size": {
            "description": "Size filled for the trade",
            "format": "int64",
            "type": "integer"
          },
          "timestamp": {
            "description": "Timestamp for when the trade occurred, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "description": "Type for the trade - See [`Trade.Type`](#vega.Trade.Type)",
            "enum": [
              [
                "TYPE_UNSPECIFIED",
                "TYPE_DEFAULT",
                "TYPE_NETWORK_CLOSE_OUT_GOOD",
                "TYPE_NETWORK_CLOSE_OUT_BAD"
              ]
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.TradeSet": {
        "properties": {
          "trades": {
            "description": "A set of one or more trades",
            "items": {
              "description": "A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega",
              "properties": {
                "aggressor": {
                  "description": "Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)",
                  "enum": [
                    [
                      "SIDE_UNSPECIFIED",
                      "SIDE_BUY",
                      "SIDE_SELL"
                    ]
                  ],
                  "type": "string"
                },
                "buy_order": {
                  "description": "Identifier of the order from the buy side",
                  "type": "string"
                },
                "buyer": {
                  "description": "Unique party identifier for the buyer",
                  "type": "string"
                },
                "buyer_auction_batch": {
                  "description": "Auction batch number that the buy side order was placed in",
                  "format": "int64",
                  "type": "integer"
                },
                "buyer_fee": {
                  "description": "Fee amount charged to the buyer party for the trade",
                  "properties": {
                    "infrastructure_fee": {
                      "description": "Fee amount paid for maintaining the Vega infrastructure",
                      "type": "string"
                    },
                    "liquidity_fee": {
                      "description": "Fee amount paid to market makers",
                      "type": "string"
                    },
                    "maker_fee": {
                      "description": "Fee amount paid to the non-aggressive party of the trade",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique identifier for the trade (generated by Vega)",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier (the market that the trade occurred on)",
                  "type": "string"
                },
                "price": {
                  "description": "Price for the trade, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places",
                  "type": "string"
                },
                "sell_order": {
                  "description": "Identifier of the order from the sell side",
                  "type": "string"
                },
                "seller": {
                  "description": "Unique party identifier for the seller",
                  "type": "string"
                },
                "seller_auction_batch": {
                  "description": "Auction batch number that the sell side order was placed in",
                  "format": "int64",
                  "type": "integer"
                },
                "seller_fee": {
                  "description": "Fee amount charged to the seller party for the trade",
                  "properties": {
                    "infrastructure_fee": {
                      "description": "Fee amount paid for maintaining the Vega infrastructure",
                      "type": "string"
                    },
                    "liquidity_fee": {
                      "description": "Fee amount paid to market makers",
                      "type": "string"
                    },
                    "maker_fee": {
                      "description": "Fee amount paid to the non-aggressive party of the trade",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "size": {
                  "description": "Size filled for the trade",
                  "format": "int64",
                  "type": "integer"
                },
                "timestamp": {
                  "description": "Timestamp for when the trade occurred, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "type": {
                  "description": "Type for the trade - See [`Trade.Type`](#vega.Trade.Type)",
                  "enum": [
                    [
                      "TYPE_UNSPECIFIED",
                      "TYPE_DEFAULT",
                      "TYPE_NETWORK_CLOSE_OUT_GOOD",
                      "TYPE_NETWORK_CLOSE_OUT_BAD"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "vega.Transfer": {
        "description": "Represents a financial transfer within Vega",
        "properties": {
          "amount": {
            "description": "A financial amount (of an asset) to transfer",
            "properties": {
              "amount": {
                "description": "A signed integer amount of asset",
                "type": "string"
              },
              "asset": {
                "description": "Asset identifier",
                "type": "string"
              }
            },
            "type": "object"
          },
          "min_amount": {
            "description": "A minimum amount",
            "type": "string"
          },
          "owner": {
            "description": "Party identifier for the owner of the transfer",
            "type": "string"
          },
          "type": {
            "description": "The type of transfer, gives the reason for the transfer",
            "enum": [
              [
                "TRANSFER_TYPE_UNSPECIFIED",
                "TRANSFER_TYPE_LOSS",
                "TRANSFER_TYPE_WIN",
                "TRANSFER_TYPE_CLOSE",
                "TRANSFER_TYPE_MTM_LOSS",
                "TRANSFER_TYPE_MTM_WIN",
                "TRANSFER_TYPE_MARGIN_LOW",
                "TRANSFER_TYPE_MARGIN_HIGH",
                "TRANSFER_TYPE_MARGIN_CONFISCATED",
                "TRANSFER_TYPE_MAKER_FEE_PAY",
                "TRANSFER_TYPE_MAKER_FEE_RECEIVE",
                "TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY",
                "TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE",
                "TRANSFER_TYPE_LIQUIDITY_FEE_PAY",
                "TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE",
                "TRANSFER_TYPE_BOND_LOW",
                "TRANSFER_TYPE_BOND_HIGH",
                "TRANSFER_TYPE_WITHDRAW_LOCK",
                "TRANSFER_TYPE_WITHDRAW",
                "TRANSFER_TYPE_DEPOSIT",
                "TRANSFER_TYPE_BOND_SLASHING",
                "TRANSFER_TYPE_STAKE_REWARD",
                "TRANSFER_TYPE_TRANSFER_FUNDS_SEND",
                "TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE"
              ]
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.TransferBalance": {
        "description": "Represents the balance for an account during a transfer",
        "properties": {
          "account": {
            "description": "The account relating to the transfer",
            "properties": {
              "asset": {
                "description": "Asset identifier for the account",
                "type": "string"
              },
              "balance": {
                "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places and importantly balances cannot be negative",
                "type": "string"
              },
              "id": {
                "description": "Unique account identifier (used internally by Vega)",
                "type": "string"
              },
              "market_id": {
                "description": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty",
                "type": "string"
              },
              "owner": {
                "description": "The party that the account belongs to, special values include `network`, which represents the Vega network and is most commonly seen during liquidation of distressed trading positions",
                "type": "string"
              },
              "type": {
                "description": "The account type related to this account",
                "enum": [
                  [
                    "ACCOUNT_TYPE_UNSPECIFIED",
                    "ACCOUNT_TYPE_INSURANCE",
                    "ACCOUNT_TYPE_SETTLEMENT",
                    "ACCOUNT_TYPE_MARGIN",
                    "ACCOUNT_TYPE_GENERAL",
                    "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                    "ACCOUNT_TYPE_FEES_LIQUIDITY",
                    "ACCOUNT_TYPE_FEES_MAKER",
                    "ACCOUNT_TYPE_LOCK_WITHDRAW",
                    "ACCOUNT_TYPE_BOND",
                    "ACCOUNT_TYPE_EXTERNAL",
                    "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                    "ACCOUNT_TYPE_GLOBAL_REWARD",
                    "ACCOUNT_TYPE_PENDING_TRANSFERS",
                    "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                    "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                    "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                    "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                  ]
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "balance": {
            "description": "The balance relating to the transfer",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.TransferRequest": {
        "description": "Represents a request to transfer from one set of accounts to another",
        "properties": {
          "amount": {
            "description": "An amount to transfer for the asset",
            "type": "string"
          },
          "asset": {
            "description": "Asset identifier",
            "type": "string"
          },
          "from_account": {
            "description": "One or more accounts to transfer from",
            "items": {
              "description": "Represents an account for an asset on Vega for a particular owner or party",
              "properties": {
                "asset": {
                  "description": "Asset identifier for the account",
                  "type": "string"
                },
                "balance": {
                  "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places and importantly balances cannot be negative",
                  "type": "string"
                },
                "id": {
                  "description": "Unique account identifier (used internally by Vega)",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty",
                  "type": "string"
                },
                "owner": {
                  "description": "The party that the account belongs to, special values include `network`, which represents the Vega network and is most commonly seen during liquidation of distressed trading positions",
                  "type": "string"
                },
                "type": {
                  "description": "The account type related to this account",
                  "enum": [
                    [
                      "ACCOUNT_TYPE_UNSPECIFIED",
                      "ACCOUNT_TYPE_INSURANCE",
                      "ACCOUNT_TYPE_SETTLEMENT",
                      "ACCOUNT_TYPE_MARGIN",
                      "ACCOUNT_TYPE_GENERAL",
                      "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                      "ACCOUNT_TYPE_FEES_LIQUIDITY",
                      "ACCOUNT_TYPE_FEES_MAKER",
                      "ACCOUNT_TYPE_LOCK_WITHDRAW",
                      "ACCOUNT_TYPE_BOND",
                      "ACCOUNT_TYPE_EXTERNAL",
                      "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                      "ACCOUNT_TYPE_GLOBAL_REWARD",
                      "ACCOUNT_TYPE_PENDING_TRANSFERS",
                      "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                      "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "min_amount": {
            "description": "A minimum amount",
            "type": "string"
          },
          "reference": {
            "description": "A reference for auditing purposes",
            "type": "string"
          },
          "to_account": {
            "description": "One or more accounts to transfer to",
            "items": {
              "description": "Represents an account for an asset on Vega for a particular owner or party",
              "properties": {
                "asset": {
                  "description": "Asset identifier for the account",
                  "type": "string"
                },
                "balance": {
                  "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places and importantly balances cannot be negative",
                  "type": "string"
                },
                "id": {
                  "description": "Unique account identifier (used internally by Vega)",
                  "type": "string"
                },
                "market_id": {
                  "description": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty",
                  "type": "string"
                },
                "owner": {
                  "description": "The party that the account belongs to, special values include `network`, which represents the Vega network and is most commonly seen during liquidation of distressed trading positions",
                  "type": "string"
                },
                "type": {
                  "description": "The account type related to this account",
                  "enum": [
                    [
                      "ACCOUNT_TYPE_UNSPECIFIED",
                      "ACCOUNT_TYPE_INSURANCE",
                      "ACCOUNT_TYPE_SETTLEMENT",
                      "ACCOUNT_TYPE_MARGIN",
                      "ACCOUNT_TYPE_GENERAL",
                      "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                      "ACCOUNT_TYPE_FEES_LIQUIDITY",
                      "ACCOUNT_TYPE_FEES_MAKER",
                      "ACCOUNT_TYPE_LOCK_WITHDRAW",
                      "ACCOUNT_TYPE_BOND",
                      "ACCOUNT_TYPE_EXTERNAL",
                      "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                      "ACCOUNT_TYPE_GLOBAL_REWARD",
                      "ACCOUNT_TYPE_PENDING_TRANSFERS",
                      "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                      "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                      "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                    ]
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "vega.TransferResponse": {
        "description": "Represents the response from a transfer",
        "properties": {
          "balances": {
            "description": "One or more account balances",
            "items": {
              "description": "Represents the balance for an account during a transfer",
              "properties": {
                "account": {
                  "description": "The account relating to the transfer",
                  "properties": {
                    "asset": {
                      "description": "Asset identifier for the account",
                      "type": "string"
                    },
                    "balance": {
                      "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places and importantly balances cannot be negative",
                      "type": "string"
                    },
                    "id": {
                      "description": "Unique account identifier (used internally by Vega)",
                      "type": "string"
                    },
                    "market_id": {
                      "description": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty",
                      "type": "string"
                    },
                    "owner": {
                      "description": "The party that the account belongs to, special values include `network`, which represents the Vega network and is most commonly seen during liquidation of distressed trading positions",
                      "type": "string"
                    },
                    "type": {
                      "description": "The account type related to this account",
                      "enum": [
                        [
                          "ACCOUNT_TYPE_UNSPECIFIED",
                          "ACCOUNT_TYPE_INSURANCE",
                          "ACCOUNT_TYPE_SETTLEMENT",
                          "ACCOUNT_TYPE_MARGIN",
                          "ACCOUNT_TYPE_GENERAL",
                          "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                          "ACCOUNT_TYPE_FEES_LIQUIDITY",
                          "ACCOUNT_TYPE_FEES_MAKER",
                          "ACCOUNT_TYPE_LOCK_WITHDRAW",
                          "ACCOUNT_TYPE_BOND",
                          "ACCOUNT_TYPE_EXTERNAL",
                          "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                          "ACCOUNT_TYPE_GLOBAL_REWARD",
                          "ACCOUNT_TYPE_PENDING_TRANSFERS",
                          "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                          "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                          "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                          "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
                        ]
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "balance": {
                  "description": "The balance relating to the transfer",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "transfers": {
            "description": "One or more ledger entries representing the transfers",
            "items": {
              "description": "Represents a ledger entry on Vega",
              "properties": {
                "amount": {
                  "description": "An amount to transfer",
                  "type": "string"
                },
                "from_account": {
                  "description": "One or more accounts to transfer from",
                  "type": "string"
                },
                "reference": {
                  "description": "A reference for auditing purposes",
                  "type": "string"
                },
                "timestamp": {
                  "description": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`",
                  "format": "int64",
                  "type": "integer"
                },
                "to_account": {
                  "description": "One or more accounts to transfer to",
                  "type": "string"
                },
                "type": {
                  "description": "Type of ledger entry",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "vega.TransferType": {
        "description": "Transfers can occur between parties on Vega, these are the types that indicate why a transfer took place",
        "enum": [
          [
            "TRANSFER_TYPE_UNSPECIFIED",
            "TRANSFER_TYPE_LOSS",
            "TRANSFER_TYPE_WIN",
            "TRANSFER_TYPE_CLOSE",
            "TRANSFER_TYPE_MTM_LOSS",
            "TRANSFER_TYPE_MTM_WIN",
            "TRANSFER_TYPE_MARGIN_LOW",
            "TRANSFER_TYPE_MARGIN_HIGH",
            "TRANSFER_TYPE_MARGIN_CONFISCATED",
            "TRANSFER_TYPE_MAKER_FEE_PAY",
            "TRANSFER_TYPE_MAKER_FEE_RECEIVE",
            "TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY",
            "TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE",
            "TRANSFER_TYPE_LIQUIDITY_FEE_PAY",
            "TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE",
            "TRANSFER_TYPE_BOND_LOW",
            "TRANSFER_TYPE_BOND_HIGH",
            "TRANSFER_TYPE_WITHDRAW_LOCK",
            "TRANSFER_TYPE_WITHDRAW",
            "TRANSFER_TYPE_DEPOSIT",
            "TRANSFER_TYPE_BOND_SLASHING",
            "TRANSFER_TYPE_STAKE_REWARD",
            "TRANSFER_TYPE_TRANSFER_FUNDS_SEND",
            "TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE"
          ]
        ],
        "type": "string"
      },
      "vega.Uint64Value": {
        "properties": {
          "value": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "vega.UpdateMarket": {
        "description": "Update an existing market on Vega",
        "type": "object"
      },
      "vega.UpdateNetworkParameter": {
        "description": "Update network configuration on Vega",
        "properties": {
          "changes": {
            "description": "The network parameter to update",
            "properties": {
              "key": {
                "description": "The unique key",
                "type": "string"
              },
              "value": {
                "description": "The value for the network parameter",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "vega.ValidatorEvent": {
        "description": "An event related to validator management with foreign networks",
        "properties": {
          "action": {
            "oneOf": [
              {
                "description": "Add a new validator",
                "properties": {
                  "id": {
                    "description": "The identifier of the validator",
                    "properties": {
                      "identifier": {
                        "oneOf": [
                          {
                            "description": "Ethereum network",
                            "properties": {
                              "address": {
                                "description": "An Ethereum address",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Bitcoin network",
                            "properties": {
                              "address": {
                                "description": "A Bitcoin address",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              {
                "description": "Remove an existing validator",
                "properties": {
                  "id": {
                    "description": "The identifier of the validator",
                    "properties": {
                      "identifier": {
                        "oneOf": [
                          {
                            "description": "Ethereum network",
                            "properties": {
                              "address": {
                                "description": "An Ethereum address",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Bitcoin network",
                            "properties": {
                              "address": {
                                "description": "A Bitcoin address",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          },
          "source_id": {
            "description": "The source identifier of the event",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.VectorValue": {
        "properties": {
          "value": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "vega.Vote": {
        "description": "Governance vote",
        "properties": {
          "party_id": {
            "description": "Voter's party identifier",
            "type": "string"
          },
          "proposal_id": {
            "description": "Identifier of the proposal being voted on",
            "type": "string"
          },
          "timestamp": {
            "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network",
            "format": "int64",
            "type": "integer"
          },
          "total_governance_token_balance": {
            "description": "Total number of governance token for the party that casted the vote",
            "type": "string"
          },
          "total_governance_token_weight": {
            "description": "The weight of this vote based on the total of governance token",
            "type": "string"
          },
          "value": {
            "description": "Actual vote",
            "enum": [
              [
                "VALUE_UNSPECIFIED",
                "VALUE_NO",
                "VALUE_YES"
              ]
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "vega.WithdrawExt": {
        "description": "Withdrawal external details",
        "properties": {
          "ext": {
            "oneOf": [
              {
                "description": "ERC20 withdrawal details",
                "properties": {
                  "receiver_address": {
                    "description": "The address into which the bridge will release the funds",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object"
      },
      "vega.Withdrawal": {
        "description": "A withdrawal from the Vega network",
        "properties": {
          "amount": {
            "description": "The amount to be withdrawn",
            "type": "string"
          },
          "asset": {
            "description": "The asset we want to withdraw funds from",
            "type": "string"
          },
          "created_timestamp": {
            "description": "Timestamp for when the network started to process this withdrawal",
            "format": "int64",
            "type": "integer"
          },
          "expiry": {
            "description": "The time until when the withdrawal is valid",
            "format": "int64",
            "type": "integer"
          },
          "ext": {
            "description": "Foreign chain specifics",
            "properties": {
              "ext": {
                "oneOf": [
                  {
                    "description": "ERC20 withdrawal details",
                    "properties": {
                      "receiver_address": {
                        "description": "The address into which the bridge will release the funds",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            },
            "type": "object"
          },
          "id": {
            "description": "Unique identifier for the withdrawal",
            "type": "string"
          },
          "party_id": {
            "description": "Unique party identifier of the user initiating the withdrawal",
            "type": "string"
          },
          "ref": {
            "description": "The reference which is used by the foreign chain to refer to this withdrawal",
            "type": "string"
          },
          "status": {
            "description": "The status of the withdrawal",
            "enum": [
              [
                "STATUS_UNSPECIFIED",
                "STATUS_OPEN",
                "STATUS_REJECTED",
                "STATUS_FINALIZED"
              ]
            ],
            "type": "string"
          },
          "tx_hash": {
            "description": "The hash of the foreign chain for this transaction",
            "type": "string"
          },
          "withdrawn_timestamp": {
            "description": "Timestamp for when the withdrawal was finalised by the network",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  }
}