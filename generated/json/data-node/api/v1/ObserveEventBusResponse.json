{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/ObserveEventBusResponse",
    "definitions": {
        "ObserveEventBusResponse": {
            "properties": {
                "events": {
                    "items": {
                        "$ref": "#/definitions/vega.events.v1.BusEvent"
                    },
                    "type": "array",
                    "description": "One or more events"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Observe Event Bus Response",
            "description": "Response to a subscribed stream of events from the Vega event bus"
        },
        "oracles.v1.Condition": {
            "properties": {
                "operator": {
                    "enum": [
                        "OPERATOR_UNSPECIFIED",
                        0,
                        "OPERATOR_EQUALS",
                        1,
                        "OPERATOR_GREATER_THAN",
                        2,
                        "OPERATOR_GREATER_THAN_OR_EQUAL",
                        3,
                        "OPERATOR_LESS_THAN",
                        4,
                        "OPERATOR_LESS_THAN_OR_EQUAL",
                        5
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Operator",
                    "description": "Comparator describes the type of comparison."
                },
                "value": {
                    "type": "string",
                    "description": "value is used by the comparator."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Condition",
            "description": "Condition describes the condition that must be validated by the"
        },
        "oracles.v1.Filter": {
            "properties": {
                "key": {
                    "$ref": "#/definitions/oracles.v1.PropertyKey",
                    "additionalProperties": true,
                    "description": "key is the oracle data property key targeted by the filter."
                },
                "conditions": {
                    "items": {
                        "$ref": "#/definitions/oracles.v1.Condition"
                    },
                    "type": "array",
                    "description": "conditions are the conditions that should be matched by the data to be considered of interest."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Filter",
            "description": "Filter describes the conditions under which an oracle data is considered of interest or not."
        },
        "oracles.v1.OracleData": {
            "properties": {
                "pub_keys": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys."
                },
                "data": {
                    "items": {
                        "$ref": "#/definitions/oracles.v1.Property"
                    },
                    "type": "array",
                    "description": "data holds all the properties of the oracle data"
                },
                "matched_spec_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "matched_specs_ids lists all the oracle specs that matched this oracle data. When the array is empty, it means no oracle spec matched this oracle data."
                },
                "broadcast_at": {
                    "type": "string",
                    "description": "broadcast_at is the time at which the data was broadcast to the markets with a matching oracle spec. It has no value when the oracle date did not match any oracle spec. The value is a Unix timestamp in nanoseconds."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Oracle Data",
            "description": "OracleData describes valid oracle data that has been received by the node. It represents both matched and unmatched oracle data."
        },
        "oracles.v1.OracleSpec": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "id is a hash generated from the OracleSpec data."
                },
                "created_at": {
                    "type": "string",
                    "description": "Creation Date time"
                },
                "updated_at": {
                    "type": "string",
                    "description": "Last Updated timestamp"
                },
                "pub_keys": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys."
                },
                "filters": {
                    "items": {
                        "$ref": "#/definitions/oracles.v1.Filter"
                    },
                    "type": "array",
                    "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model)."
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        0,
                        "STATUS_ACTIVE",
                        1,
                        "STATUS_DEACTIVATED",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Status",
                    "description": "Status describe the status of the oracle spec"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Oracle Spec",
            "description": "An oracle spec describe the oracle data that a product (or a risk model) wants to get from the oracle engine. This message contains additional information used by the API."
        },
        "oracles.v1.OracleSpecConfiguration": {
            "properties": {
                "pub_keys": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "pubKeys is the list of authorized public keys that signed the data for this oracle. All the public keys in the oracle data should be contained in these public keys."
                },
                "filters": {
                    "items": {
                        "$ref": "#/definitions/oracles.v1.Filter"
                    },
                    "type": "array",
                    "description": "filters describes which oracle data are considered of interest or not for the product (or the risk model)."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Oracle Spec Configuration",
            "description": "An oracle spec describe the oracle data that a product (or a risk model) wants to get from the oracle engine."
        },
        "oracles.v1.Property": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name is the name of the property."
                },
                "value": {
                    "type": "string",
                    "description": "value is the value of the property."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Property",
            "description": "Property describes one property of an oracle spec with a key with its value."
        },
        "oracles.v1.PropertyKey": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name is the name of the property."
                },
                "type": {
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        0,
                        "TYPE_EMPTY",
                        1,
                        "TYPE_INTEGER",
                        2,
                        "TYPE_STRING",
                        3,
                        "TYPE_BOOLEAN",
                        4,
                        "TYPE_DECIMAL",
                        5,
                        "TYPE_TIMESTAMP",
                        6
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Type",
                    "description": "Type describes the type of properties that are supported by the oracle engine."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Property Key",
            "description": "PropertyKey describes the property key contained in an oracle data."
        },
        "vega.Account": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique account identifier (used internally by Vega)"
                },
                "owner": {
                    "type": "string",
                    "description": "The party that the account belongs to, special values include `network`, which represents the Vega network and is most commonly seen during liquidation of distressed trading positions"
                },
                "balance": {
                    "type": "string",
                    "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places and importantly balances cannot be negative"
                },
                "asset": {
                    "type": "string",
                    "description": "Asset identifier for the account"
                },
                "market_id": {
                    "type": "string",
                    "description": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty"
                },
                "type": {
                    "enum": [
                        "ACCOUNT_TYPE_UNSPECIFIED",
                        0,
                        "ACCOUNT_TYPE_INSURANCE",
                        1,
                        "ACCOUNT_TYPE_SETTLEMENT",
                        2,
                        "ACCOUNT_TYPE_MARGIN",
                        3,
                        "ACCOUNT_TYPE_GENERAL",
                        4,
                        "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                        5,
                        "ACCOUNT_TYPE_FEES_LIQUIDITY",
                        6,
                        "ACCOUNT_TYPE_FEES_MAKER",
                        7,
                        "ACCOUNT_TYPE_BOND",
                        9,
                        "ACCOUNT_TYPE_EXTERNAL",
                        10,
                        "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                        11,
                        "ACCOUNT_TYPE_GLOBAL_REWARD",
                        12,
                        "ACCOUNT_TYPE_PENDING_TRANSFERS",
                        13,
                        "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                        14,
                        "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                        15,
                        "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                        16,
                        "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS",
                        17
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Account Type",
                    "description": "Various collateral/account types as used by Vega"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Account",
            "description": "Represents an account for an asset on Vega for a particular owner or party"
        },
        "vega.Asset": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Internal identifier of the asset"
                },
                "details": {
                    "$ref": "#/definitions/vega.AssetDetails",
                    "additionalProperties": true,
                    "description": "The definition of the external source for this asset"
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        0,
                        "STATUS_PROPOSED",
                        1,
                        "STATUS_REJECTED",
                        2,
                        "STATUS_PENDING_LISTING",
                        3,
                        "STATUS_ENABLED",
                        4
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Status"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Asset",
            "description": "The Vega representation of an external asset"
        },
        "vega.AssetDetails": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the asset (e.g: Great British Pound)"
                },
                "symbol": {
                    "type": "string",
                    "description": "Symbol of the asset (e.g: GBP)"
                },
                "total_supply": {
                    "type": "string",
                    "description": "Total circulating supply for the asset"
                },
                "decimals": {
                    "type": "string",
                    "description": "Number of decimal / precision handled by this asset"
                },
                "quantum": {
                    "type": "string",
                    "description": "The minimum economically meaningful amount in the asset"
                },
                "builtin_asset": {
                    "$ref": "#/definitions/vega.BuiltinAsset",
                    "additionalProperties": true,
                    "description": "A built-in asset"
                },
                "erc20": {
                    "$ref": "#/definitions/vega.ERC20",
                    "additionalProperties": true,
                    "description": "An Ethereum ERC20 asset"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Asset Details",
            "description": "The Vega representation of an external asset"
        },
        "vega.AssetDetailsUpdate": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the asset (e.g: Great British Pound)"
                },
                "symbol": {
                    "type": "string",
                    "description": "Symbol of the asset (e.g: GBP)"
                },
                "total_supply": {
                    "type": "string",
                    "description": "Total circulating supply for the asset"
                },
                "decimals": {
                    "type": "string",
                    "description": "Number of decimal / precision handled by this asset"
                },
                "quantum": {
                    "type": "string",
                    "description": "The minimum economically meaningful amount in the asset"
                },
                "erc20": {
                    "$ref": "#/definitions/vega.ERC20Update",
                    "additionalProperties": true,
                    "description": "An Ethereum ERC20 asset"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Asset Details Update",
            "description": "The changes to apply on an existing asset."
        },
        "vega.AuctionDuration": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration of the auction in seconds"
                },
                "volume": {
                    "type": "string",
                    "description": "Target uncrossing trading volume"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Auction Duration",
            "description": "An auction duration is used to configure 3 auction periods: 1. `duration \u003e 0`, `volume == 0`:   The auction will last for at least N seconds 2. `duration == 0`, `volume \u003e 0`:   The auction will end once we can close with given traded volume 3. `duration \u003e 0`, `volume \u003e 0`:   The auction will take at least N seconds, but can end sooner if we can trade a certain volume"
        },
        "vega.BuiltinAsset": {
            "properties": {
                "max_faucet_amount_mint": {
                    "type": "string",
                    "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Builtin Asset",
            "description": "A Vega internal asset"
        },
        "vega.Deposit": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for the deposit"
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        0,
                        "STATUS_OPEN",
                        1,
                        "STATUS_CANCELLED",
                        2,
                        "STATUS_FINALIZED",
                        3
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Status",
                    "description": "The status of the deposit"
                },
                "party_id": {
                    "type": "string",
                    "description": "Party identifier of the user initiating the deposit"
                },
                "asset": {
                    "type": "string",
                    "description": "The Vega asset targeted by this deposit"
                },
                "amount": {
                    "type": "string",
                    "description": "The amount to be deposited"
                },
                "tx_hash": {
                    "type": "string",
                    "description": "The hash of the transaction from the foreign chain"
                },
                "credited_timestamp": {
                    "type": "string",
                    "description": "Timestamp for when the Vega account was updated with the deposit"
                },
                "created_timestamp": {
                    "type": "string",
                    "description": "Timestamp for when the deposit was created on the Vega network"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Deposit",
            "description": "A deposit on to the Vega network"
        },
        "vega.DispatchStrategy": {
            "properties": {
                "asset_for_metric": {
                    "type": "string",
                    "description": "The asset to use for metric"
                },
                "metric": {
                    "enum": [
                        "DISPATCH_METRIC_UNSPECIFIED",
                        0,
                        "DISPATCH_METRIC_TAKER_FEES_PAID",
                        1,
                        "DISPATCH_METRIC_MAKER_FEES_RECEIVED",
                        2,
                        "DISPATCH_METRIC_LP_FEES_RECEIVED",
                        3,
                        "DISPATCH_METRIC_MARKET_VALUE",
                        4
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Dispatch Metric"
                },
                "markets": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Optional markets in scope"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Dispatch Strategy"
        },
        "vega.ERC20": {
            "properties": {
                "contract_address": {
                    "type": "string",
                    "description": "The address of the contract for the token, on the ethereum network"
                },
                "lifetime_limit": {
                    "type": "string",
                    "description": "The lifetime limits deposit per address note: this is a temporary measure for restricted mainnet"
                },
                "withdraw_threshold": {
                    "type": "string",
                    "description": "The maximum allowed per withdraw note: this is a temporary measure for restricted mainnet"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "ERC 20",
            "description": "An ERC20 token based asset, living on the ethereum network"
        },
        "vega.ERC20Update": {
            "properties": {
                "lifetime_limit": {
                    "type": "string",
                    "description": "The lifetime limits deposit per address. This is will be interpreted against the asset decimals. note: this is a temporary measure for restricted mainnet"
                },
                "withdraw_threshold": {
                    "type": "string",
                    "description": "The maximum allowed per withdraw. This is will be interpreted against the asset decimals. note: this is a temporary measure for restricted mainnet"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "ERC 20 Update"
        },
        "vega.Erc20WithdrawExt": {
            "properties": {
                "receiver_address": {
                    "type": "string",
                    "description": "The address into which the bridge will release the funds"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Erc 20 Withdraw Ext",
            "description": "An extension of data required for the withdraw submissions"
        },
        "vega.Fee": {
            "properties": {
                "maker_fee": {
                    "type": "string",
                    "description": "Fee amount paid to the non-aggressive party of the trade"
                },
                "infrastructure_fee": {
                    "type": "string",
                    "description": "Fee amount paid for maintaining the Vega infrastructure"
                },
                "liquidity_fee": {
                    "type": "string",
                    "description": "Fee amount paid to market makers"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Fee",
            "description": "Represents any fees paid by a party, resulting from a trade"
        },
        "vega.FeeFactors": {
            "properties": {
                "maker_fee": {
                    "type": "string",
                    "description": "Maker fee"
                },
                "infrastructure_fee": {
                    "type": "string",
                    "description": "Infrastructure fee"
                },
                "liquidity_fee": {
                    "type": "string",
                    "description": "Liquidity fee"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Fee Factors",
            "description": "Fee factors definition"
        },
        "vega.Fees": {
            "properties": {
                "factors": {
                    "$ref": "#/definitions/vega.FeeFactors",
                    "additionalProperties": true,
                    "description": "Fee factors"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Fees",
            "description": "Fees definition"
        },
        "vega.Future": {
            "properties": {
                "settlement_asset": {
                    "type": "string",
                    "description": "The asset for the future"
                },
                "quote_name": {
                    "type": "string",
                    "description": "Quote name of the instrument"
                },
                "oracle_spec_for_settlement_price": {
                    "$ref": "#/definitions/oracles.v1.OracleSpec",
                    "additionalProperties": true,
                    "description": "The oracle spec describing the settlement price oracle filter"
                },
                "oracle_spec_for_trading_termination": {
                    "$ref": "#/definitions/oracles.v1.OracleSpec",
                    "additionalProperties": true,
                    "description": "the oracle spec describing the trading termination oracle filter"
                },
                "oracle_spec_binding": {
                    "$ref": "#/definitions/vega.OracleSpecToFutureBinding",
                    "additionalProperties": true,
                    "description": "The binding between the oracle spec and the oracle data"
                },
                "settlement_price_decimals": {
                    "type": "integer",
                    "description": "the number of decimal places implied by the settlement price emitted by the settlement oracle"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Future",
            "description": "Future product definition"
        },
        "vega.FutureProduct": {
            "properties": {
                "settlement_asset": {
                    "type": "string",
                    "description": "Product settlement asset identifier"
                },
                "quote_name": {
                    "type": "string",
                    "description": "Product quote name"
                },
                "oracle_spec_for_settlement_price": {
                    "$ref": "#/definitions/oracles.v1.OracleSpecConfiguration",
                    "additionalProperties": true,
                    "description": "The oracle spec describing the oracle data of settlement price"
                },
                "oracle_spec_for_trading_termination": {
                    "$ref": "#/definitions/oracles.v1.OracleSpecConfiguration",
                    "additionalProperties": true,
                    "description": "The oracle spec describing the oracle data of trading termination"
                },
                "oracle_spec_binding": {
                    "$ref": "#/definitions/vega.OracleSpecToFutureBinding",
                    "additionalProperties": true,
                    "description": "The binding between the oracle spec and the settlement price"
                },
                "settlement_price_decimals": {
                    "type": "integer",
                    "description": "the number of decimal places implied by the settlement price emitted by the settlement oracle"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Future Product",
            "description": "Future product configuration"
        },
        "vega.Instrument": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Instrument identifier"
                },
                "code": {
                    "type": "string",
                    "description": "Code for the instrument"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the instrument"
                },
                "metadata": {
                    "$ref": "#/definitions/vega.InstrumentMetadata",
                    "additionalProperties": true,
                    "description": "A collection of instrument meta-data"
                },
                "future": {
                    "$ref": "#/definitions/vega.Future",
                    "additionalProperties": true,
                    "description": "Future"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Instrument",
            "description": "Instrument definition"
        },
        "vega.InstrumentConfiguration": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Instrument name"
                },
                "code": {
                    "type": "string",
                    "description": "Instrument code"
                },
                "future": {
                    "$ref": "#/definitions/vega.FutureProduct",
                    "additionalProperties": true,
                    "description": "Future"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Instrument Configuration",
            "description": "Instrument configuration"
        },
        "vega.InstrumentMetadata": {
            "properties": {
                "tags": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "A list of 0 or more tags"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Instrument Metadata",
            "description": "Instrument metadata definition"
        },
        "vega.LedgerEntry": {
            "properties": {
                "from_account": {
                    "type": "string",
                    "description": "One or more accounts to transfer from"
                },
                "to_account": {
                    "type": "string",
                    "description": "One or more accounts to transfer to"
                },
                "amount": {
                    "type": "string",
                    "description": "An amount to transfer"
                },
                "reference": {
                    "type": "string",
                    "description": "A reference for auditing purposes"
                },
                "type": {
                    "type": "string",
                    "description": "Type of ledger entry"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Ledger Entry",
            "description": "Represents a ledger entry on Vega"
        },
        "vega.LiquidityMonitoringParameters": {
            "properties": {
                "target_stake_parameters": {
                    "$ref": "#/definitions/vega.TargetStakeParameters",
                    "additionalProperties": true,
                    "description": "Specifies parameters related to target stake calculation"
                },
                "triggering_ratio": {
                    "type": "number",
                    "description": "Specifies the triggering ratio for entering liquidity auction"
                },
                "auction_extension": {
                    "type": "string",
                    "description": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Liquidity Monitoring Parameters",
            "description": "LiquidityMonitoringParameters contains settings used for liquidity monitoring"
        },
        "vega.LiquidityOrder": {
            "properties": {
                "reference": {
                    "enum": [
                        "PEGGED_REFERENCE_UNSPECIFIED",
                        0,
                        "PEGGED_REFERENCE_MID",
                        1,
                        "PEGGED_REFERENCE_BEST_BID",
                        2,
                        "PEGGED_REFERENCE_BEST_ASK",
                        3
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Pegged Reference",
                    "description": "A pegged reference defines which price point a pegged order is linked to - meaning the price for a pegged order is calculated from the value of the reference price point"
                },
                "proportion": {
                    "type": "integer",
                    "description": "The relative proportion of the commitment to be allocated at a price level"
                },
                "offset": {
                    "type": "string",
                    "description": "The offset/amount of units away for the order"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Liquidity Order",
            "description": "Represents a liquidity order"
        },
        "vega.LiquidityOrderReference": {
            "properties": {
                "order_id": {
                    "type": "string",
                    "description": "Unique identifier of the pegged order generated by the core to fulfil this liquidity order"
                },
                "liquidity_order": {
                    "$ref": "#/definitions/vega.LiquidityOrder",
                    "additionalProperties": true,
                    "description": "The liquidity order from the original submission"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Liquidity Order Reference",
            "description": "A pair of a liquidity order and the id of the generated order by the core"
        },
        "vega.LiquidityProviderFeeShare": {
            "properties": {
                "party": {
                    "type": "string",
                    "description": "The liquidity provider party id"
                },
                "equity_like_share": {
                    "type": "string",
                    "description": "The share own by this liquidity provider (float)"
                },
                "average_entry_valuation": {
                    "type": "string",
                    "description": "The average entry valuation of the liquidity provider for the market"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Liquidity Provider Fee Share",
            "description": "The equity like share of liquidity fee for each liquidity provider"
        },
        "vega.LiquidityProvision": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "party_id": {
                    "type": "string",
                    "description": "Unique party identifier for the creator of the provision"
                },
                "created_at": {
                    "type": "string",
                    "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
                },
                "updated_at": {
                    "type": "string",
                    "description": "Timestamp for when the order was updated at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
                },
                "market_id": {
                    "type": "string",
                    "description": "Market identifier for the order, required field"
                },
                "commitment_amount": {
                    "type": "string",
                    "description": "Specified as a unitless number that represents the amount of settlement asset of the market"
                },
                "fee": {
                    "type": "string",
                    "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers"
                },
                "sells": {
                    "items": {
                        "$ref": "#/definitions/vega.LiquidityOrderReference"
                    },
                    "type": "array",
                    "description": "A set of liquidity sell orders to meet the liquidity provision obligation"
                },
                "buys": {
                    "items": {
                        "$ref": "#/definitions/vega.LiquidityOrderReference"
                    },
                    "type": "array",
                    "description": "A set of liquidity buy orders to meet the liquidity provision obligation"
                },
                "version": {
                    "type": "string",
                    "description": "Version of this liquidity provision order"
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        0,
                        "STATUS_ACTIVE",
                        1,
                        "STATUS_STOPPED",
                        2,
                        "STATUS_CANCELLED",
                        3,
                        "STATUS_REJECTED",
                        4,
                        "STATUS_UNDEPLOYED",
                        5,
                        "STATUS_PENDING",
                        6
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Status",
                    "description": "Status of a liquidity provision order"
                },
                "reference": {
                    "type": "string",
                    "description": "A reference shared between this liquidity provision and all it's orders"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Liquidity Provision",
            "description": "An Liquidity provider commitment"
        },
        "vega.LogNormalModelParams": {
            "properties": {
                "mu": {
                    "type": "number",
                    "description": "Mu param"
                },
                "r": {
                    "type": "number",
                    "description": "R param"
                },
                "sigma": {
                    "type": "number",
                    "description": "Sigma param"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Log Normal Model Params",
            "description": "Risk model parameters for log normal"
        },
        "vega.LogNormalRiskModel": {
            "properties": {
                "risk_aversion_parameter": {
                    "type": "number",
                    "description": "Risk Aversion Parameter"
                },
                "tau": {
                    "type": "number",
                    "description": "Tau"
                },
                "params": {
                    "$ref": "#/definitions/vega.LogNormalModelParams",
                    "additionalProperties": true,
                    "description": "Risk model parameters for log normal"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Log Normal Risk Model",
            "description": "Risk model for log normal"
        },
        "vega.MarginCalculator": {
            "properties": {
                "scaling_factors": {
                    "$ref": "#/definitions/vega.ScalingFactors",
                    "additionalProperties": true,
                    "description": "Scaling factors for margin calculation"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Margin Calculator",
            "description": "Margin Calculator definition"
        },
        "vega.MarginLevels": {
            "properties": {
                "maintenance_margin": {
                    "type": "string",
                    "description": "Maintenance margin value"
                },
                "search_level": {
                    "type": "string",
                    "description": "Search level value"
                },
                "initial_margin": {
                    "type": "string",
                    "description": "Initial margin value"
                },
                "collateral_release_level": {
                    "type": "string",
                    "description": "Collateral release level value"
                },
                "party_id": {
                    "type": "string",
                    "description": "Party identifier"
                },
                "market_id": {
                    "type": "string",
                    "description": "Market identifier"
                },
                "asset": {
                    "type": "string",
                    "description": "Asset identifier"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Margin Levels",
            "description": "Represents the margin levels for a party on a market at a given time"
        },
        "vega.Market": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "tradable_instrument": {
                    "$ref": "#/definitions/vega.TradableInstrument",
                    "additionalProperties": true,
                    "description": "Tradable instrument configuration"
                },
                "decimal_places": {
                    "type": "string",
                    "description": "Number of decimal places that a price must be shifted by in order to get a correct price denominated in the currency of the market, for example: `realPrice = price / 10^decimalPlaces`"
                },
                "fees": {
                    "$ref": "#/definitions/vega.Fees",
                    "additionalProperties": true,
                    "description": "Fees configuration"
                },
                "opening_auction": {
                    "$ref": "#/definitions/vega.AuctionDuration",
                    "additionalProperties": true,
                    "description": "Auction duration specifies how long the opening auction will run (minimum duration and optionally a minimum traded volume)"
                },
                "price_monitoring_settings": {
                    "$ref": "#/definitions/vega.PriceMonitoringSettings",
                    "additionalProperties": true,
                    "description": "PriceMonitoringSettings for the market"
                },
                "liquidity_monitoring_parameters": {
                    "$ref": "#/definitions/vega.LiquidityMonitoringParameters",
                    "additionalProperties": true,
                    "description": "LiquidityMonitoringParameters for the market"
                },
                "trading_mode": {
                    "enum": [
                        "TRADING_MODE_UNSPECIFIED",
                        0,
                        "TRADING_MODE_CONTINUOUS",
                        1,
                        "TRADING_MODE_BATCH_AUCTION",
                        2,
                        "TRADING_MODE_OPENING_AUCTION",
                        3,
                        "TRADING_MODE_MONITORING_AUCTION",
                        4,
                        "TRADING_MODE_NO_TRADING",
                        5
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Trading Mode",
                    "description": "The trading mode the market is currently running, also referred to as 'market state'"
                },
                "state": {
                    "enum": [
                        "STATE_UNSPECIFIED",
                        0,
                        "STATE_PROPOSED",
                        1,
                        "STATE_REJECTED",
                        2,
                        "STATE_PENDING",
                        3,
                        "STATE_CANCELLED",
                        4,
                        "STATE_ACTIVE",
                        5,
                        "STATE_SUSPENDED",
                        6,
                        "STATE_CLOSED",
                        7,
                        "STATE_TRADING_TERMINATED",
                        8,
                        "STATE_SETTLED",
                        9
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "State",
                    "description": "The current state of the Market"
                },
                "market_timestamps": {
                    "$ref": "#/definitions/vega.MarketTimestamps",
                    "additionalProperties": true,
                    "description": "Timestamps for when the market stay changes"
                },
                "position_decimal_places": {
                    "type": "string",
                    "description": "The number of decimal places for position"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Market",
            "description": "Market definition"
        },
        "vega.MarketData": {
            "properties": {
                "mark_price": {
                    "type": "string",
                    "description": "Mark price, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places"
                },
                "best_bid_price": {
                    "type": "string",
                    "description": "Highest price level on an order book for buy orders, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places"
                },
                "best_bid_volume": {
                    "type": "string",
                    "description": "Aggregated volume being bid at the best bid price"
                },
                "best_offer_price": {
                    "type": "string",
                    "description": "Lowest price level on an order book for offer orders"
                },
                "best_offer_volume": {
                    "type": "string",
                    "description": "Aggregated volume being offered at the best offer price, as an integer, for example `123456` is a correctly  // formatted price of `1.23456` assuming market configured to 5 decimal places"
                },
                "best_static_bid_price": {
                    "type": "string",
                    "description": "Highest price on the order book for buy orders not including pegged orders"
                },
                "best_static_bid_volume": {
                    "type": "string",
                    "description": "Total volume at the best static bid price excluding pegged orders"
                },
                "best_static_offer_price": {
                    "type": "string",
                    "description": "Lowest price on the order book for sell orders not including pegged orders"
                },
                "best_static_offer_volume": {
                    "type": "string",
                    "description": "Total volume at the best static offer price excluding pegged orders"
                },
                "mid_price": {
                    "type": "string",
                    "description": "Arithmetic average of the best bid price and best offer price, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places"
                },
                "static_mid_price": {
                    "type": "string",
                    "description": "Arithmetic average of the best static bid price and best static offer price"
                },
                "market": {
                    "type": "string",
                    "description": "Market identifier for the data"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Timestamp at which this mark price was relevant, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
                },
                "open_interest": {
                    "type": "string",
                    "description": "The sum of the size of all positions greater than 0 on the market"
                },
                "auction_end": {
                    "type": "string",
                    "description": "Time in seconds until the end of the auction (0 if currently not in auction period)"
                },
                "auction_start": {
                    "type": "string",
                    "description": "Time until next auction (used in FBA's) - currently always 0"
                },
                "indicative_price": {
                    "type": "string",
                    "description": "Indicative price (zero if not in auction)"
                },
                "indicative_volume": {
                    "type": "string",
                    "description": "Indicative volume (zero if not in auction)"
                },
                "market_trading_mode": {
                    "enum": [
                        "TRADING_MODE_UNSPECIFIED",
                        0,
                        "TRADING_MODE_CONTINUOUS",
                        1,
                        "TRADING_MODE_BATCH_AUCTION",
                        2,
                        "TRADING_MODE_OPENING_AUCTION",
                        3,
                        "TRADING_MODE_MONITORING_AUCTION",
                        4,
                        "TRADING_MODE_NO_TRADING",
                        5
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Trading Mode",
                    "description": "The trading mode the market is currently running, also referred to as 'market state'"
                },
                "trigger": {
                    "enum": [
                        "AUCTION_TRIGGER_UNSPECIFIED",
                        0,
                        "AUCTION_TRIGGER_BATCH",
                        1,
                        "AUCTION_TRIGGER_OPENING",
                        2,
                        "AUCTION_TRIGGER_PRICE",
                        3,
                        "AUCTION_TRIGGER_LIQUIDITY",
                        4
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Auction Trigger",
                    "description": "Auction triggers indicate what condition triggered an auction (if market is in auction mode)"
                },
                "extension_trigger": {
                    "enum": [
                        "AUCTION_TRIGGER_UNSPECIFIED",
                        0,
                        "AUCTION_TRIGGER_BATCH",
                        1,
                        "AUCTION_TRIGGER_OPENING",
                        2,
                        "AUCTION_TRIGGER_PRICE",
                        3,
                        "AUCTION_TRIGGER_LIQUIDITY",
                        4
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Auction Trigger",
                    "description": "Auction triggers indicate what condition triggered an auction (if market is in auction mode)"
                },
                "target_stake": {
                    "type": "string",
                    "description": "Targeted stake for the given market"
                },
                "supplied_stake": {
                    "type": "string",
                    "description": "Available stake for the given market"
                },
                "price_monitoring_bounds": {
                    "items": {
                        "$ref": "#/definitions/vega.PriceMonitoringBounds"
                    },
                    "type": "array",
                    "description": "One or more price monitoring bounds for the current timestamp"
                },
                "market_value_proxy": {
                    "type": "string",
                    "description": "the market value proxy"
                },
                "liquidity_provider_fee_share": {
                    "items": {
                        "$ref": "#/definitions/vega.LiquidityProviderFeeShare"
                    },
                    "type": "array",
                    "description": "the equity like share of liquidity fee for each liquidity provider"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Market Data",
            "description": "Represents data generated by a market when open"
        },
        "vega.MarketTimestamps": {
            "properties": {
                "proposed": {
                    "type": "string",
                    "description": "Time when the market is first proposed"
                },
                "pending": {
                    "type": "string",
                    "description": "Time when the market has been voted in and is created into an opening auction"
                },
                "open": {
                    "type": "string",
                    "description": "Time when the market has left the opening auction and is ready to accept trades"
                },
                "close": {
                    "type": "string",
                    "description": "Time when the market is closed"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Market Timestamps",
            "description": "Time stamps for important times about creating, enacting etc the market"
        },
        "vega.NetworkLimits": {
            "properties": {
                "can_propose_market": {
                    "type": "boolean",
                    "description": "Are market proposals allowed at this point in time"
                },
                "can_propose_asset": {
                    "type": "boolean",
                    "description": "Are asset proposals allowed at this point in time"
                },
                "bootstrap_finished": {
                    "type": "boolean",
                    "description": "True once block count \u003e bootstrapBlockCount"
                },
                "propose_market_enabled": {
                    "type": "boolean",
                    "description": "Are market proposals enabled on this chain"
                },
                "propose_asset_enabled": {
                    "type": "boolean",
                    "description": "Are asset proposals enabled on this chain"
                },
                "bootstrap_block_count": {
                    "type": "integer",
                    "description": "How many blocks before the chain comes out of bootstrap mode"
                },
                "genesis_loaded": {
                    "type": "boolean",
                    "description": "True once the genesis file is loaded"
                },
                "propose_market_enabled_from": {
                    "type": "string",
                    "description": "The date/timestamp in unix nanoseconds at which market proposals will be enabled (0 indicates not set)"
                },
                "propose_asset_enabled_from": {
                    "type": "string",
                    "description": "The date/timestamp in unix nanoseconds at which asset proposals will be enabled (0 indicates not set)"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Network Limits",
            "description": "Network limits, defined in the genesis file"
        },
        "vega.NetworkParameter": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The unique key"
                },
                "value": {
                    "type": "string",
                    "description": "The value for the network parameter"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Network Parameter",
            "description": "Represents a network parameter on Vega"
        },
        "vega.NewAsset": {
            "properties": {
                "changes": {
                    "$ref": "#/definitions/vega.AssetDetails",
                    "additionalProperties": true,
                    "description": "The configuration of the new asset"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "New Asset",
            "description": "New asset on Vega"
        },
        "vega.NewFreeform": {
            "additionalProperties": true,
            "type": "object",
            "title": "New Freeform",
            "description": "Freeform proposal This message is just used as a placeholder to sort out the nature of the proposal once parsed."
        },
        "vega.NewMarket": {
            "properties": {
                "changes": {
                    "$ref": "#/definitions/vega.NewMarketConfiguration",
                    "additionalProperties": true,
                    "description": "The configuration of the new market"
                },
                "liquidity_commitment": {
                    "$ref": "#/definitions/vega.NewMarketCommitment",
                    "additionalProperties": true,
                    "description": "The commitment from the party creating the NewMarket proposal"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "New Market",
            "description": "New market on Vega"
        },
        "vega.NewMarketCommitment": {
            "properties": {
                "commitment_amount": {
                    "type": "string",
                    "description": "Specified as a unitless number that represents the amount of settlement asset of the market"
                },
                "fee": {
                    "type": "string",
                    "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers"
                },
                "sells": {
                    "items": {
                        "$ref": "#/definitions/vega.LiquidityOrder"
                    },
                    "type": "array",
                    "description": "A set of liquidity sell orders to meet the liquidity provision obligation"
                },
                "buys": {
                    "items": {
                        "$ref": "#/definitions/vega.LiquidityOrder"
                    },
                    "type": "array",
                    "description": "A set of liquidity buy orders to meet the liquidity provision obligation"
                },
                "reference": {
                    "type": "string",
                    "description": "A reference to be associated to all orders created from this commitment"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "New Market Commitment",
            "description": "A commitment of liquidity to be made by the party which proposes a market"
        },
        "vega.NewMarketConfiguration": {
            "properties": {
                "instrument": {
                    "$ref": "#/definitions/vega.InstrumentConfiguration",
                    "additionalProperties": true,
                    "description": "New market instrument configuration"
                },
                "decimal_places": {
                    "type": "string",
                    "description": "Decimal places used for the new market"
                },
                "metadata": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Optional new market meta data, tags"
                },
                "price_monitoring_parameters": {
                    "$ref": "#/definitions/vega.PriceMonitoringParameters",
                    "additionalProperties": true,
                    "description": "Price monitoring parameters"
                },
                "liquidity_monitoring_parameters": {
                    "$ref": "#/definitions/vega.LiquidityMonitoringParameters",
                    "additionalProperties": true,
                    "description": "Liquidity monitoring parameters"
                },
                "simple": {
                    "$ref": "#/definitions/vega.SimpleModelParams",
                    "additionalProperties": true,
                    "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected"
                },
                "log_normal": {
                    "$ref": "#/definitions/vega.LogNormalRiskModel",
                    "additionalProperties": true,
                    "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected"
                },
                "position_decimal_places": {
                    "type": "string",
                    "description": "Decimal places for order sizes"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "New Market Configuration",
            "description": "Configuration for a new market on Vega"
        },
        "vega.OracleSpecToFutureBinding": {
            "properties": {
                "settlement_price_property": {
                    "type": "string",
                    "description": "settlement_price_property holds the name of the property in the oracle data that should be used as settlement price. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement price."
                },
                "trading_termination_property": {
                    "type": "string",
                    "description": "the name of the property in the oracle data that signals termination of trading"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Oracle Spec To Future Binding",
            "description": "OracleSpecToFutureBinding tells on which property oracle data should be used as settlement price and which to use the trading terminated trigger"
        },
        "vega.Order": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for the order (set by the system after consensus)"
                },
                "market_id": {
                    "type": "string",
                    "description": "Market identifier for the order"
                },
                "party_id": {
                    "type": "string",
                    "description": "Party identifier for the order"
                },
                "side": {
                    "enum": [
                        "SIDE_UNSPECIFIED",
                        0,
                        "SIDE_BUY",
                        1,
                        "SIDE_SELL",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Side",
                    "description": "A side relates to the direction of an order, to Buy, or Sell"
                },
                "price": {
                    "type": "string",
                    "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places"
                },
                "size": {
                    "type": "string",
                    "description": "Size for the order, for example, in a futures market the size equals the number of contracts"
                },
                "remaining": {
                    "type": "string",
                    "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED"
                },
                "time_in_force": {
                    "enum": [
                        "TIME_IN_FORCE_UNSPECIFIED",
                        0,
                        "TIME_IN_FORCE_GTC",
                        1,
                        "TIME_IN_FORCE_GTT",
                        2,
                        "TIME_IN_FORCE_IOC",
                        3,
                        "TIME_IN_FORCE_FOK",
                        4,
                        "TIME_IN_FORCE_GFA",
                        5,
                        "TIME_IN_FORCE_GFN",
                        6
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Time In Force",
                    "description": "Time In Force for an order See [What order types are available to trade on Vega?](https://docs.testnet.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail"
                },
                "type": {
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        0,
                        "TYPE_LIMIT",
                        1,
                        "TYPE_MARKET",
                        2,
                        "TYPE_NETWORK",
                        3
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Type",
                    "description": "Type values for an order"
                },
                "created_at": {
                    "type": "string",
                    "description": "Timestamp for when the order was created at, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        0,
                        "STATUS_ACTIVE",
                        1,
                        "STATUS_EXPIRED",
                        2,
                        "STATUS_CANCELLED",
                        3,
                        "STATUS_STOPPED",
                        4,
                        "STATUS_FILLED",
                        5,
                        "STATUS_REJECTED",
                        6,
                        "STATUS_PARTIALLY_FILLED",
                        7,
                        "STATUS_PARKED",
                        8
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Status",
                    "description": "Status values for an order See resulting status in [What order types are available to trade on Vega?](https://docs.testnet.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail."
                },
                "expires_at": {
                    "type": "string",
                    "description": "Timestamp for when the order will expire, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`"
                },
                "reference": {
                    "type": "string",
                    "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission"
                },
                "reason": {
                    "enum": [
                        "ORDER_ERROR_UNSPECIFIED",
                        0,
                        "ORDER_ERROR_INVALID_MARKET_ID",
                        1,
                        "ORDER_ERROR_INVALID_ORDER_ID",
                        2,
                        "ORDER_ERROR_OUT_OF_SEQUENCE",
                        3,
                        "ORDER_ERROR_INVALID_REMAINING_SIZE",
                        4,
                        "ORDER_ERROR_TIME_FAILURE",
                        5,
                        "ORDER_ERROR_REMOVAL_FAILURE",
                        6,
                        "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                        7,
                        "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                        8,
                        "ORDER_ERROR_EDIT_NOT_ALLOWED",
                        9,
                        "ORDER_ERROR_AMEND_FAILURE",
                        10,
                        "ORDER_ERROR_NOT_FOUND",
                        11,
                        "ORDER_ERROR_INVALID_PARTY_ID",
                        12,
                        "ORDER_ERROR_MARKET_CLOSED",
                        13,
                        "ORDER_ERROR_MARGIN_CHECK_FAILED",
                        14,
                        "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                        15,
                        "ORDER_ERROR_INTERNAL_ERROR",
                        16,
                        "ORDER_ERROR_INVALID_SIZE",
                        17,
                        "ORDER_ERROR_INVALID_PERSISTENCE",
                        18,
                        "ORDER_ERROR_INVALID_TYPE",
                        19,
                        "ORDER_ERROR_SELF_TRADING",
                        20,
                        "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                        21,
                        "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                        22,
                        "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                        23,
                        "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                        24,
                        "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                        25,
                        "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                        26,
                        "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                        27,
                        "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                        28,
                        "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                        29,
                        "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                        30,
                        "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                        31,
                        "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                        32,
                        "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                        33,
                        "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                        34,
                        "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                        35,
                        "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                        36,
                        "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                        37,
                        "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                        40,
                        "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                        41,
                        "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                        42,
                        "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                        43,
                        "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                        44,
                        "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                        45,
                        "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                        46,
                        "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS",
                        47
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Order Error",
                    "description": "OrderError codes are returned in the `[Order](#vega.Order).reason` field - If there is an issue with an order during its life-cycle, it will be marked with `status.ORDER_STATUS_REJECTED`"
                },
                "updated_at": {
                    "type": "string",
                    "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
                },
                "version": {
                    "type": "string",
                    "description": "The version for the order, initial value is version 1 and is incremented after each successful amend"
                },
                "batch_id": {
                    "type": "string",
                    "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)"
                },
                "pegged_order": {
                    "$ref": "#/definitions/vega.PeggedOrder",
                    "additionalProperties": true,
                    "description": "Pegged order details, used only if the order represents a pegged order."
                },
                "liquidity_provision_id": {
                    "type": "string",
                    "description": "Is this order created as part of a liquidity provision, will be empty if not."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Order",
            "description": "An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties"
        },
        "vega.Party": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the party, typically represented by a public key"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Party",
            "description": "A party represents an entity who wishes to trade on or query a Vega network"
        },
        "vega.PeggedOrder": {
            "properties": {
                "reference": {
                    "enum": [
                        "PEGGED_REFERENCE_UNSPECIFIED",
                        0,
                        "PEGGED_REFERENCE_MID",
                        1,
                        "PEGGED_REFERENCE_BEST_BID",
                        2,
                        "PEGGED_REFERENCE_BEST_ASK",
                        3
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Pegged Reference",
                    "description": "A pegged reference defines which price point a pegged order is linked to - meaning the price for a pegged order is calculated from the value of the reference price point"
                },
                "offset": {
                    "type": "string",
                    "description": "Offset from the price reference"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Pegged Order",
            "description": "Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET They can be used for any limit order that is valid during continuous trading"
        },
        "vega.PriceMonitoringBounds": {
            "properties": {
                "min_valid_price": {
                    "type": "string",
                    "description": "Minimum price that isn't currently breaching the specified price monitoring trigger"
                },
                "max_valid_price": {
                    "type": "string",
                    "description": "Maximum price that isn't currently breaching the specified price monitoring trigger"
                },
                "trigger": {
                    "$ref": "#/definitions/vega.PriceMonitoringTrigger",
                    "additionalProperties": true,
                    "description": "Price monitoring trigger associated with the bounds"
                },
                "reference_price": {
                    "type": "string",
                    "description": "Reference price used to calculate the valid price range"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Price Monitoring Bounds",
            "description": "Represents a list of valid (at the current timestamp) price ranges per associated trigger"
        },
        "vega.PriceMonitoringParameters": {
            "properties": {
                "triggers": {
                    "items": {
                        "$ref": "#/definitions/vega.PriceMonitoringTrigger"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Price Monitoring Parameters",
            "description": "PriceMonitoringParameters contains a collection of triggers to be used for a given market"
        },
        "vega.PriceMonitoringSettings": {
            "properties": {
                "parameters": {
                    "$ref": "#/definitions/vega.PriceMonitoringParameters",
                    "additionalProperties": true,
                    "description": "Specifies price monitoring parameters to be used for price monitoring purposes"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Price Monitoring Settings",
            "description": "PriceMonitoringSettings contains the settings for price monitoring"
        },
        "vega.PriceMonitoringTrigger": {
            "properties": {
                "horizon": {
                    "type": "string",
                    "description": "Price monitoring projection horizon τ in seconds"
                },
                "probability": {
                    "type": "string",
                    "description": "Price monitoring probability level p"
                },
                "auction_extension": {
                    "type": "string",
                    "description": "Price monitoring auction extension duration in seconds should the price breach it's theoretical level over the specified horizon at the specified probability level"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Price Monitoring Trigger",
            "description": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration"
        },
        "vega.Proposal": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique proposal identifier"
                },
                "reference": {
                    "type": "string",
                    "description": "Proposal reference"
                },
                "party_id": {
                    "type": "string",
                    "description": "Party identifier of the author (the party submitting the proposal)"
                },
                "state": {
                    "enum": [
                        "STATE_UNSPECIFIED",
                        0,
                        "STATE_FAILED",
                        1,
                        "STATE_OPEN",
                        2,
                        "STATE_PASSED",
                        3,
                        "STATE_REJECTED",
                        4,
                        "STATE_DECLINED",
                        5,
                        "STATE_ENACTED",
                        6,
                        "STATE_WAITING_FOR_NODE_VOTE",
                        7
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "State",
                    "description": "Proposal state transition: Open -\u003e   - Passed -\u003e Enacted.   - Passed -\u003e Failed.   - Declined Rejected Proposal can enter Failed state from any other state"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network"
                },
                "terms": {
                    "$ref": "#/definitions/vega.ProposalTerms",
                    "additionalProperties": true,
                    "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted"
                },
                "reason": {
                    "enum": [
                        "PROPOSAL_ERROR_UNSPECIFIED",
                        0,
                        "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
                        1,
                        "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
                        2,
                        "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
                        3,
                        "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
                        4,
                        "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
                        5,
                        "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
                        6,
                        "PROPOSAL_ERROR_NO_PRODUCT",
                        7,
                        "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
                        8,
                        "PROPOSAL_ERROR_NO_TRADING_MODE",
                        11,
                        "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
                        12,
                        "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
                        13,
                        "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
                        14,
                        "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
                        15,
                        "PROPOSAL_ERROR_INVALID_ASSET",
                        16,
                        "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
                        17,
                        "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
                        18,
                        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
                        19,
                        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
                        20,
                        "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
                        21,
                        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
                        22,
                        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
                        23,
                        "PROPOSAL_ERROR_MARKET_MISSING_LIQUIDITY_COMMITMENT",
                        24,
                        "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
                        25,
                        "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
                        26,
                        "PROPOSAL_ERROR_MISSING_COMMITMENT_AMOUNT",
                        27,
                        "PROPOSAL_ERROR_INVALID_FEE_AMOUNT",
                        28,
                        "PROPOSAL_ERROR_INVALID_SHAPE",
                        29,
                        "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
                        30,
                        "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
                        31,
                        "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
                        32,
                        "PROPOSAL_ERROR_INVALID_ASSET_DETAILS",
                        33,
                        "PROPOSAL_ERROR_UNKNOWN_TYPE",
                        34,
                        "PROPOSAL_ERROR_UNKNOWN_RISK_PARAMETER_TYPE",
                        35,
                        "PROPOSAL_ERROR_INVALID_FREEFORM",
                        36,
                        "PROPOSAL_ERROR_INSUFFICIENT_EQUITY_LIKE_SHARE",
                        37,
                        "PROPOSAL_ERROR_INVALID_MARKET",
                        38,
                        "PROPOSAL_ERROR_TOO_MANY_MARKET_DECIMAL_PLACES",
                        39,
                        "PROPOSAL_ERROR_TOO_MANY_PRICE_MONITORING_TRIGGERS",
                        40
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Proposal Error",
                    "description": "A list of possible errors that can cause a proposal to be in state rejected or failed"
                },
                "error_details": {
                    "type": "string",
                    "description": "The detailed error associated to the reason."
                },
                "rationale": {
                    "$ref": "#/definitions/vega.ProposalRationale",
                    "additionalProperties": true,
                    "description": "The rationale behind a proposal."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Proposal",
            "description": "Governance proposal"
        },
        "vega.ProposalRationale": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description to show a short title / something in case the link goes offline. This is to be between 0 and 1024 unicode characters. This is mandatory for all proposal."
                },
                "hash": {
                    "type": "string",
                    "description": "Cryptographically secure hash (SHA3-512) of the text pointed by the `url` property so that viewers can check that the text hasn't been changed over time. Optional except for FreeFrom proposal where it's mandatory. If set, the `url` property must be set."
                },
                "url": {
                    "type": "string",
                    "description": "Link to a text file describing the proposal in depth. Optional except for FreeFrom proposal where it's mandatory. If set, the `url` property must be set."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Proposal Rationale",
            "description": "The rationale behind a proposal."
        },
        "vega.ProposalTerms": {
            "properties": {
                "closing_timestamp": {
                    "type": "string",
                    "description": "Timestamp (Unix time in seconds) when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters"
                },
                "enactment_timestamp": {
                    "type": "string",
                    "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed), constrained by `minEnact` and `maxEnact` network parameters"
                },
                "validation_timestamp": {
                    "type": "string",
                    "description": "Validation timestamp (Unix time in seconds)"
                },
                "update_market": {
                    "$ref": "#/definitions/vega.UpdateMarket",
                    "additionalProperties": true,
                    "description": "Proposal change for modifying an existing market on Vega"
                },
                "new_market": {
                    "$ref": "#/definitions/vega.NewMarket",
                    "additionalProperties": true,
                    "description": "Proposal change for creating new market on Vega"
                },
                "update_network_parameter": {
                    "$ref": "#/definitions/vega.UpdateNetworkParameter",
                    "additionalProperties": true,
                    "description": "Proposal change for updating Vega network parameters"
                },
                "new_asset": {
                    "$ref": "#/definitions/vega.NewAsset",
                    "additionalProperties": true,
                    "description": "Proposal change for creating new assets on Vega"
                },
                "new_freeform": {
                    "$ref": "#/definitions/vega.NewFreeform",
                    "additionalProperties": true,
                    "description": "Proposal change for a freeform voting thing"
                },
                "update_asset": {
                    "$ref": "#/definitions/vega.UpdateAsset",
                    "additionalProperties": true,
                    "description": "Proposal change for updating an asset"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Proposal Terms",
            "description": "Terms for a governance proposal on Vega"
        },
        "vega.RiskFactor": {
            "properties": {
                "market": {
                    "type": "string",
                    "description": "Market ID that relates to this risk factor"
                },
                "short": {
                    "type": "string",
                    "description": "Short Risk factor value"
                },
                "long": {
                    "type": "string",
                    "description": "Long Risk factor value"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Risk Factor",
            "description": "Risk factors are used to calculate the current risk associated with orders trading on a given market"
        },
        "vega.ScalingFactors": {
            "properties": {
                "search_level": {
                    "type": "number",
                    "description": "Search level"
                },
                "initial_margin": {
                    "type": "number",
                    "description": "Initial margin level"
                },
                "collateral_release": {
                    "type": "number",
                    "description": "Collateral release level"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Scaling Factors",
            "description": "Scaling Factors (for use in margin calculation)"
        },
        "vega.SimpleModelParams": {
            "properties": {
                "factor_long": {
                    "type": "number",
                    "description": "Pre-defined risk factor value for long"
                },
                "factor_short": {
                    "type": "number",
                    "description": "Pre-defined risk factor value for short"
                },
                "max_move_up": {
                    "type": "number",
                    "description": "Pre-defined maximum price move up that the model considers as valid"
                },
                "min_move_down": {
                    "type": "number",
                    "description": "Pre-defined minimum price move down that the model considers as valid"
                },
                "probability_of_trading": {
                    "type": "number",
                    "description": "Pre-defined constant probability of trading"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Simple Model Params",
            "description": "Risk model parameters for simple modelling"
        },
        "vega.SimpleRiskModel": {
            "properties": {
                "params": {
                    "$ref": "#/definitions/vega.SimpleModelParams",
                    "additionalProperties": true,
                    "description": "Risk model params for simple modelling"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Simple Risk Model",
            "description": "Risk model for simple modelling"
        },
        "vega.TargetStakeParameters": {
            "properties": {
                "time_window": {
                    "type": "string",
                    "description": "Specifies length of time window expressed in seconds for target stake calculation"
                },
                "scaling_factor": {
                    "type": "number",
                    "description": "Specifies scaling factors used in target stake calculation"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Target Stake Parameters",
            "description": "TargetStakeParameters contains parameters used in target stake calculation"
        },
        "vega.TradableInstrument": {
            "properties": {
                "instrument": {
                    "$ref": "#/definitions/vega.Instrument",
                    "additionalProperties": true,
                    "description": "Instrument details"
                },
                "margin_calculator": {
                    "$ref": "#/definitions/vega.MarginCalculator",
                    "additionalProperties": true,
                    "description": "Margin calculator for the instrument"
                },
                "log_normal_risk_model": {
                    "$ref": "#/definitions/vega.LogNormalRiskModel",
                    "additionalProperties": true,
                    "description": "Log normal"
                },
                "simple_risk_model": {
                    "$ref": "#/definitions/vega.SimpleRiskModel",
                    "additionalProperties": true,
                    "description": "Simple"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Tradable Instrument",
            "description": "Tradable Instrument definition"
        },
        "vega.Trade": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for the trade (generated by Vega)"
                },
                "market_id": {
                    "type": "string",
                    "description": "Market identifier (the market that the trade occurred on)"
                },
                "price": {
                    "type": "string",
                    "description": "Price for the trade, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places"
                },
                "size": {
                    "type": "string",
                    "description": "Size filled for the trade"
                },
                "buyer": {
                    "type": "string",
                    "description": "Unique party identifier for the buyer"
                },
                "seller": {
                    "type": "string",
                    "description": "Unique party identifier for the seller"
                },
                "aggressor": {
                    "enum": [
                        "SIDE_UNSPECIFIED",
                        0,
                        "SIDE_BUY",
                        1,
                        "SIDE_SELL",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Side",
                    "description": "A side relates to the direction of an order, to Buy, or Sell"
                },
                "buy_order": {
                    "type": "string",
                    "description": "Identifier of the order from the buy side"
                },
                "sell_order": {
                    "type": "string",
                    "description": "Identifier of the order from the sell side"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Timestamp for when the trade occurred, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
                },
                "type": {
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        0,
                        "TYPE_DEFAULT",
                        1,
                        "TYPE_NETWORK_CLOSE_OUT_GOOD",
                        2,
                        "TYPE_NETWORK_CLOSE_OUT_BAD",
                        3
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Type",
                    "description": "Type values for a trade"
                },
                "buyer_fee": {
                    "$ref": "#/definitions/vega.Fee",
                    "additionalProperties": true,
                    "description": "Fee amount charged to the buyer party for the trade"
                },
                "seller_fee": {
                    "$ref": "#/definitions/vega.Fee",
                    "additionalProperties": true,
                    "description": "Fee amount charged to the seller party for the trade"
                },
                "buyer_auction_batch": {
                    "type": "string",
                    "description": "Auction batch number that the buy side order was placed in"
                },
                "seller_auction_batch": {
                    "type": "string",
                    "description": "Auction batch number that the sell side order was placed in"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Trade",
            "description": "A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega"
        },
        "vega.TransferBalance": {
            "properties": {
                "account": {
                    "$ref": "#/definitions/vega.Account",
                    "additionalProperties": true,
                    "description": "The account relating to the transfer"
                },
                "balance": {
                    "type": "string",
                    "description": "The balance relating to the transfer"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Transfer Balance",
            "description": "Represents the balance for an account during a transfer"
        },
        "vega.TransferResponse": {
            "properties": {
                "transfers": {
                    "items": {
                        "$ref": "#/definitions/vega.LedgerEntry"
                    },
                    "type": "array",
                    "description": "One or more ledger entries representing the transfers"
                },
                "balances": {
                    "items": {
                        "$ref": "#/definitions/vega.TransferBalance"
                    },
                    "type": "array",
                    "description": "One or more account balances"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Transfer Response",
            "description": "Represents the response from a transfer"
        },
        "vega.UpdateAsset": {
            "properties": {
                "asset_id": {
                    "type": "string",
                    "description": "The asset concerned by the update"
                },
                "changes": {
                    "$ref": "#/definitions/vega.AssetDetailsUpdate",
                    "additionalProperties": true,
                    "description": "The changes to apply on an existing asset"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Update Asset",
            "description": "Update an existing asset on Vega"
        },
        "vega.UpdateFutureProduct": {
            "properties": {
                "quote_name": {
                    "type": "string",
                    "description": "Product quote name"
                },
                "oracle_spec_for_settlement_price": {
                    "$ref": "#/definitions/oracles.v1.OracleSpecConfiguration",
                    "additionalProperties": true,
                    "description": "The oracle spec describing the oracle data of settlement price"
                },
                "oracle_spec_for_trading_termination": {
                    "$ref": "#/definitions/oracles.v1.OracleSpecConfiguration",
                    "additionalProperties": true,
                    "description": "The oracle spec describing the oracle data of trading termination"
                },
                "oracle_spec_binding": {
                    "$ref": "#/definitions/vega.OracleSpecToFutureBinding",
                    "additionalProperties": true,
                    "description": "The binding between the oracle spec and the settlement price"
                },
                "settlement_price_decimals": {
                    "type": "integer",
                    "description": "the number of decimal places implied by the settlement price emitted by the settlement oracle"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Update Future Product",
            "description": "Future product configuration"
        },
        "vega.UpdateInstrumentConfiguration": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Instrument code"
                },
                "future": {
                    "$ref": "#/definitions/vega.UpdateFutureProduct",
                    "additionalProperties": true,
                    "description": "Future"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Update Instrument Configuration",
            "description": "Instrument configuration"
        },
        "vega.UpdateMarket": {
            "properties": {
                "market_id": {
                    "type": "string",
                    "description": "The market to update"
                },
                "changes": {
                    "$ref": "#/definitions/vega.UpdateMarketConfiguration",
                    "additionalProperties": true,
                    "description": "The updated configuration of the market"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Update Market",
            "description": "Update an existing market on Vega"
        },
        "vega.UpdateMarketConfiguration": {
            "properties": {
                "instrument": {
                    "$ref": "#/definitions/vega.UpdateInstrumentConfiguration",
                    "additionalProperties": true,
                    "description": "Updated market instrument configuration"
                },
                "metadata": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Optional market metadata, tags"
                },
                "price_monitoring_parameters": {
                    "$ref": "#/definitions/vega.PriceMonitoringParameters",
                    "additionalProperties": true,
                    "description": "Price monitoring parameters"
                },
                "liquidity_monitoring_parameters": {
                    "$ref": "#/definitions/vega.LiquidityMonitoringParameters",
                    "additionalProperties": true,
                    "description": "Liquidity monitoring parameters"
                },
                "simple": {
                    "$ref": "#/definitions/vega.SimpleModelParams",
                    "additionalProperties": true,
                    "description": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected"
                },
                "log_normal": {
                    "$ref": "#/definitions/vega.LogNormalRiskModel",
                    "additionalProperties": true,
                    "description": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Update Market Configuration",
            "description": "Configuration to update a market on Vega"
        },
        "vega.UpdateNetworkParameter": {
            "properties": {
                "changes": {
                    "$ref": "#/definitions/vega.NetworkParameter",
                    "additionalProperties": true,
                    "description": "The network parameter to update"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Update Network Parameter",
            "description": "Update network configuration on Vega"
        },
        "vega.Vote": {
            "properties": {
                "party_id": {
                    "type": "string",
                    "description": "Voter's party identifier"
                },
                "value": {
                    "enum": [
                        "VALUE_UNSPECIFIED",
                        0,
                        "VALUE_NO",
                        1,
                        "VALUE_YES",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Value",
                    "description": "Vote value"
                },
                "proposal_id": {
                    "type": "string",
                    "description": "Identifier of the proposal being voted on"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network"
                },
                "total_governance_token_balance": {
                    "type": "string",
                    "description": "Total number of governance token for the party that casted the vote"
                },
                "total_governance_token_weight": {
                    "type": "string",
                    "description": "The weight of this vote based on the total of governance token"
                },
                "total_equity_like_share_weight": {
                    "type": "string",
                    "description": "The weight of the vote compared to the total number of equity-like share on the market."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Vote",
            "description": "Governance vote"
        },
        "vega.WithdrawExt": {
            "properties": {
                "erc20": {
                    "$ref": "#/definitions/vega.Erc20WithdrawExt",
                    "additionalProperties": true,
                    "description": "ERC20 withdrawal details"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Withdraw Ext",
            "description": "Withdrawal external details"
        },
        "vega.Withdrawal": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for the withdrawal"
                },
                "party_id": {
                    "type": "string",
                    "description": "Unique party identifier of the user initiating the withdrawal"
                },
                "amount": {
                    "type": "string",
                    "description": "The amount to be withdrawn"
                },
                "asset": {
                    "type": "string",
                    "description": "The asset we want to withdraw funds from"
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        0,
                        "STATUS_OPEN",
                        1,
                        "STATUS_REJECTED",
                        2,
                        "STATUS_FINALIZED",
                        3
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Status",
                    "description": "The status of the withdrawal"
                },
                "ref": {
                    "type": "string",
                    "description": "The reference which is used by the foreign chain to refer to this withdrawal"
                },
                "expiry": {
                    "type": "string",
                    "description": "The time until when the withdrawal is valid"
                },
                "tx_hash": {
                    "type": "string",
                    "description": "The hash of the foreign chain for this transaction"
                },
                "created_timestamp": {
                    "type": "string",
                    "description": "Timestamp for when the network started to process this withdrawal"
                },
                "withdrawn_timestamp": {
                    "type": "string",
                    "description": "Timestamp for when the withdrawal was finalised by the network"
                },
                "ext": {
                    "$ref": "#/definitions/vega.WithdrawExt",
                    "additionalProperties": true,
                    "description": "Foreign chain specifics"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Withdrawal",
            "description": "A withdrawal from the Vega network"
        },
        "vega.commands.v1.AnnounceNode": {
            "properties": {
                "vega_pub_key": {
                    "type": "string",
                    "description": "Vega public key, required field"
                },
                "ethereum_address": {
                    "type": "string",
                    "description": "Ethereum public key, required field"
                },
                "chain_pub_key": {
                    "type": "string",
                    "description": "Public key for the blockchain, required field"
                },
                "info_url": {
                    "type": "string",
                    "description": "URL with more info on the node"
                },
                "country": {
                    "type": "string",
                    "description": "Country code (ISO 3166-1 alpha-2) for the location of the node"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the validator, (public master key)"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the validator"
                },
                "avatar_url": {
                    "type": "string",
                    "description": "AvatarURL of the validator"
                },
                "vega_pub_key_index": {
                    "type": "integer",
                    "description": "Vega public key derivation index"
                },
                "from_epoch": {
                    "type": "string",
                    "description": "The epoch from which the validator is expected to be ready to validate blocks"
                },
                "ethereum_signature": {
                    "$ref": "#/definitions/vega.commands.v1.Signature",
                    "additionalProperties": true,
                    "description": "Signature from the validator made using the ethereum wallet"
                },
                "vega_signature": {
                    "$ref": "#/definitions/vega.commands.v1.Signature",
                    "additionalProperties": true,
                    "description": "Signature from the validator made using the vega wallet"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Announce Node",
            "description": "Used announce a node as a new potential validator"
        },
        "vega.commands.v1.CancelTransfer": {
            "properties": {
                "transfer_id": {
                    "type": "string",
                    "description": "The ID of the transfer to cancel"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Cancel Transfer",
            "description": "A request for cancelling a recurring transfer"
        },
        "vega.commands.v1.DelegateSubmission": {
            "properties": {
                "node_id": {
                    "type": "string",
                    "description": "The ID for the node to delegate to"
                },
                "amount": {
                    "type": "string",
                    "description": "The amount of stake to delegate"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Delegate Submission",
            "description": "A command to submit an instruction to delegate some stake to a node"
        },
        "vega.commands.v1.LiquidityProvisionAmendment": {
            "properties": {
                "market_id": {
                    "type": "string",
                    "description": "Unique ID for the market with the liquidity provision to be amended"
                },
                "commitment_amount": {
                    "type": "string",
                    "description": "From here at least one of the following is required to consider the command valid  an empty strings means no change"
                },
                "fee": {
                    "type": "string",
                    "description": "an empty strings means no change"
                },
                "sells": {
                    "items": {
                        "$ref": "#/definitions/vega.LiquidityOrder"
                    },
                    "type": "array",
                    "description": "empty slice means no change"
                },
                "buys": {
                    "items": {
                        "$ref": "#/definitions/vega.LiquidityOrder"
                    },
                    "type": "array",
                    "description": "empty slice means no change"
                },
                "reference": {
                    "type": "string",
                    "description": "empty string means no change"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Liquidity Provision Amendment",
            "description": "Amend a liquidity provision request"
        },
        "vega.commands.v1.LiquidityProvisionCancellation": {
            "properties": {
                "market_id": {
                    "type": "string",
                    "description": "Unique ID for the market with the liquidity provision to be cancelled"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Liquidity Provision Cancellation",
            "description": "Cancel a liquidity provision request"
        },
        "vega.commands.v1.LiquidityProvisionSubmission": {
            "properties": {
                "market_id": {
                    "type": "string",
                    "description": "Market identifier for the order, required field"
                },
                "commitment_amount": {
                    "type": "string",
                    "description": "Specified as a unitless number that represents the amount of settlement asset of the market"
                },
                "fee": {
                    "type": "string",
                    "description": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per setting fees and rewarding liquidity providers"
                },
                "sells": {
                    "items": {
                        "$ref": "#/definitions/vega.LiquidityOrder"
                    },
                    "type": "array",
                    "description": "A set of liquidity sell orders to meet the liquidity provision obligation"
                },
                "buys": {
                    "items": {
                        "$ref": "#/definitions/vega.LiquidityOrder"
                    },
                    "type": "array",
                    "description": "A set of liquidity buy orders to meet the liquidity provision obligation"
                },
                "reference": {
                    "type": "string",
                    "description": "A reference to be added to every order created out of this liquidityProvisionSubmission"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Liquidity Provision Submission",
            "description": "A liquidity provision submitted for a given market"
        },
        "vega.commands.v1.NodeSignature": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the resource being signed"
                },
                "sig": {
                    "type": "string",
                    "description": "The signature",
                    "format": "binary",
                    "binaryEncoding": "base64"
                },
                "kind": {
                    "enum": [
                        "NODE_SIGNATURE_KIND_UNSPECIFIED",
                        0,
                        "NODE_SIGNATURE_KIND_ASSET_NEW",
                        1,
                        "NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL",
                        2,
                        "NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_ADDED",
                        3,
                        "NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_REMOVED",
                        4,
                        "NODE_SIGNATURE_KIND_ASSET_UPDATE",
                        5
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Node Signature Kind",
                    "description": "The kind of the signature created by a node, for example, allow-listing a new asset, withdrawal etc"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Node Signature",
            "description": "Represents a signature from a validator, to be used by a foreign chain in order to recognise a decision taken by the Vega network"
        },
        "vega.commands.v1.OneOffTransfer": {
            "properties": {
                "deliver_on": {
                    "type": "string",
                    "description": "A unix timestamp in second. Time at which the transfer should be delivered in the to account"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "One Off Transfer",
            "description": "Specific details for a one off transfer"
        },
        "vega.commands.v1.OracleDataSubmission": {
            "properties": {
                "source": {
                    "enum": [
                        "ORACLE_SOURCE_UNSPECIFIED",
                        0,
                        "ORACLE_SOURCE_OPEN_ORACLE",
                        1,
                        "ORACLE_SOURCE_JSON",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Oracle Source",
                    "description": "The supported Oracle sources"
                },
                "payload": {
                    "type": "string",
                    "description": "The data provided by the third party provider",
                    "format": "binary",
                    "binaryEncoding": "base64"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Oracle Data Submission",
            "description": "Command to submit new Oracle data from third party providers"
        },
        "vega.commands.v1.OrderAmendment": {
            "properties": {
                "order_id": {
                    "type": "string",
                    "description": "Order identifier, this is required to find the order and will not be updated, required field"
                },
                "market_id": {
                    "type": "string",
                    "description": "Market identifier, this is required to find the order and will not be updated"
                },
                "price": {
                    "type": "string",
                    "title": "All fields below can be altered by this command:",
                    "description": "All fields below can be altered by this command:  Amend the price for the order, if the Price value is set, otherwise price will remain unchanged - See [`Price`](#vega.Price)"
                },
                "size_delta": {
                    "type": "string",
                    "description": "Amend the size for the order by the delta specified: - To reduce the size from the current value set a negative integer value - To increase the size from the current value, set a positive integer value - To leave the size unchanged set a value of zero"
                },
                "expires_at": {
                    "type": "string",
                    "description": "Amend the expiry time for the order, if the Timestamp value is set, otherwise expiry time will remain unchanged - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
                },
                "time_in_force": {
                    "enum": [
                        "TIME_IN_FORCE_UNSPECIFIED",
                        0,
                        "TIME_IN_FORCE_GTC",
                        1,
                        "TIME_IN_FORCE_GTT",
                        2,
                        "TIME_IN_FORCE_IOC",
                        3,
                        "TIME_IN_FORCE_FOK",
                        4,
                        "TIME_IN_FORCE_GFA",
                        5,
                        "TIME_IN_FORCE_GFN",
                        6
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Time In Force",
                    "description": "Time In Force for an order See [What order types are available to trade on Vega?](https://docs.testnet.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail"
                },
                "pegged_offset": {
                    "type": "string",
                    "description": "Amend the pegged order offset for the order"
                },
                "pegged_reference": {
                    "enum": [
                        "PEGGED_REFERENCE_UNSPECIFIED",
                        0,
                        "PEGGED_REFERENCE_MID",
                        1,
                        "PEGGED_REFERENCE_BEST_BID",
                        2,
                        "PEGGED_REFERENCE_BEST_ASK",
                        3
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Pegged Reference",
                    "description": "A pegged reference defines which price point a pegged order is linked to - meaning the price for a pegged order is calculated from the value of the reference price point"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Order Amendment",
            "description": "An order amendment is a request to amend or update an existing order on Vega  The `orderID`, `partyID` and `marketID` fields are used for looking up the order only and cannot be amended by this command"
        },
        "vega.commands.v1.OrderCancellation": {
            "properties": {
                "order_id": {
                    "type": "string",
                    "description": "Unique identifier for the order (set by the system after consensus), required field"
                },
                "market_id": {
                    "type": "string",
                    "description": "Market identifier for the order, required field"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Order Cancellation",
            "description": "An order cancellation is a request to cancel an existing order on Vega"
        },
        "vega.commands.v1.OrderSubmission": {
            "properties": {
                "market_id": {
                    "type": "string",
                    "description": "Market identifier for the order, required field"
                },
                "price": {
                    "type": "string",
                    "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places, , required field for limit orders, however it is not required for market orders"
                },
                "size": {
                    "type": "string",
                    "description": "Size for the order, for example, in a futures market the size equals the number of contracts, cannot be negative"
                },
                "side": {
                    "enum": [
                        "SIDE_UNSPECIFIED",
                        0,
                        "SIDE_BUY",
                        1,
                        "SIDE_SELL",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Side",
                    "description": "A side relates to the direction of an order, to Buy, or Sell"
                },
                "time_in_force": {
                    "enum": [
                        "TIME_IN_FORCE_UNSPECIFIED",
                        0,
                        "TIME_IN_FORCE_GTC",
                        1,
                        "TIME_IN_FORCE_GTT",
                        2,
                        "TIME_IN_FORCE_IOC",
                        3,
                        "TIME_IN_FORCE_FOK",
                        4,
                        "TIME_IN_FORCE_GFA",
                        5,
                        "TIME_IN_FORCE_GFN",
                        6
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Time In Force",
                    "description": "Time In Force for an order See [What order types are available to trade on Vega?](https://docs.testnet.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail"
                },
                "expires_at": {
                    "type": "string",
                    "description": "Timestamp for when the order will expire, in nanoseconds since the epoch, required field only for `Order.TimeInForce`.TIME_IN_FORCE_GTT` - See `VegaTimeResponse`.`timestamp`"
                },
                "type": {
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        0,
                        "TYPE_LIMIT",
                        1,
                        "TYPE_MARKET",
                        2,
                        "TYPE_NETWORK",
                        3
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Type",
                    "description": "Type values for an order"
                },
                "reference": {
                    "type": "string",
                    "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus, currently set internally by the node to return a unique reference identifier for the order submission"
                },
                "pegged_order": {
                    "$ref": "#/definitions/vega.PeggedOrder",
                    "additionalProperties": true,
                    "description": "Used to specify the details for a pegged order - See `PeggedOrder`"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Order Submission",
            "description": "An order submission is a request to submit or create a new order on Vega"
        },
        "vega.commands.v1.ProposalSubmission": {
            "properties": {
                "reference": {
                    "type": "string",
                    "description": "Proposal reference"
                },
                "terms": {
                    "$ref": "#/definitions/vega.ProposalTerms",
                    "additionalProperties": true,
                    "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted"
                },
                "rationale": {
                    "$ref": "#/definitions/vega.ProposalRationale",
                    "additionalProperties": true,
                    "description": "The rationale behind a proposal."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Proposal Submission",
            "description": "A command to submit a new proposal for the Vega network governance"
        },
        "vega.commands.v1.ProtocolUpgradeProposal": {
            "properties": {
                "upgrade_block_height": {
                    "type": "string",
                    "description": "The block height at which to perform the upgrade"
                },
                "vega_release_tag": {
                    "type": "string",
                    "description": "the release tag for the vega binary"
                },
                "data_node_release_tag": {
                    "type": "string",
                    "description": "the release tag for the data-node binary"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Protocol Upgrade Proposal"
        },
        "vega.commands.v1.RecurringTransfer": {
            "properties": {
                "start_epoch": {
                    "type": "string",
                    "description": "The first epoch from which this transfer shall be paid"
                },
                "end_epoch": {
                    "type": "string",
                    "description": "The last epoch at which this transfer shall be paid"
                },
                "factor": {
                    "type": "string",
                    "description": "factor needs to be \u003e 0"
                },
                "dispatch_strategy": {
                    "$ref": "#/definitions/vega.DispatchStrategy",
                    "additionalProperties": true,
                    "description": "optional parameter defining how a transfer is dispatched"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Recurring Transfer",
            "description": "Specific details for a recurring transfer"
        },
        "vega.commands.v1.Signature": {
            "properties": {
                "value": {
                    "type": "string",
                    "description": "The bytes of the signature (hex-encoded)."
                },
                "algo": {
                    "type": "string",
                    "description": "The algorithm used to create the signature."
                },
                "version": {
                    "type": "integer",
                    "description": "The version of the signature used to create the signature."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Signature",
            "description": "A signature to authenticate a transaction and to be verified by the Vega network."
        },
        "vega.commands.v1.Transfer": {
            "properties": {
                "from_account_type": {
                    "enum": [
                        "ACCOUNT_TYPE_UNSPECIFIED",
                        0,
                        "ACCOUNT_TYPE_INSURANCE",
                        1,
                        "ACCOUNT_TYPE_SETTLEMENT",
                        2,
                        "ACCOUNT_TYPE_MARGIN",
                        3,
                        "ACCOUNT_TYPE_GENERAL",
                        4,
                        "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                        5,
                        "ACCOUNT_TYPE_FEES_LIQUIDITY",
                        6,
                        "ACCOUNT_TYPE_FEES_MAKER",
                        7,
                        "ACCOUNT_TYPE_BOND",
                        9,
                        "ACCOUNT_TYPE_EXTERNAL",
                        10,
                        "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                        11,
                        "ACCOUNT_TYPE_GLOBAL_REWARD",
                        12,
                        "ACCOUNT_TYPE_PENDING_TRANSFERS",
                        13,
                        "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                        14,
                        "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                        15,
                        "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                        16,
                        "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS",
                        17
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Account Type",
                    "description": "Various collateral/account types as used by Vega"
                },
                "to": {
                    "type": "string",
                    "description": "The public key of the destination account"
                },
                "to_account_type": {
                    "enum": [
                        "ACCOUNT_TYPE_UNSPECIFIED",
                        0,
                        "ACCOUNT_TYPE_INSURANCE",
                        1,
                        "ACCOUNT_TYPE_SETTLEMENT",
                        2,
                        "ACCOUNT_TYPE_MARGIN",
                        3,
                        "ACCOUNT_TYPE_GENERAL",
                        4,
                        "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                        5,
                        "ACCOUNT_TYPE_FEES_LIQUIDITY",
                        6,
                        "ACCOUNT_TYPE_FEES_MAKER",
                        7,
                        "ACCOUNT_TYPE_BOND",
                        9,
                        "ACCOUNT_TYPE_EXTERNAL",
                        10,
                        "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                        11,
                        "ACCOUNT_TYPE_GLOBAL_REWARD",
                        12,
                        "ACCOUNT_TYPE_PENDING_TRANSFERS",
                        13,
                        "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                        14,
                        "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                        15,
                        "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                        16,
                        "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS",
                        17
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Account Type",
                    "description": "Various collateral/account types as used by Vega"
                },
                "asset": {
                    "type": "string",
                    "description": "The asset"
                },
                "amount": {
                    "type": "string",
                    "description": "The amount to be taken from the source account"
                },
                "reference": {
                    "type": "string",
                    "description": "The reference to be attached to the transfer"
                },
                "one_off": {
                    "$ref": "#/definitions/vega.commands.v1.OneOffTransfer",
                    "additionalProperties": true
                },
                "recurring": {
                    "$ref": "#/definitions/vega.commands.v1.RecurringTransfer",
                    "additionalProperties": true
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Transfer",
            "description": "A transfer initiated by a party"
        },
        "vega.commands.v1.UndelegateSubmission": {
            "properties": {
                "node_id": {
                    "type": "string"
                },
                "amount": {
                    "type": "string",
                    "description": "optional, if not specified = ALL"
                },
                "method": {
                    "enum": [
                        "METHOD_UNSPECIFIED",
                        0,
                        "METHOD_NOW",
                        1,
                        "METHOD_AT_END_OF_EPOCH",
                        2,
                        "METHOD_IN_ANGER",
                        3
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Method"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Undelegate Submission"
        },
        "vega.commands.v1.VoteSubmission": {
            "properties": {
                "proposal_id": {
                    "type": "string",
                    "description": "The ID of the proposal to vote for."
                },
                "value": {
                    "enum": [
                        "VALUE_UNSPECIFIED",
                        0,
                        "VALUE_NO",
                        1,
                        "VALUE_YES",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Value",
                    "description": "Vote value"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Vote Submission",
            "description": "A command to submit a new vote for a governance proposal."
        },
        "vega.commands.v1.WithdrawSubmission": {
            "properties": {
                "amount": {
                    "type": "string",
                    "description": "The amount to be withdrawn"
                },
                "asset": {
                    "type": "string",
                    "description": "The asset to be withdrawn"
                },
                "ext": {
                    "$ref": "#/definitions/vega.WithdrawExt",
                    "additionalProperties": true,
                    "description": "Foreign chain specifics"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Withdraw Submission",
            "description": "Represents the submission request to withdraw funds for a party on Vega"
        },
        "vega.events.v1.AuctionEvent": {
            "properties": {
                "market_id": {
                    "type": "string",
                    "description": "Market identifier for the event"
                },
                "opening_auction": {
                    "type": "boolean",
                    "description": "True if the event indicates an auction opening and False otherwise"
                },
                "leave": {
                    "type": "boolean",
                    "description": "True if the event indicates leaving auction mode and False otherwise"
                },
                "start": {
                    "type": "string",
                    "description": "Timestamp containing the start time for an auction"
                },
                "end": {
                    "type": "string",
                    "description": "Timestamp containing the end time for an auction"
                },
                "trigger": {
                    "enum": [
                        "AUCTION_TRIGGER_UNSPECIFIED",
                        0,
                        "AUCTION_TRIGGER_BATCH",
                        1,
                        "AUCTION_TRIGGER_OPENING",
                        2,
                        "AUCTION_TRIGGER_PRICE",
                        3,
                        "AUCTION_TRIGGER_LIQUIDITY",
                        4
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Auction Trigger",
                    "description": "Auction triggers indicate what condition triggered an auction (if market is in auction mode)"
                },
                "extension_trigger": {
                    "enum": [
                        "AUCTION_TRIGGER_UNSPECIFIED",
                        0,
                        "AUCTION_TRIGGER_BATCH",
                        1,
                        "AUCTION_TRIGGER_OPENING",
                        2,
                        "AUCTION_TRIGGER_PRICE",
                        3,
                        "AUCTION_TRIGGER_LIQUIDITY",
                        4
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Auction Trigger",
                    "description": "Auction triggers indicate what condition triggered an auction (if market is in auction mode)"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Auction Event",
            "description": "An auction event indicating a change in auction state, for example starting or ending an auction"
        },
        "vega.events.v1.BusEvent": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique event identifier for the message"
                },
                "block": {
                    "type": "string",
                    "description": "The batch (or block) of transactions that the events relate to"
                },
                "type": {
                    "enum": [
                        "BUS_EVENT_TYPE_UNSPECIFIED",
                        0,
                        "BUS_EVENT_TYPE_ALL",
                        1,
                        "BUS_EVENT_TYPE_TIME_UPDATE",
                        2,
                        "BUS_EVENT_TYPE_TRANSFER_RESPONSES",
                        3,
                        "BUS_EVENT_TYPE_POSITION_RESOLUTION",
                        4,
                        "BUS_EVENT_TYPE_ORDER",
                        5,
                        "BUS_EVENT_TYPE_ACCOUNT",
                        6,
                        "BUS_EVENT_TYPE_PARTY",
                        7,
                        "BUS_EVENT_TYPE_TRADE",
                        8,
                        "BUS_EVENT_TYPE_MARGIN_LEVELS",
                        9,
                        "BUS_EVENT_TYPE_PROPOSAL",
                        10,
                        "BUS_EVENT_TYPE_VOTE",
                        11,
                        "BUS_EVENT_TYPE_MARKET_DATA",
                        12,
                        "BUS_EVENT_TYPE_NODE_SIGNATURE",
                        13,
                        "BUS_EVENT_TYPE_LOSS_SOCIALIZATION",
                        14,
                        "BUS_EVENT_TYPE_SETTLE_POSITION",
                        15,
                        "BUS_EVENT_TYPE_SETTLE_DISTRESSED",
                        16,
                        "BUS_EVENT_TYPE_MARKET_CREATED",
                        17,
                        "BUS_EVENT_TYPE_ASSET",
                        18,
                        "BUS_EVENT_TYPE_MARKET_TICK",
                        19,
                        "BUS_EVENT_TYPE_WITHDRAWAL",
                        20,
                        "BUS_EVENT_TYPE_DEPOSIT",
                        21,
                        "BUS_EVENT_TYPE_AUCTION",
                        22,
                        "BUS_EVENT_TYPE_RISK_FACTOR",
                        23,
                        "BUS_EVENT_TYPE_NETWORK_PARAMETER",
                        24,
                        "BUS_EVENT_TYPE_LIQUIDITY_PROVISION",
                        25,
                        "BUS_EVENT_TYPE_MARKET_UPDATED",
                        26,
                        "BUS_EVENT_TYPE_ORACLE_SPEC",
                        27,
                        "BUS_EVENT_TYPE_ORACLE_DATA",
                        28,
                        "BUS_EVENT_TYPE_DELEGATION_BALANCE",
                        29,
                        "BUS_EVENT_TYPE_VALIDATOR_SCORE",
                        30,
                        "BUS_EVENT_TYPE_EPOCH_UPDATE",
                        31,
                        "BUS_EVENT_TYPE_VALIDATOR_UPDATE",
                        32,
                        "BUS_EVENT_TYPE_STAKE_LINKING",
                        33,
                        "BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT",
                        34,
                        "BUS_EVENT_TYPE_CHECKPOINT",
                        35,
                        "BUS_EVENT_TYPE_STREAM_START",
                        36,
                        "BUS_EVENT_TYPE_KEY_ROTATION",
                        37,
                        "BUS_EVENT_TYPE_STATE_VAR",
                        38,
                        "BUS_EVENT_TYPE_NETWORK_LIMITS",
                        39,
                        "BUS_EVENT_TYPE_TRANSFER",
                        40,
                        "BUS_EVENT_TYPE_VALIDATOR_RANKING",
                        41,
                        "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_EVENT",
                        42,
                        "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SET_THRESHOLD",
                        43,
                        "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_ADDED",
                        44,
                        "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_REMOVED",
                        45,
                        "BUS_EVENT_TYPE_POSITION_STATE",
                        46,
                        "BUS_EVENT_TYPE_ETHEREUM_KEY_ROTATION",
                        47,
                        "BUS_EVENT_TYPE_PROTOCOL_UPGRADE_PROPOSAL",
                        48,
                        "BUS_EVENT_TYPE_MARKET",
                        101,
                        "BUS_EVENT_TYPE_TX_ERROR",
                        201
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Bus Event Type",
                    "description": "An (event) bus event type is used to specify a type of event It has 2 styles of event: Single values (e.g. BUS_EVENT_TYPE_ORDER) where they represent one data item Group values (e.g. BUS_EVENT_TYPE_AUCTION) where they represent a group of data items"
                },
                "time_update": {
                    "$ref": "#/definitions/vega.events.v1.TimeUpdate",
                    "additionalProperties": true,
                    "description": "Time update events - See [TimeUpdate](#vega.TimeUpdate)"
                },
                "transfer_responses": {
                    "$ref": "#/definitions/vega.events.v1.TransferResponses",
                    "additionalProperties": true,
                    "description": "Transfer responses update events - See [TransferResponses](#vega.TransferResponses)"
                },
                "position_resolution": {
                    "$ref": "#/definitions/vega.events.v1.PositionResolution",
                    "additionalProperties": true,
                    "description": "Position resolution events - See [PositionResolution](#vega.PositionResolution)"
                },
                "order": {
                    "$ref": "#/definitions/vega.Order",
                    "additionalProperties": true,
                    "description": "Order events"
                },
                "account": {
                    "$ref": "#/definitions/vega.Account",
                    "additionalProperties": true,
                    "description": "Account events"
                },
                "party": {
                    "$ref": "#/definitions/vega.Party",
                    "additionalProperties": true,
                    "description": "Party events"
                },
                "trade": {
                    "$ref": "#/definitions/vega.Trade",
                    "additionalProperties": true,
                    "description": "Trade events"
                },
                "margin_levels": {
                    "$ref": "#/definitions/vega.MarginLevels",
                    "additionalProperties": true,
                    "description": "Margin level update events"
                },
                "proposal": {
                    "$ref": "#/definitions/vega.Proposal",
                    "additionalProperties": true,
                    "description": "Proposal events (for governance)"
                },
                "vote": {
                    "$ref": "#/definitions/vega.Vote",
                    "additionalProperties": true,
                    "description": "Vote events (for governance)"
                },
                "market_data": {
                    "$ref": "#/definitions/vega.MarketData",
                    "additionalProperties": true,
                    "description": "Market data events"
                },
                "node_signature": {
                    "$ref": "#/definitions/vega.commands.v1.NodeSignature",
                    "additionalProperties": true,
                    "description": "Node signature events"
                },
                "loss_socialization": {
                    "$ref": "#/definitions/vega.events.v1.LossSocialization",
                    "additionalProperties": true,
                    "description": "Loss socialization events - See [LossSocialization](#vega.LossSocialization)"
                },
                "settle_position": {
                    "$ref": "#/definitions/vega.events.v1.SettlePosition",
                    "additionalProperties": true,
                    "description": "Position settlement events - See [SettlePosition](#vega.SettlePosition)"
                },
                "settle_distressed": {
                    "$ref": "#/definitions/vega.events.v1.SettleDistressed",
                    "additionalProperties": true,
                    "description": "Position distressed events - See [SettleDistressed](#vega.SettleDistressed)"
                },
                "market_created": {
                    "$ref": "#/definitions/vega.Market",
                    "additionalProperties": true,
                    "description": "Market created events"
                },
                "asset": {
                    "$ref": "#/definitions/vega.Asset",
                    "additionalProperties": true,
                    "description": "Asset events"
                },
                "market_tick": {
                    "$ref": "#/definitions/vega.events.v1.MarketTick",
                    "additionalProperties": true,
                    "description": "Market tick events - See [MarketTick](#vega.MarketTick)"
                },
                "withdrawal": {
                    "$ref": "#/definitions/vega.Withdrawal",
                    "additionalProperties": true,
                    "description": "Withdrawal events"
                },
                "deposit": {
                    "$ref": "#/definitions/vega.Deposit",
                    "additionalProperties": true,
                    "description": "Deposit events"
                },
                "auction": {
                    "$ref": "#/definitions/vega.events.v1.AuctionEvent",
                    "additionalProperties": true,
                    "description": "Auction events - See [AuctionEvent](#vega.AuctionEvent)"
                },
                "risk_factor": {
                    "$ref": "#/definitions/vega.RiskFactor",
                    "additionalProperties": true,
                    "description": "Risk factor events"
                },
                "network_parameter": {
                    "$ref": "#/definitions/vega.NetworkParameter",
                    "additionalProperties": true,
                    "description": "Network parameter events"
                },
                "liquidity_provision": {
                    "$ref": "#/definitions/vega.LiquidityProvision",
                    "additionalProperties": true,
                    "description": "LiquidityProvision  events"
                },
                "market_updated": {
                    "$ref": "#/definitions/vega.Market",
                    "additionalProperties": true,
                    "description": "Market created events"
                },
                "oracle_spec": {
                    "$ref": "#/definitions/oracles.v1.OracleSpec",
                    "additionalProperties": true,
                    "description": "OracleSpec events"
                },
                "oracle_data": {
                    "$ref": "#/definitions/oracles.v1.OracleData",
                    "additionalProperties": true,
                    "description": "OracleData events"
                },
                "delegation_balance": {
                    "$ref": "#/definitions/vega.events.v1.DelegationBalanceEvent",
                    "additionalProperties": true,
                    "description": "Delegation balance events"
                },
                "validator_score": {
                    "$ref": "#/definitions/vega.events.v1.ValidatorScoreEvent",
                    "additionalProperties": true,
                    "description": "Validator score calculated"
                },
                "epoch_event": {
                    "$ref": "#/definitions/vega.events.v1.EpochEvent",
                    "additionalProperties": true,
                    "description": "Epoch update events - See [Epoch](#vega.Epoch)"
                },
                "validator_update": {
                    "$ref": "#/definitions/vega.events.v1.ValidatorUpdate",
                    "additionalProperties": true,
                    "description": "Validator update events"
                },
                "stake_linking": {
                    "$ref": "#/definitions/vega.events.v1.StakeLinking",
                    "additionalProperties": true,
                    "description": "Staking event"
                },
                "reward_payout": {
                    "$ref": "#/definitions/vega.events.v1.RewardPayoutEvent",
                    "additionalProperties": true,
                    "description": "Reward payout event"
                },
                "checkpoint": {
                    "$ref": "#/definitions/vega.events.v1.CheckpointEvent",
                    "additionalProperties": true,
                    "description": "Checkpoint was created"
                },
                "key_rotation": {
                    "$ref": "#/definitions/vega.events.v1.KeyRotation",
                    "additionalProperties": true,
                    "description": "Key rotation took place"
                },
                "state_var": {
                    "$ref": "#/definitions/vega.events.v1.StateVar",
                    "additionalProperties": true,
                    "description": "State variable consensus state transition update"
                },
                "network_limits": {
                    "$ref": "#/definitions/vega.NetworkLimits",
                    "additionalProperties": true,
                    "description": "Network limits events"
                },
                "transfer": {
                    "$ref": "#/definitions/vega.events.v1.Transfer",
                    "additionalProperties": true,
                    "description": "Transfer event"
                },
                "ranking_event": {
                    "$ref": "#/definitions/vega.events.v1.ValidatorRankingEvent",
                    "additionalProperties": true,
                    "description": "Ranking event"
                },
                "erc20_multisig_signer_event": {
                    "$ref": "#/definitions/vega.events.v1.ERC20MultiSigSignerEvent",
                    "additionalProperties": true,
                    "description": "ERC20 multi sig signer event"
                },
                "erc20_multisig_set_threshold_event": {
                    "$ref": "#/definitions/vega.events.v1.ERC20MultiSigThresholdSetEvent",
                    "additionalProperties": true,
                    "description": "ERC20 multi sig set threshold event"
                },
                "erc20_multisig_signer_added": {
                    "$ref": "#/definitions/vega.events.v1.ERC20MultiSigSignerAdded",
                    "additionalProperties": true,
                    "description": "ERC20 multi sig signer added"
                },
                "erc20_multisig_signer_removed": {
                    "$ref": "#/definitions/vega.events.v1.ERC20MultiSigSignerRemoved",
                    "additionalProperties": true,
                    "description": "ERC20 multi sig signer removed"
                },
                "position_state_event": {
                    "$ref": "#/definitions/vega.events.v1.PositionStateEvent",
                    "additionalProperties": true,
                    "description": "Position status for a party in a market"
                },
                "ethereum_key_rotation": {
                    "$ref": "#/definitions/vega.events.v1.EthereumKeyRotation",
                    "additionalProperties": true,
                    "description": "Ethereum key rotation took place"
                },
                "protocol_upgrade_event": {
                    "$ref": "#/definitions/vega.events.v1.ProtocolUpgradeEvent",
                    "additionalProperties": true,
                    "description": "Protocol upgrade proposal updates"
                },
                "market": {
                    "$ref": "#/definitions/vega.events.v1.MarketEvent",
                    "additionalProperties": true,
                    "description": "Market tick events - See [MarketEvent](#vega.MarketEvent)"
                },
                "tx_err_event": {
                    "$ref": "#/definitions/vega.events.v1.TxErrorEvent",
                    "additionalProperties": true,
                    "description": "Transaction error events, not included in the ALL event type"
                },
                "version": {
                    "type": "integer",
                    "description": "Version of bus event"
                },
                "chain_id": {
                    "type": "string"
                },
                "tx_hash": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Bus Event",
            "description": "A bus event is a container for event bus events emitted by Vega"
        },
        "vega.events.v1.CheckpointEvent": {
            "properties": {
                "hash": {
                    "type": "string"
                },
                "block_hash": {
                    "type": "string"
                },
                "block_height": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Checkpoint Event"
        },
        "vega.events.v1.DelegationBalanceEvent": {
            "properties": {
                "party": {
                    "type": "string"
                },
                "node_id": {
                    "type": "string"
                },
                "amount": {
                    "type": "string"
                },
                "epoch_seq": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Delegation Balance Event",
            "description": "DelegationBalanceEvent - updates on the delegation balance of a party to a node in the current epoch in effect"
        },
        "vega.events.v1.ERC20MulistSigSignerRemovedSubmitter": {
            "properties": {
                "signature_id": {
                    "type": "string",
                    "description": "The ID of this signature bundle"
                },
                "submitter": {
                    "type": "string",
                    "description": "The address of the submitter of the transaction"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "ERC 20 Mulist Sig Signer Removed Submitter"
        },
        "vega.events.v1.ERC20MultiSigSignerAdded": {
            "properties": {
                "signature_id": {
                    "type": "string",
                    "description": "The identifier of the signature bundle"
                },
                "validator_id": {
                    "type": "string",
                    "description": "The vega node ID of the node to be added"
                },
                "timestamp": {
                    "type": "string",
                    "description": "the time at which this happened"
                },
                "new_signer": {
                    "type": "string",
                    "description": "The ethereum address of the new signer"
                },
                "submitter": {
                    "type": "string",
                    "description": "The address of the submitter of the transaction"
                },
                "nonce": {
                    "type": "string",
                    "description": "The nonce used."
                },
                "epoch_seq": {
                    "type": "string",
                    "description": "The epoch that the node was added for"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "ERC 20 Multi Sig Signer Added"
        },
        "vega.events.v1.ERC20MultiSigSignerEvent": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        0,
                        "TYPE_ADDED",
                        1,
                        "TYPE_REMOVED",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Type"
                },
                "signer": {
                    "type": "string"
                },
                "nonce": {
                    "type": "string"
                },
                "block_time": {
                    "type": "string"
                },
                "tx_hash": {
                    "type": "string"
                },
                "log_index": {
                    "type": "string"
                },
                "block_number": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "ERC 20 Multi Sig Signer Event"
        },
        "vega.events.v1.ERC20MultiSigSignerRemoved": {
            "properties": {
                "signature_submitters": {
                    "items": {
                        "$ref": "#/definitions/vega.events.v1.ERC20MulistSigSignerRemovedSubmitter"
                    },
                    "type": "array",
                    "description": "A list containing all the IDs of bundle generated There should be one bundle generated for every validators in the validator set"
                },
                "validator_id": {
                    "type": "string",
                    "description": "The vega node ID of the node which is to be removed"
                },
                "timestamp": {
                    "type": "string",
                    "description": "the time at which this happened"
                },
                "old_signer": {
                    "type": "string",
                    "description": "The ethereum address of the signer to be removed"
                },
                "nonce": {
                    "type": "string",
                    "description": "The nonce used."
                },
                "epoch_seq": {
                    "type": "string",
                    "description": "The epoch that the node was removed for"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "ERC 20 Multi Sig Signer Removed"
        },
        "vega.events.v1.ERC20MultiSigThresholdSetEvent": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "new_threshold": {
                    "type": "integer"
                },
                "nonce": {
                    "type": "string"
                },
                "block_time": {
                    "type": "string"
                },
                "tx_hash": {
                    "type": "string"
                },
                "log_index": {
                    "type": "string"
                },
                "block_number": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "ERC 20 Multi Sig Threshold Set Event"
        },
        "vega.events.v1.EpochEvent": {
            "properties": {
                "seq": {
                    "type": "string",
                    "description": "Sequence number that increases by one each epoch"
                },
                "action": {
                    "enum": [
                        "EPOCH_ACTION_UNSPECIFIED",
                        0,
                        "EPOCH_ACTION_START",
                        1,
                        "EPOCH_ACTION_END",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Epoch Action",
                    "description": "What epoch action has occurred"
                },
                "start_time": {
                    "type": "string",
                    "description": "What time did this epoch start"
                },
                "expire_time": {
                    "type": "string",
                    "description": "What time should this epoch end"
                },
                "end_time": {
                    "type": "string",
                    "description": "What time did it actually end"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Epoch Event",
            "description": "Epoch details"
        },
        "vega.events.v1.EthereumKeyRotation": {
            "properties": {
                "node_id": {
                    "type": "string",
                    "description": "Node id of the node"
                },
                "old_address": {
                    "type": "string",
                    "description": "Old Ethereum address of validator node"
                },
                "new_address": {
                    "type": "string",
                    "description": "New Ethereum address of validator node"
                },
                "block_height": {
                    "type": "string",
                    "description": "Height of the block where key rotation took effect"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Ethereum Key Rotation",
            "description": "An Ethereum key rotation events contains information about Ethereum key rotation"
        },
        "vega.events.v1.KeyRotation": {
            "properties": {
                "node_id": {
                    "type": "string",
                    "description": "Node id of the node"
                },
                "old_pub_key": {
                    "type": "string",
                    "description": "Old Vega public key of validator node"
                },
                "new_pub_key": {
                    "type": "string",
                    "description": "New Vega public key of validator node"
                },
                "block_height": {
                    "type": "string",
                    "description": "Height of the block where key rotation took effect"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Key Rotation",
            "description": "A key rotation events contains information about Vega key rotation"
        },
        "vega.events.v1.LossSocialization": {
            "properties": {
                "market_id": {
                    "type": "string",
                    "description": "Market identifier for the event"
                },
                "party_id": {
                    "type": "string",
                    "description": "Party identifier (public key) for the event"
                },
                "amount": {
                    "type": "string",
                    "description": "Amount distributed"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Loss Socialization",
            "description": "A loss socialization event contains details on the amount of wins unable to be distributed"
        },
        "vega.events.v1.MarketEvent": {
            "properties": {
                "market_id": {
                    "type": "string",
                    "description": "Market identifier for the event"
                },
                "payload": {
                    "type": "string",
                    "description": "Payload is a unique information string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Market Event",
            "description": "MarketEvent - the common denominator for all market events interface has a method to return a string for logging"
        },
        "vega.events.v1.MarketTick": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Market identifier for the event"
                },
                "time": {
                    "type": "string",
                    "description": "Timestamp containing latest update from Vega blockchain aka Vega-time"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Market Tick",
            "description": "A market ticket event contains the time value for when a particular market was last processed on Vega"
        },
        "vega.events.v1.OneOffTransfer": {
            "properties": {
                "deliver_on": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "One Off Transfer"
        },
        "vega.events.v1.PositionResolution": {
            "properties": {
                "market_id": {
                    "type": "string",
                    "description": "Market identifier for the event"
                },
                "distressed": {
                    "type": "string",
                    "description": "Number of distressed traders"
                },
                "closed": {
                    "type": "string",
                    "description": "Number of close outs"
                },
                "mark_price": {
                    "type": "string",
                    "description": "Mark price as a string representing a scaled price"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Position Resolution",
            "description": "A position resolution event contains information on distressed trades"
        },
        "vega.events.v1.PositionStateEvent": {
            "properties": {
                "party_id": {
                    "type": "string",
                    "description": "Party identifier for this position update"
                },
                "market_id": {
                    "type": "string",
                    "description": "Market identifier for this position update"
                },
                "size": {
                    "type": "string",
                    "description": "Current position"
                },
                "potential_buys": {
                    "type": "string",
                    "description": "Potential orders"
                },
                "potential_sells": {
                    "type": "string"
                },
                "vw_buy_price": {
                    "type": "string",
                    "description": "Volume weighted prices"
                },
                "vw_sell_price": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Position State Event",
            "description": "A position state event contains the current position state for a single party in a single market"
        },
        "vega.events.v1.ProtocolUpgradeEvent": {
            "properties": {
                "upgrade_block_height": {
                    "type": "string",
                    "description": "The block height at which to perform the upgrade"
                },
                "vega_release_tag": {
                    "type": "string",
                    "description": "the release tag for the vega binary"
                },
                "data_node_release_tag": {
                    "type": "string",
                    "description": "the release tag for the data-node binary"
                },
                "approvers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "tendermint validators that have agreed to the upgrade"
                },
                "status": {
                    "enum": [
                        "PROTOCOL_UPGRADE_PROPOSAL_STATUS_UNSPECIFIED",
                        0,
                        "PROTOCOL_UPGRADE_PROPOSAL_STATUS_PENDING",
                        1,
                        "PROTOCOL_UPGRADE_PROPOSAL_STATUS_APPROVED",
                        2,
                        "PROTOCOL_UPGRADE_PROPOSAL_STATUS_REJECTED",
                        3
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Protocol Upgrade Proposal Status"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Protocol Upgrade Event"
        },
        "vega.events.v1.RecurringTransfer": {
            "properties": {
                "start_epoch": {
                    "type": "string"
                },
                "end_epoch": {
                    "type": "string"
                },
                "factor": {
                    "type": "string"
                },
                "dispatch_strategy": {
                    "$ref": "#/definitions/vega.DispatchStrategy",
                    "additionalProperties": true
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Recurring Transfer"
        },
        "vega.events.v1.RewardPayoutEvent": {
            "properties": {
                "party": {
                    "type": "string"
                },
                "epoch_seq": {
                    "type": "string"
                },
                "asset": {
                    "type": "string"
                },
                "amount": {
                    "type": "string"
                },
                "percent_of_total_reward": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "reward_type": {
                    "type": "string"
                },
                "market": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Reward Payout Event"
        },
        "vega.events.v1.SettleDistressed": {
            "properties": {
                "market_id": {
                    "type": "string",
                    "description": "Market identifier for the event"
                },
                "party_id": {
                    "type": "string",
                    "description": "Party identifier (public key) for the event"
                },
                "margin": {
                    "type": "string",
                    "description": "Margin value as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places"
                },
                "price": {
                    "type": "string",
                    "description": "Price as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Settle Distressed",
            "description": "A settle distressed event contains information on distressed trading parties who are closed out  Note: Any PositionResolution event (market level) will most likely be followed by a number of these events"
        },
        "vega.events.v1.SettlePosition": {
            "properties": {
                "market_id": {
                    "type": "string",
                    "description": "Market identifier for the event"
                },
                "party_id": {
                    "type": "string",
                    "description": "Party identifier (public key) for the event"
                },
                "price": {
                    "type": "string",
                    "description": "Price of settlement as a string"
                },
                "trade_settlements": {
                    "items": {
                        "$ref": "#/definitions/vega.events.v1.TradeSettlement"
                    },
                    "type": "array",
                    "description": "A collection of 1 or more trade settlements"
                },
                "position_factor": {
                    "type": "string",
                    "description": "Position factor - 10 ^ number of position decimal places"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Settle Position",
            "description": "A settle position event contains position settlement information for a party"
        },
        "vega.events.v1.StakeLinking": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The internal ID for this staking event"
                },
                "type": {
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        0,
                        "TYPE_LINK",
                        1,
                        "TYPE_UNLINK",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Type"
                },
                "ts": {
                    "type": "string",
                    "description": "The timestamps at which the event was emitted by ethereum"
                },
                "party": {
                    "type": "string",
                    "description": "The party to whom the event is directed at."
                },
                "amount": {
                    "type": "string",
                    "description": "The amount of stake deposited or removed"
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        0,
                        "STATUS_PENDING",
                        1,
                        "STATUS_ACCEPTED",
                        2,
                        "STATUS_REJECTED",
                        3
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Status"
                },
                "finalized_at": {
                    "type": "string",
                    "description": "The time at which the vega network finalized the state of the event"
                },
                "tx_hash": {
                    "type": "string",
                    "description": "The hash of the transaction from which the events happen"
                },
                "block_height": {
                    "type": "string",
                    "description": "The block when the event happened"
                },
                "block_time": {
                    "type": "string",
                    "description": "The block time"
                },
                "log_index": {
                    "type": "string",
                    "description": "The log index"
                },
                "ethereum_address": {
                    "type": "string",
                    "description": "the ethereum address from which the stake link was iniated"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Stake Linking",
            "description": "StakeLinking - an event notifying of stake being deposited or removed for a given party These events are emitted for every Staking deposit or removed accepted by the network"
        },
        "vega.events.v1.StateVar": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "event_id": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "State Var",
            "description": "StateVarEvent - updates on state changes in state variable consensus"
        },
        "vega.events.v1.TimeUpdate": {
            "properties": {
                "timestamp": {
                    "type": "string",
                    "description": "Timestamp containing latest update from Vega blockchain aka Vega-time"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Time Update",
            "description": "A time update event contains the latest time update from Vega blockchain and indicates the start of a new block"
        },
        "vega.events.v1.TradeSettlement": {
            "properties": {
                "size": {
                    "type": "string",
                    "description": "Size of trade settlement"
                },
                "price": {
                    "type": "string",
                    "description": "Price of settlement as string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Trade Settlement",
            "description": "A trade settlement is part of the settle position event"
        },
        "vega.events.v1.Transfer": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "from": {
                    "type": "string"
                },
                "from_account_type": {
                    "enum": [
                        "ACCOUNT_TYPE_UNSPECIFIED",
                        0,
                        "ACCOUNT_TYPE_INSURANCE",
                        1,
                        "ACCOUNT_TYPE_SETTLEMENT",
                        2,
                        "ACCOUNT_TYPE_MARGIN",
                        3,
                        "ACCOUNT_TYPE_GENERAL",
                        4,
                        "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                        5,
                        "ACCOUNT_TYPE_FEES_LIQUIDITY",
                        6,
                        "ACCOUNT_TYPE_FEES_MAKER",
                        7,
                        "ACCOUNT_TYPE_BOND",
                        9,
                        "ACCOUNT_TYPE_EXTERNAL",
                        10,
                        "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                        11,
                        "ACCOUNT_TYPE_GLOBAL_REWARD",
                        12,
                        "ACCOUNT_TYPE_PENDING_TRANSFERS",
                        13,
                        "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                        14,
                        "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                        15,
                        "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                        16,
                        "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS",
                        17
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Account Type",
                    "description": "Various collateral/account types as used by Vega"
                },
                "to": {
                    "type": "string"
                },
                "to_account_type": {
                    "enum": [
                        "ACCOUNT_TYPE_UNSPECIFIED",
                        0,
                        "ACCOUNT_TYPE_INSURANCE",
                        1,
                        "ACCOUNT_TYPE_SETTLEMENT",
                        2,
                        "ACCOUNT_TYPE_MARGIN",
                        3,
                        "ACCOUNT_TYPE_GENERAL",
                        4,
                        "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
                        5,
                        "ACCOUNT_TYPE_FEES_LIQUIDITY",
                        6,
                        "ACCOUNT_TYPE_FEES_MAKER",
                        7,
                        "ACCOUNT_TYPE_BOND",
                        9,
                        "ACCOUNT_TYPE_EXTERNAL",
                        10,
                        "ACCOUNT_TYPE_GLOBAL_INSURANCE",
                        11,
                        "ACCOUNT_TYPE_GLOBAL_REWARD",
                        12,
                        "ACCOUNT_TYPE_PENDING_TRANSFERS",
                        13,
                        "ACCOUNT_TYPE_REWARD_TAKER_PAID_FEES",
                        14,
                        "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
                        15,
                        "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
                        16,
                        "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS",
                        17
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Account Type",
                    "description": "Various collateral/account types as used by Vega"
                },
                "asset": {
                    "type": "string"
                },
                "amount": {
                    "type": "string"
                },
                "reference": {
                    "type": "string"
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        0,
                        "STATUS_PENDING",
                        1,
                        "STATUS_DONE",
                        2,
                        "STATUS_REJECTED",
                        3,
                        "STATUS_STOPPED",
                        4,
                        "STATUS_CANCELLED",
                        5
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Status"
                },
                "timestamp": {
                    "type": "string"
                },
                "one_off": {
                    "$ref": "#/definitions/vega.events.v1.OneOffTransfer",
                    "additionalProperties": true
                },
                "recurring": {
                    "$ref": "#/definitions/vega.events.v1.RecurringTransfer",
                    "additionalProperties": true
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Transfer"
        },
        "vega.events.v1.TransferResponses": {
            "properties": {
                "responses": {
                    "items": {
                        "$ref": "#/definitions/vega.TransferResponse"
                    },
                    "type": "array",
                    "description": "One or more entries containing internal transfer information"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Transfer Responses",
            "description": "A transfer responses event contains a collection of transfer information"
        },
        "vega.events.v1.TxErrorEvent": {
            "properties": {
                "party_id": {
                    "type": "string",
                    "description": "Unique party identifier for the related party"
                },
                "err_msg": {
                    "type": "string",
                    "description": "An error message describing what went wrong"
                },
                "order_submission": {
                    "$ref": "#/definitions/vega.commands.v1.OrderSubmission",
                    "additionalProperties": true
                },
                "order_amendment": {
                    "$ref": "#/definitions/vega.commands.v1.OrderAmendment",
                    "additionalProperties": true
                },
                "order_cancellation": {
                    "$ref": "#/definitions/vega.commands.v1.OrderCancellation",
                    "additionalProperties": true
                },
                "proposal": {
                    "$ref": "#/definitions/vega.commands.v1.ProposalSubmission",
                    "additionalProperties": true
                },
                "vote_submission": {
                    "$ref": "#/definitions/vega.commands.v1.VoteSubmission",
                    "additionalProperties": true
                },
                "liquidity_provision_submission": {
                    "$ref": "#/definitions/vega.commands.v1.LiquidityProvisionSubmission",
                    "additionalProperties": true
                },
                "withdraw_submission": {
                    "$ref": "#/definitions/vega.commands.v1.WithdrawSubmission",
                    "additionalProperties": true
                },
                "delegate_submission": {
                    "$ref": "#/definitions/vega.commands.v1.DelegateSubmission",
                    "additionalProperties": true
                },
                "undelegate_submission": {
                    "$ref": "#/definitions/vega.commands.v1.UndelegateSubmission",
                    "additionalProperties": true
                },
                "liquidity_provision_cancellation": {
                    "$ref": "#/definitions/vega.commands.v1.LiquidityProvisionCancellation",
                    "additionalProperties": true
                },
                "liquidity_provision_amendment": {
                    "$ref": "#/definitions/vega.commands.v1.LiquidityProvisionAmendment",
                    "additionalProperties": true
                },
                "transfer": {
                    "$ref": "#/definitions/vega.commands.v1.Transfer",
                    "additionalProperties": true
                },
                "cancel_transfer": {
                    "$ref": "#/definitions/vega.commands.v1.CancelTransfer",
                    "additionalProperties": true
                },
                "announce_node": {
                    "$ref": "#/definitions/vega.commands.v1.AnnounceNode",
                    "additionalProperties": true
                },
                "oracle_data_submission": {
                    "$ref": "#/definitions/vega.commands.v1.OracleDataSubmission",
                    "additionalProperties": true
                },
                "protocol_upgrade_proposal": {
                    "$ref": "#/definitions/vega.commands.v1.ProtocolUpgradeProposal",
                    "additionalProperties": true
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Tx Error Event"
        },
        "vega.events.v1.ValidatorRankingEvent": {
            "properties": {
                "node_id": {
                    "type": "string"
                },
                "stake_score": {
                    "type": "string",
                    "description": "stake based score - no anti-whaling"
                },
                "performance_score": {
                    "type": "string",
                    "description": "performance base score"
                },
                "ranking_score": {
                    "type": "string",
                    "description": "final score"
                },
                "previous_status": {
                    "type": "string",
                    "description": "the status of the validator in the previous epoch"
                },
                "next_status": {
                    "type": "string",
                    "description": "the status of the validator in the next epoch"
                },
                "epoch_seq": {
                    "type": "string",
                    "description": "the epoch seq for which the status is valid"
                },
                "tm_voting_power": {
                    "type": "integer",
                    "description": "tendermint voting power of the validator"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Validator Ranking Event",
            "description": "An event that explains the status of the validator for the coming epoch"
        },
        "vega.events.v1.ValidatorScoreEvent": {
            "properties": {
                "node_id": {
                    "type": "string"
                },
                "epoch_seq": {
                    "type": "string"
                },
                "validator_score": {
                    "type": "string"
                },
                "normalised_score": {
                    "type": "string"
                },
                "validator_performance": {
                    "type": "string"
                },
                "raw_validator_score": {
                    "type": "string"
                },
                "validator_status": {
                    "type": "string"
                },
                "multisig_score": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Validator Score Event",
            "description": "ValidatorScoreEvent is the score a validator gets for a given epoch"
        },
        "vega.events.v1.ValidatorUpdate": {
            "properties": {
                "node_id": {
                    "type": "string",
                    "description": "Node id of the node"
                },
                "vega_pub_key": {
                    "type": "string",
                    "description": "Vega public key of validator node"
                },
                "ethereum_address": {
                    "type": "string",
                    "description": "Ethereum public key of validator node"
                },
                "tm_pub_key": {
                    "type": "string",
                    "description": "Public key of Tendermint"
                },
                "info_url": {
                    "type": "string",
                    "description": "URL with more info on the node"
                },
                "country": {
                    "type": "string",
                    "description": "Country code (ISO 3166-1 alpha-2) for the location of the node"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the validator"
                },
                "avatar_url": {
                    "type": "string",
                    "description": "AvatarURL of the validator"
                },
                "vega_pub_key_index": {
                    "type": "integer",
                    "description": "Vega public key derivation index"
                },
                "added": {
                    "type": "boolean",
                    "description": "Flag indicating if the validator has been added to or removed from vega"
                },
                "from_epoch": {
                    "type": "string",
                    "description": "The epoch from which the validator was added or removed"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Validator Update",
            "description": "A validator update event contains information about validator node"
        }
    }
}