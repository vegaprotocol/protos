{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/OrderByReferenceResponse",
    "definitions": {
        "OrderByReferenceResponse": {
            "properties": {
                "order": {
                    "$ref": "#/definitions/vega.Order",
                    "additionalProperties": true,
                    "description": "An order, if found"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Order By Reference Response",
            "description": "Response for an order given an order reference"
        },
        "vega.Order": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for the order (set by the system after consensus)"
                },
                "market_id": {
                    "type": "string",
                    "description": "Market identifier for the order"
                },
                "party_id": {
                    "type": "string",
                    "description": "Party identifier for the order"
                },
                "side": {
                    "enum": [
                        "SIDE_UNSPECIFIED",
                        0,
                        "SIDE_BUY",
                        1,
                        "SIDE_SELL",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Side",
                    "description": "A side relates to the direction of an order, to Buy, or Sell"
                },
                "price": {
                    "type": "string",
                    "description": "Price for the order, the price is an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places"
                },
                "size": {
                    "type": "string",
                    "description": "Size for the order, for example, in a futures market the size equals the number of contracts"
                },
                "remaining": {
                    "type": "string",
                    "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED"
                },
                "time_in_force": {
                    "enum": [
                        "TIME_IN_FORCE_UNSPECIFIED",
                        0,
                        "TIME_IN_FORCE_GTC",
                        1,
                        "TIME_IN_FORCE_GTT",
                        2,
                        "TIME_IN_FORCE_IOC",
                        3,
                        "TIME_IN_FORCE_FOK",
                        4,
                        "TIME_IN_FORCE_GFA",
                        5,
                        "TIME_IN_FORCE_GFN",
                        6
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Time In Force",
                    "description": "Time In Force for an order"
                },
                "type": {
                    "enum": [
                        "TYPE_UNSPECIFIED",
                        0,
                        "TYPE_LIMIT",
                        1,
                        "TYPE_MARKET",
                        2,
                        "TYPE_NETWORK",
                        3
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Type",
                    "description": "Type values for an order"
                },
                "created_at": {
                    "type": "string",
                    "description": "Timestamp for when the order was created at, in nanoseconds since the epoch"
                },
                "status": {
                    "enum": [
                        "STATUS_UNSPECIFIED",
                        0,
                        "STATUS_ACTIVE",
                        1,
                        "STATUS_EXPIRED",
                        2,
                        "STATUS_CANCELLED",
                        3,
                        "STATUS_STOPPED",
                        4,
                        "STATUS_FILLED",
                        5,
                        "STATUS_REJECTED",
                        6,
                        "STATUS_PARTIALLY_FILLED",
                        7,
                        "STATUS_PARKED",
                        8
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Status",
                    "description": "Status values for an order"
                },
                "expires_at": {
                    "type": "string",
                    "description": "Timestamp for when the order will expire, in nanoseconds since the epoch"
                },
                "reference": {
                    "type": "string",
                    "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus - Currently set internally by the node to return a unique reference identifier for the order submission"
                },
                "reason": {
                    "enum": [
                        "ORDER_ERROR_UNSPECIFIED",
                        0,
                        "ORDER_ERROR_INVALID_MARKET_ID",
                        1,
                        "ORDER_ERROR_INVALID_ORDER_ID",
                        2,
                        "ORDER_ERROR_OUT_OF_SEQUENCE",
                        3,
                        "ORDER_ERROR_INVALID_REMAINING_SIZE",
                        4,
                        "ORDER_ERROR_TIME_FAILURE",
                        5,
                        "ORDER_ERROR_REMOVAL_FAILURE",
                        6,
                        "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
                        7,
                        "ORDER_ERROR_INVALID_ORDER_REFERENCE",
                        8,
                        "ORDER_ERROR_EDIT_NOT_ALLOWED",
                        9,
                        "ORDER_ERROR_AMEND_FAILURE",
                        10,
                        "ORDER_ERROR_NOT_FOUND",
                        11,
                        "ORDER_ERROR_INVALID_PARTY_ID",
                        12,
                        "ORDER_ERROR_MARKET_CLOSED",
                        13,
                        "ORDER_ERROR_MARGIN_CHECK_FAILED",
                        14,
                        "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
                        15,
                        "ORDER_ERROR_INTERNAL_ERROR",
                        16,
                        "ORDER_ERROR_INVALID_SIZE",
                        17,
                        "ORDER_ERROR_INVALID_PERSISTENCE",
                        18,
                        "ORDER_ERROR_INVALID_TYPE",
                        19,
                        "ORDER_ERROR_SELF_TRADING",
                        20,
                        "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
                        21,
                        "ORDER_ERROR_INCORRECT_MARKET_TYPE",
                        22,
                        "ORDER_ERROR_INVALID_TIME_IN_FORCE",
                        23,
                        "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
                        24,
                        "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
                        25,
                        "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
                        26,
                        "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
                        27,
                        "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
                        28,
                        "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
                        29,
                        "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
                        30,
                        "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
                        31,
                        "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
                        32,
                        "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
                        33,
                        "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
                        34,
                        "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
                        35,
                        "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
                        36,
                        "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
                        37,
                        "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
                        40,
                        "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
                        41,
                        "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
                        42,
                        "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
                        43,
                        "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
                        44,
                        "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
                        45,
                        "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
                        46,
                        "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS",
                        47
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Order Error",
                    "description": "OrderError codes are returned in the `[Order](#vega.Order).reason` field - If there is an issue with an order during its life-cycle, it will be marked with `status.ORDER_STATUS_REJECTED`"
                },
                "updated_at": {
                    "type": "string",
                    "description": "Timestamp for when the order was last updated, in nanoseconds since the epoch - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
                },
                "version": {
                    "type": "string",
                    "description": "The version for the order, initial value is version 1 and is incremented after each successful amend"
                },
                "batch_id": {
                    "type": "string",
                    "description": "Batch identifier for the order, used internally for orders submitted during auctions to keep track of the auction batch this order falls under (required for fees calculation)"
                },
                "pegged_order": {
                    "$ref": "#/definitions/vega.PeggedOrder",
                    "additionalProperties": true,
                    "description": "Pegged order details, used only if the order represents a pegged order."
                },
                "liquidity_provision_id": {
                    "type": "string",
                    "description": "Is this order created as part of a liquidity provision, will be empty if not."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Order",
            "description": "An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties"
        },
        "vega.PeggedOrder": {
            "properties": {
                "reference": {
                    "enum": [
                        "PEGGED_REFERENCE_UNSPECIFIED",
                        0,
                        "PEGGED_REFERENCE_MID",
                        1,
                        "PEGGED_REFERENCE_BEST_BID",
                        2,
                        "PEGGED_REFERENCE_BEST_ASK",
                        3
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Pegged Reference",
                    "description": "A pegged reference defines which price point a pegged order is linked to - meaning the price for a pegged order is calculated from the value of the reference price point"
                },
                "offset": {
                    "type": "string",
                    "description": "Offset from the price reference"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Pegged Order",
            "description": "Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET They can be used for any limit order that is valid during continuous trading"
        }
    }
}