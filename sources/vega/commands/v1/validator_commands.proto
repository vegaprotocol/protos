syntax = "proto3";

package vega.commands.v1;
option go_package = "code.vegaprotocol.io/protos/vega/commands/v1";

import "vega/vega.proto";
import "vega/chain_events.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// Used to Register a node as a validator during network start-up
message NodeRegistration {
  // Vega public key, required field
  string vega_pub_key = 1 [(validator.field) = {string_not_empty: true}];
  // Ethereum public key, required field
  string ethereum_address = 2 [(validator.field) = {string_not_empty: true}];
  // Public key for the blockchain, required field
  string chain_pub_key = 3 [(validator.field) = {string_not_empty: true}];
  // URL with more info on the node
  string info_url = 4 [(validator.field) = {string_not_empty: true}];
  // Country code (ISO 3166-1 alpha-2) for the location of the node
  string country = 5 [(validator.field) = {string_not_empty: true}];
  // ID of the validator, (public master key)
  string id = 6;
  // Name of the validator
  string name = 7;
  // AvatarURL of the validator
  string avatar_url = 8;
  // Vega public key derivation index
  uint32 vega_pub_key_index = 9;
}

// Used when a node votes for validating a given resource exists or is valid,
// for example, an ERC20 deposit is valid and exists on ethereum
message NodeVote {
  // Public key, required field
  bytes pub_key = 1 [(validator.field) = {string_not_empty: true}];
  // Reference, required field
  string reference = 2 [(validator.field) = {string_not_empty: true}];
}

// The kind of the signature created by a node, for example, allow-listing a new asset, withdrawal etc
enum NodeSignatureKind {
  // Represents an unspecified or missing value from the input
  NODE_SIGNATURE_KIND_UNSPECIFIED = 0;
  // Represents a signature for a new asset allow-listing
  NODE_SIGNATURE_KIND_ASSET_NEW = 1;
  // Represents a signature for an asset withdrawal
  NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL = 2;
}

// Represents a signature from a validator, to be used by a foreign chain in order to recognise a decision taken by the Vega network
message NodeSignature {
  // The identifier of the resource being signed
  string id = 1;
  // The signature
  bytes sig = 2;
  // The kind of resource being signed
  NodeSignatureKind kind = 3;
}

// An event forwarded to the Vega network to provide information on events happening on other networks
message ChainEvent {
  // The identifier of the transaction in which the events happened, usually a hash
  string tx_id = 1;
  // Arbitrary one-time integer used to prevent replay attacks
  uint64 nonce = 2;
  // The event
  oneof event {
    // Built-in asset event
    vega.BuiltinAssetEvent builtin = 1001;
    // Ethereum ERC20 event
    vega.ERC20Event erc20 = 1002;
    // Bitcoin BTC event
    vega.BTCEvent btc = 1003;
    // Validator event
    vega.ValidatorEvent validator = 1004;
    // Ethereum Staking event
    vega.StakingEvent staking_event = 1005;
  }
}

// A transaction to allow validator to rotate their vega keys
message KeyRotateSubmission {
  // New Vega public key derivation index
  uint32 new_pub_key_index = 1;
  // Target block at which the key rotation will take effect on
  uint64 target_block = 2;
  // The new public key to rotate to
  string new_pub_key = 3;
  // Hash of currently used public key
  string current_pub_key_hash = 4;
}

message StateVariableProposal {
  // The state value proposal details
  vega.StateValueProposal proposal = 1;
}