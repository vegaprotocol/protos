syntax = "proto3";

option go_package = "code.vegaprotocol.io/protos/data-node/api/v2";

import "vega/vega.proto";
import "google/protobuf/wrappers.proto";

package datanode.api.v2;

service TradingDataService {
    // Get an aggregated list of the changes in balances in a set of accounts over time
    rpc QueryBalanceHistory(QueryBalanceHistoryRequest) returns (QueryBalanceHistoryResponse) {}
}

message QueryBalanceHistoryRequest {
    // Limit the accounts considered according to the filter supplied
    AccountFilter filter = 1;
    // By default the net balances of all the accounts specified by the filter are returned.
    // If a list if fields is given in group_by, split out those balances by the supplied crietera.
    repeated AccountField group_by = 2;
}

message QueryBalanceHistoryResponse {
    repeated AggregatedBalance balances = 1;
}

// A list of the properties of an account, used for grouping
enum AccountField {
    ACCOUNT_FIELD_UNSPECIFIED = 0;
    ACCOUNT_FIELD_ID = 1;
    ACCOUNT_FIELD_PARTY_ID = 2;
    ACCOUNT_FIELD_ASSET_ID = 3;
    ACCOUNT_FIELD_MARKET_ID = 4;
    ACCOUNT_FIELD_TYPE = 5;
}

message AggregatedBalance {
    // Timestamp to of block the balance is referring to, in nanoseconds since the epoch
    int64 timestamp = 1;
    // The balance of the set of requested accounts at the time above
    string balance = 2;
    // If grouping by account ID, the account ID
    optional string account_id = 3;
    // If grouping by party, the party ID
    optional string party_id = 4;
    // If grouping by asset, the asset ID
    optional string asset_id = 5;
    // If grouping by market, the market ID
    optional string market_id = 6;
    // If grouping by account type, the account type
    vega.AccountType account_type = 7;
}

message AccountFilter{
    // Restrict accounts to those holding balances in this asset ID
    string asset_id = 1;
    // Restrict accounts to those owned by the parties in this list (pass an empty list for no filter)
    repeated string party_ids = 2;
    // Restrict accounts to those connected to the marketsin this list (pass an empty list for no filter)
    repeated string market_ids = 3;
    // Restrict accounts to those connected to any of the types in this list (pass an empty list for no filter)
    repeated vega.AccountType account_types = 4;
}



