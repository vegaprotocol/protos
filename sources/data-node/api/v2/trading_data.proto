syntax = "proto3";

option go_package = "code.vegaprotocol.io/protos/data-node/api/v2";

import "vega/vega.proto";
import "vega/governance.proto";
import "vega/markets.proto";
import "vega/assets.proto";
import "vega/oracles/v1/data.proto";
import "vega/oracles/v1/spec.proto";

package datanode.api.v2;

service TradingDataService {
    // -- Orders --
    // Get a list of Orders by Market
    rpc GetOrdersByMarket(GetOrdersByMarketRequest) returns (GetOrdersByMarketResponse);
    // Get all versions of the order by its orderID
    rpc GetOrderVersionsByID(GetOrderVersionsByIDRequest) returns (GetOrderVersionsByIDResponse);
    // Get a list of Orders by Market using cursor based pagination
    rpc GetOrdersByMarketConnection(GetOrdersByMarketConnectionRequest) returns (GetOrdersByMarketConnectionResponse);
    // Get a list of Orders by Party using cursor based pagination
    rpc GetOrdersByPartyConnection(GetOrdersByPartyConnectionRequest) returns (GetOrdersByPartyConnectionResponse);
    // Get all versions of the order by its orderID using cursor based pagination
    rpc GetOrderVersionsByIDConnection(GetOrderVersionsByIDConnectionRequest) returns (GetOrderVersionsByIDConnectionResponse);

    // -- Positions --
    // Get a list of Positions by Party using cursor based pagination
    rpc GetPositionsByPartyConnection(GetPositionsByPartyConnectionRequest) returns (GetPositionsByPartyConnectionResponse);

    // -- Balances --
    // Get an aggregated list of the changes in balances in a set of accounts over time
    rpc GetBalanceHistory(GetBalanceHistoryRequest) returns (GetBalanceHistoryResponse) {}

    // -- Market Data --
    // Get Market Data History for a Market ID between given dates using a cursor based pagination model
    rpc GetMarketDataHistoryByID(GetMarketDataHistoryByIDRequest) returns (GetMarketDataHistoryByIDResponse);
    // Subscribe to a stream of Markets Data
    rpc MarketsDataSubscribe(MarketsDataSubscribeRequest) returns (stream MarketsDataSubscribeResponse);

    // -- Transfers --
    // Get Transfers for a Market ID for a public key using a cursor based pagination model
    rpc GetTransfers(GetTransfersRequest) returns (GetTransfersResponse);

    // -- Network Limits --
    // Get the current network limits (is bootstrapping finished, are proposals enabled etc..)
    rpc GetNetworkLimits(GetNetworkLimitsRequest) returns (GetNetworkLimitsResponse);

    // -- Candles --
    // Get candle data for a given candle id
    rpc GetCandleData(GetCandleDataRequest) returns (GetCandleDataResponse);
    // Subscribe to a stream of Candle updates
    rpc SubscribeToCandleData(SubscribeToCandleDataRequest) returns (stream SubscribeToCandleDataResponse);
    // Gets all available intervals for a given market along with the corresponding candle id
    rpc GetCandlesForMarket(GetCandlesForMarketRequest) returns (GetCandlesForMarketResponse);

    // -- Votes --
    // Get Votes for a Party ID using a cursor based pagination model
    rpc ListVotes(ListVotesRequest) returns (ListVotesResponse);
    // Subscribe to a stream of votes
    rpc ObserveVotes(ObserveVotesRequest) returns (stream ObserveVotesResponse);

    // -- ERC20 Multi Sig --
    // Gets the signature bundles that add a particular validator to the multisig contract
    rpc GetERC20MultiSigSignerAddedBundles(GetERC20MultiSigSignerAddedBundlesRequest) returns (GetERC20MultiSigSignerAddedBundlesResponse);
    // Gets the signature bundles that remove a particular validator to the multisig contract
    rpc GetERC20MultiSigSignerRemovedBundles(GetERC20MultiSigSignerRemovedBundlesRequest) returns (GetERC20MultiSigSignerRemovedBundlesResponse);
    // Gets the signature bundles that remove a particular validator to the multisig contract
    rpc GetERC20ListAssetBundle(GetERC20ListAssetBundleRequest) returns (GetERC20ListAssetBundleResponse);

    // -- Trades --
    // Get trades by market using a cursor based pagination model
    rpc GetTradesByMarket(GetTradesByMarketRequest) returns (GetTradesByMarketResponse);
    // Get trades by party using a cursor based pagination model
    rpc GetTradesByParty(GetTradesByPartyRequest) returns (GetTradesByPartyResponse);
    // Get trades by market with the corresponding orderID using a cursor based pagination model
    rpc GetTradesByOrderID(GetTradesByOrderIDRequest) returns (GetTradesByOrderIDResponse);

    // -- Oracles --
    // Get an oracle spec by ID.
    rpc GetOracleSpecByID(GetOracleSpecByIDRequest) returns (GetOracleSpecByIDResponse);
    // Get the oracle specs
    rpc ListOracleSpecs(ListOracleSpecsRequest) returns (ListOracleSpecsResponse);
    // Get oracle data that matched the given spec
    rpc GetOracleDataBySpecID(GetOracleDataBySpecIDRequest) returns (GetOracleDataBySpecIDResponse);
    // Get all oracle data
    rpc ListOracleData(ListOracleDataRequest) returns (ListOracleDataResponse);
    // Get cursor based paginated oracle specs data
    rpc GetOracleSpecsConnection(GetOracleSpecsConnectionRequest) returns (GetOracleSpecsConnectionResponse);
    // Get cursor based paginated oracle data
    rpc GetOracleDataConnection(GetOracleDataConnectionRequest) returns (GetOracleDataConnectionResponse);

    // -- Markets --
    // Get all markets using a cursor based pagination model
    rpc GetMarkets(GetMarketsRequest) returns (GetMarketsResponse);

    // -- Parties --
    // Get Parties using a cursor based pagination model
    rpc GetParties(GetPartiesRequest) returns (GetPartiesResponse);

    // -- Margin Levels --
    // Get Margin Levels using a cursor based pagination model
    rpc GetMarginLevels(GetMarginLevelsRequest) returns (GetMarginLevelsResponse);
    // -- Rewards --

    // Get rewards
    rpc GetRewards(GetRewardsRequest) returns (GetRewardsResponse);

    // Get reward summaries
    rpc GetRewardSummaries(GetRewardSummariesRequest) returns (GetRewardSummariesResponse);

    // -- Deposits --
    rpc GetDeposits(GetDepositsRequest) returns (GetDepositsResponse);

    // -- Withdrawals --
    rpc GetWithdrawals(GetWithdrawalsRequest) returns (GetWithdrawalsResponse);

    // -- Assets --
    rpc GetAssets(GetAssetsRequest) returns (GetAssetsResponse);

    // -- Liquidity Provisions --
    rpc GetLiquidityProvisions(GetLiquidityProvisionsRequest) returns (GetLiquidityProvisionsResponse);

}

// -- Pagination --
// Pagination controls
message OffsetPagination {
    // Skip the number of records specified, default is 0
    uint64 skip = 1;
    // Limit the number of returned records to the value specified, default is 50
    uint64 limit = 2;
    // Descending reverses the order of the records returned,
    // default is true, if false the results will be returned in ascending order
    bool descending = 3;
}

// Cursor information for cursor based pagination requests
message Pagination {
    optional int32 first = 1;
    optional string after = 2;
    optional int32 last = 3;
    optional string before = 4;
    // Newest records first, older records last, default is true
    optional bool newest_first = 5;
}

// Page information for cursor based pagination
message PageInfo {
    bool has_next_page = 1;
    bool has_previous_page = 2;
    string start_cursor = 3;
    string end_cursor = 4;
}

// -- Orders --
// Request for a list of orders for a market
message GetOrdersByMarketRequest {
    // Market identifier, required field
    string market_id = 1;
    // Optional pagination controls
    OffsetPagination pagination = 2;
}

// Response for a list of orders for a market
message GetOrdersByMarketResponse {
    // A list of 0 or more orders
    repeated vega.Order orders = 1;
}

// Request for a list of all versions of an order given the specified order identifier
message GetOrderVersionsByIDRequest {
    // Order identifier, required field
    string order_id = 1;
    // Pagination controls
    OffsetPagination pagination = 2;
}

// Response to a request for a list of all versions of an order
message GetOrderVersionsByIDResponse {
    // Paged connection with 0 or more orders (list will contain the same order but with different versions, if it has been amended)
    OrderConnection orders = 1;
}

// Request for a list of orders for a market
message GetOrdersByMarketConnectionRequest {
    // Market identifier, required field
    string market_id = 1;
    // Optional pagination controls
    Pagination pagination = 2;
}

// Response for a list of orders for a market
message GetOrdersByMarketConnectionResponse {
    // Paged order connection
    OrderConnection orders = 1;
}

// Request for a list of orders for a market
message GetOrdersByPartyConnectionRequest {
    // Market identifier, required field
    string party_id = 1;
    string market_id = 2;
    // Optional pagination controls
    Pagination pagination = 3;
}

// Response for a list of orders for a market
message GetOrdersByPartyConnectionResponse {
    // Paged order connection
    OrderConnection orders = 1;
}

// Request for a list of all versions of an order given the specified order identifier
message GetOrderVersionsByIDConnectionRequest {
    // Order identifier, required field
    string order_id = 1;
    // Pagination controls
    Pagination pagination = 2;
}

// Response to a request for a list of all versions of an order
message GetOrderVersionsByIDConnectionResponse {
    // A list of 0 or more orders (list will contain the same order but with different versions, if it has been amended)
    OrderConnection orders = 1;
}

// -- Positions --
// Request for a list of positions for a party
// Optionally, if a market identifier is set, the results will be filtered for that market only
message GetPositionsByPartyConnectionRequest {
    // Party identifier, required field
    string party_id = 1;
    // Market identifier
    string market_id = 2;
    // Optional pagination control
    optional Pagination pagination = 3;
}

// Response for a list of positions for a party
message GetPositionsByPartyConnectionResponse {
    // A list of 0 or more positions
    PositionConnection positions = 1;
}

message PositionEdge {
    vega.Position node = 1;
    string cursor = 2;
}

message PositionConnection {
    int64 total_count = 1;
    repeated PositionEdge edges = 2;
    PageInfo page_info = 3;
}

// -- Balances --
message GetBalanceHistoryRequest {
    // Limit the accounts considered according to the filter supplied
    AccountFilter filter = 1;
    // By default the net balances of all the accounts specified by the filter are returned.
    // If a list if fields is given in group_by, split out those balances by the supplied crietera.
    repeated AccountField group_by = 2;
}

message GetBalanceHistoryResponse {
    repeated AggregatedBalance balances = 1;
}

message AccountFilter{
    // Restrict accounts to those holding balances in this asset ID
    string asset_id = 1;
    // Restrict accounts to those owned by the parties in this list (pass an empty list for no filter)
    repeated string party_ids = 2;
    // Restrict accounts to those connected to the marketsin this list (pass an empty list for no filter)
    repeated string market_ids = 3;
    // Restrict accounts to those connected to any of the types in this list (pass an empty list for no filter)
    repeated vega.AccountType account_types = 4;
}

// A list of the properties of an account, used for grouping
enum AccountField {
    ACCOUNT_FIELD_UNSPECIFIED = 0;
    ACCOUNT_FIELD_ID = 1;
    ACCOUNT_FIELD_PARTY_ID = 2;
    ACCOUNT_FIELD_ASSET_ID = 3;
    ACCOUNT_FIELD_MARKET_ID = 4;
    ACCOUNT_FIELD_TYPE = 5;
}

message AggregatedBalance {
    // Timestamp to of block the balance is referring to, in nanoseconds since the epoch
    int64 timestamp = 1;
    // The balance of the set of requested accounts at the time above
    string balance = 2;
    // If grouping by account ID, the account ID
    optional string account_id = 3;
    // If grouping by party, the party ID
    optional string party_id = 4;
    // If grouping by asset, the asset ID
    optional string asset_id = 5;
    // If grouping by market, the market ID
    optional string market_id = 6;
    // If grouping by account type, the account type
    vega.AccountType account_type = 7;
}

// -- Market Data --
// Request for Market Data History
message GetMarketDataHistoryByIDRequest {
    // Market identifier, required field
    string market_id = 1;
    // Optional Unix time in nanoseconds
    optional int64 start_timestamp = 2;
    // Optional Unix time in nanoseconds
    optional int64 end_timestamp = 3;
    // Optional pagination control
    optional Pagination pagination = 4;
    // Optional offset pagination control in order to support existing version of the Market Data History query
    // that is available in the GraphQL API. That function has been deprecated, but until it's removed we have
    // added this to support pagination queries that use an offset.
    optional OffsetPagination offset_pagination = 5 [deprecated = true];
}

// Response for Market Data History
message GetMarketDataHistoryByIDResponse {
    MarketDataConnection market_data = 1;
}

message MarketDataEdge {
    vega.MarketData node = 1;
    string cursor = 2;
}

message MarketDataConnection {
    int64 total_count = 1;
    repeated MarketDataEdge edges = 2;
    PageInfo page_info = 3;
}

// Request to subscribe to a stream of MarketsData
// Optionally, the list can be additionally filtered by market
message MarketsDataSubscribeRequest {
    // Market identifier
    string market_id = 1;
}

message MarketsDataSubscribeResponse {
    repeated vega.MarketData market_data = 1;
}

// -- Transfers --
// Request for transfers
message GetTransfersRequest {
    // Public key of which transfers to request
    string pubkey = 1;
    // Directions to include in the response data
    bool is_from = 2;
    bool is_to = 3;
    // Optional pagination cntrol
    optional Pagination pagination = 4;
}

// Response for transfers
message GetTransfersResponse {
    repeated TransferConnection transfers = 1;
}

message TransferEdge {
    vega.Transfer node = 1;
    string cursor = 2;
}

message TransferConnection {
    int64 total_count = 1;
    repeated TransferEdge edges = 2;
    PageInfo page_info = 3;
}

// -- Network Limits --
// Request for the current network limits
message GetNetworkLimitsRequest {}

// Response for the current network limits
message GetNetworkLimitsResponse {
    vega.NetworkLimits limits = 1;
}

// -- Candles --
// Request to get a list of supported intervals for the given market along with the corresponding candle id
message GetCandlesForMarketRequest {
    // The unique identifier for the market
    string market_id = 1;
}

// Maps an interval for a given market to its corresponding candle_id
message IntervalToCandleId {
    // The interval for the candle
    string interval = 1;

    // The unique id of the candle
    string candle_id=2;
}

// A list of interval to candle id mappings for a given market
message GetCandlesForMarketResponse {
    repeated IntervalToCandleId interval_to_candle_id = 1;
}

// Represents the high, low, open, and closing prices for an interval of trading,
// referred to commonly as a candlestick or candle
message Candle {
    // Timestamp for the point in time when the candle was initially created/opened, in nanoseconds since the epoch
    // - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
    int64 start = 1;
    // Timestamp for the point in time when the candle was last updated, in nanoseconds since the epoch
    // - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
    int64 last_update = 2;
    // Highest price for trading during the candle interval
    string high = 3;
    // Lowest price for trading during the candle interval
    string low = 4;
    // Open trade price
    string open = 5;
    // Closing trade price
    string close = 6;
    // Total trading volume during the candle interval
    uint64 volume = 7;
}

// Request to subscribe to a stream of (Candles)[#vega.Candle]
message SubscribeToCandleDataRequest {
    // The unique identifier for the candle
    string candle_id = 1;
}

message SubscribeToCandleDataResponse {
    Candle candle = 1;
}

// Request for a list of candles for a market at an interval
message GetCandleDataRequest {
    // Candle identifier, required field.
    string candle_id = 1;

    // Timestamp to retrieve candles since, in nanoseconds since the epoch,
    // required field - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
    int64 from_timestamp = 2;

    // Timestamp to retrieve candles since, in nanoseconds since the epoch,
    // required field - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
    int64 to_timestamp = 3;

    // Time interval for the candles, required field specified as a valid postgres interval
    vega.Interval interval = 4;

    // pagination controls
    Pagination pagination = 5;
}

// Response for list of candles for a market at an interval
message GetCandleDataResponse {
    // A list of 0 or more candles
    CandleDataConnection candles = 1;
}

message CandleEdge {
    Candle node = 1;
    string cursor = 2;
}

message CandleDataConnection {
    int64 total_count = 1;
    repeated CandleEdge edges = 2;
    PageInfo page_info = 3;
}

// -- Votes --
// Request for Votes
message ListVotesRequest {
    // Party of which the votes are requested
    string party_id = 1;

    // Optional pagination control
    optional Pagination pagination = 2;
}

// Response for Votes
message ListVotesResponse {
    VoteConnection votes = 1;
}

message VoteEdge {
    vega.Vote node = 1;
    string cursor = 2;
}

message VoteConnection {
    int64 total_count = 1;
    repeated VoteEdge edges = 2;
    PageInfo page_info = 3;
}

message ObserveVotesRequest {
    // Party of which the votes are requested
    optional string party_id = 1;
    // Option proposal id for which the votes are requested
    optional string proposal_id = 2;
}

message ObserveVotesResponse {
    vega.Vote vote = 1;
}

// -- ERC20 Multi Sig --
message GetERC20MultiSigSignerAddedBundlesRequest {

    // The node id of the validator of which a signature bundle is required
    string node_id = 1;

    // The epoch which generated the bundle i.e the epoch in which the node became a tendermint validator
    string epoch_seq = 2;

    // Pagination controls
    OffsetPagination pagination = 3;
}

message GetERC20MultiSigSignerAddedBundlesResponse {

    // list of bundles for that validator, it may have been added multiple times if removed in between
    repeated ERC20MultiSigSignerAddedBundle bundles = 1;
}

message ERC20MultiSigSignerAddedBundle {

    // The ethereum address of the signer to be removed
    string new_signer = 1;

    // The ethereum address of the submitter
    string submitter = 2;

    // The nonce used in the signing operation
    string nonce = 4;

    // unixnano timestamp for when the validator was added
    int64 timestamp = 5;

    // The bundle of signatures from current validators to sign in the new signer
    string signatures = 6;

    // The epoch in which the validator was added
    string epoch_seq = 3;

}

message GetERC20MultiSigSignerRemovedBundlesRequest {
    // The node id of the validator of which a signature bundle is required
    string node_id = 1;

    // The ethereum address of the validator which will submit the bundle
    string submitter = 2;

    // The epoch which generated the bundle i.e the epoch in which the node was demoted from a tendermint validator
    string epoch_seq = 3;

    // Pagination controls
    OffsetPagination pagination = 4;
}

message GetERC20MultiSigSignerRemovedBundlesResponse {
    // list of signer bundles for that validator
    repeated ERC20MultiSigSignerRemovedBundle bundles = 1;
}

message ERC20MultiSigSignerRemovedBundle {

    // The ethereum address of the signer to be removed
    string old_signer = 1;

    // The ethereum address of the submitter
    string submitter = 2;

    // The nonce used in the signing operation
    string nonce = 4;

    // unixnano timestamp for when the validator was added
    int64 timestamp = 5;

    // The bundle of signatures from current validators to sign in the new signer
    string signatures = 6;

    // The epoch in which the validator was removed
    string epoch_seq = 7;

}

// A request to get an asset bundle details
message GetERC20ListAssetBundleRequest {
  // The ID of the asset requested
  string asset_id = 1;
}

// The response with all information required to bundle the call to propose an erc20 asset
message GetERC20ListAssetBundleResponse {
  // The address of the asset on ethereum
  string asset_source = 1;
  // The ID of the vega asset
  string vega_asset_id = 2;
  // The nonce, which is actually the internal reference for the proposal
  string nonce = 3;
   // The signatures bundle as hex encoded data, forward by 0x
  // e.g: 0x + sig1 + sig2 + ... + sixN
  string signatures = 4;
}

// -- Trades --
message TradeEdge {
    vega.Trade node = 1;
    string cursor = 2;
}

message TradeConnection {
    int64 total_count = 1;
    repeated TradeEdge edges = 2;
    PageInfo page_info = 3;
}

message GetTradesByMarketRequest {
    string market_id = 1;
    Pagination pagination = 2;
}

message GetTradesByMarketResponse {
    TradeConnection trades = 1;
}

message GetTradesByOrderIDRequest {
    string market_id = 1;
    string order_id = 2;
    Pagination pagination = 3;
}

message GetTradesByOrderIDResponse {
    TradeConnection trades = 1;
}

message GetTradesByPartyRequest {
    string party_id = 1;
    string market_id = 2;
    Pagination pagination = 3;
}

message GetTradesByPartyResponse {
    TradeConnection trades = 1;
}

// -- Oracles --

// The request to get a specific oracle spec by identifier
message GetOracleSpecByIDRequest {
    // The ID to get the oracle spec for
    string oracle_spec_id = 1;
}

// The response for a oracle spec
message GetOracleSpecByIDResponse {
    // The oracle spec matching the ID.
    vega.oracles.v1.OracleSpec oracle_spec = 1 ;
}

// The request to get all active oracle specs
message ListOracleSpecsRequest {
    // Pagination controls
    Pagination pagination = 1;
}

// The response to get all active oracle specs
message ListOracleSpecsResponse {
    // The list of active oracle specs
    repeated vega.oracles.v1.OracleSpec oracle_specs = 1;
}

// The request to get all oracle data broadcast to a given oracle spec
message GetOracleDataBySpecIDRequest {
    // The oracle spec ID the oracle data are broadcast to
    string oracle_spec_id = 1;

    // Pagination controls
    Pagination pagination = 2;
}

// The response for a list of all oracle data broadcast to a given spec
message  GetOracleDataBySpecIDResponse {
    // The list of oracle data broadcast to a given spec
    repeated vega.oracles.v1.OracleData oracle_data = 1;
}

// The request to get all seen oracle data
message ListOracleDataRequest {
    // Pagination controls
    Pagination pagination = 1;
}

// The response to get all seen oracle data
message ListOracleDataResponse {
    // The list of seen oracle data
    repeated vega.oracles.v1.OracleData oracle_data = 1;
}

message GetOracleSpecsConnectionRequest {
    string spec_id = 1;
    Pagination pagination = 2;
}

message GetOracleSpecsConnectionResponse {
    OracleSpecsConnection oracle_specs = 1;
}

message GetOracleDataConnectionRequest {
    string spec_id = 1;
    Pagination pagination = 2;
}

message GetOracleDataConnectionResponse {
    OracleDataConnection oracle_data = 1;
}

message OracleSpecEdge {
    vega.oracles.v1.OracleSpec node = 1;
    string cursor = 2;
}

message OracleSpecsConnection {
    int64 total_count = 1;
    repeated OracleSpecEdge edges = 2;
    PageInfo page_info = 3;
}

message OracleDataEdge {
    vega.oracles.v1.OracleData node = 1;
    string cursor = 2;
}

message OracleDataConnection {
    int64 total_count = 1;
    repeated OracleDataEdge edges = 2;
    PageInfo page_info = 3;
}

// -- Markets --
message GetMarketsRequest {
    string market_id = 1;
    Pagination pagination = 2;
}

message GetMarketsResponse {
    MarketConnection markets = 1;
}

message MarketEdge {
    vega.Market node = 1;
    string cursor = 2;
}

message MarketConnection {
    int64 total_count = 1;
    repeated MarketEdge edges = 2;
    PageInfo page_info = 3;
}

// -- Parties --
message GetPartiesRequest {
    string party_id = 1;
    Pagination pagination = 2;
}

message GetPartiesResponse {
    PartyConnection party = 1;
}

message PartyEdge {
    vega.Party node = 1;
    string cursor = 2;
}

message PartyConnection {
    int64 total_count = 1;
    repeated PartyEdge edges = 2;
    PageInfo page_info = 3;
}

message OrderEdge {
    vega.Order node = 1;
    string cursor = 2;
}

message GetMarginLevelsRequest {
    string party_id = 1;
    string market_id = 2;
    Pagination pagination = 3;
}

message GetMarginLevelsResponse {
    MarginConnection margin_levels = 1;
}

message OrderConnection {
    int64 total_count = 1;
    repeated OrderEdge edges = 2;
    PageInfo page_info = 3;
}

message MarginEdge {
    vega.MarginLevels node = 1;
    string cursor = 2;
}

message MarginConnection {
    int64 total_count = 1;
    repeated MarginEdge edges = 2;
    PageInfo page_info = 3;
}

// A request to get reward details for a party
message GetRewardSummariesRequest {
    string party_id = 1;
    string asset_id = 2;
}

// The return message with reward details in for a single party
message GetRewardSummariesResponse {
    repeated vega.RewardSummary summaries = 1;
}

// A request to get reward details for a party
message GetRewardsRequest {
    string party_id = 1;
    string asset_id = 2;
    Pagination pagination = 3;
}

// The return message with reward details in for a single party
message GetRewardsResponse {
    RewardsConnection rewards = 1;
}

message RewardEdge {
    vega.Reward node = 1;
    string cursor = 2;
}

message RewardsConnection {
    int64 total_count = 1;
    repeated RewardEdge edges = 2;
    PageInfo page_info = 3;
}

// -- Deposits --
message GetDepositsRequest {
    string party_id = 1;
    Pagination pagination = 2;
}

message GetDepositsResponse {
    DepositsConnection deposits = 1;
}

message DepositEdge {
    vega.Deposit node = 1;
    string cursor = 2;
}

message DepositsConnection {
    int64 total_count = 1;
    repeated DepositEdge edges = 2;
    PageInfo page_info = 3;
}

// -- Withdrawals --
message GetWithdrawalsRequest {
    string party_id = 1;
    Pagination pagination = 2;
}

message GetWithdrawalsResponse {
    WithdrawalsConnection withdrawals = 1;
}

message WithdrawalEdge {
    vega.Withdrawal node = 1;
    string cursor = 2;
}

message WithdrawalsConnection {
    int64 total_count = 1;
    repeated WithdrawalEdge edges = 2;
    PageInfo page_info = 3;
}

// -- Assets --
message GetAssetsRequest {
    string asset_id = 1;
    Pagination pagination = 2;
}

message GetAssetsResponse {
    AssetsConnection assets = 1;
}

message AssetEdge {
    vega.Asset node = 1;
    string cursor = 2;
}

message AssetsConnection {
    int64 total_count = 1;
    repeated AssetEdge edges = 2;
    PageInfo page_info = 3;
}

// -- Liquidity Provisions --
message GetLiquidityProvisionsRequest {
    // The target market for the liquidity provision orders
    string market = 1;
    // The party which submitted the liquidity provision orders
    string party = 2;
    // The reference of the liquidity provision
    string reference = 3;

    Pagination pagination = 4;
}

message GetLiquidityProvisionsResponse {
    LiquidityProvisionsConnection liquidity_provisions = 1;
}

message LiquidityProvisionsEdge {
    vega.LiquidityProvision node = 1;
    string cursor = 2;
}

message LiquidityProvisionsConnection {
    int64 total_count = 1;
    repeated LiquidityProvisionsEdge edges = 2;
    PageInfo page_info = 3;
}
